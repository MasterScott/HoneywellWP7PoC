//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace TotalConnect.TotalConnectService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://services.alarmnet.com/TC2/", ConfigurationName="TotalConnectService.svcTC2APISoap")]
    public interface svcTC2APISoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ControlASwitch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginControlASwitch(string SessionID, long DeviceID, long SwitchID, int SwitchAction, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SwitchControlDataResults EndControlASwitch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/RunAutomationSynchronization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginRunAutomationSynchronization(string SessionID, long LocationID, long DeviceID, int UserCode, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AutomationSyncResults EndRunAutomationSynchronization(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SynchronizeSecurityPanel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSynchronizeSecurityPanel(string SessionID, string InstallerCode, string UserCode, long LocationID, bool ForceImport, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AutomationSyncResults EndSynchronizeSecurityPanel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DisconnectPanel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDisconnectPanel(string SessionID, long DeviceID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndDisconnectPanel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ValidateEmailAddressInSession", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginValidateEmailAddressInSession(string SessionId, string EmailAddress, string ValidationKey, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EmailValidationResult EndValidateEmailAddressInSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ValidateEmailAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginValidateEmailAddress(string UserName, string ValidationKey, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EmailValidationResult EndValidateEmailAddress(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SendEmailValidationDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSendEmailValidationDetails(string SessionId, string EmailAddress, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EmailValidationResult EndSendEmailValidationDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelMetaDataAndFullStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelMetaDataAndFullStatus(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResults EndGetPanelMetaDataAndFullStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelMetaDataAndFullStatusEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelMetaDataAndFullStatusEx(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx EndGetPanelMetaDataAndFullStatusEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelFullStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelFullStatus(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelStatusResults EndGetPanelFullStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelFullStatusByDeviceID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelFullStatusByDeviceID(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelStatusResults EndGetPanelFullStatusByDeviceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelFullStatusEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelFullStatusEx(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelStatusResultsEx EndGetPanelFullStatusEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelFullStatusByDeviceIDEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelFullStatusByDeviceIDEx(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelStatusResultsEx EndGetPanelFullStatusByDeviceIDEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetZonesListInState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetZonesListInState(string SessionID, long LocationID, int PartitionID, int ListIdentifierID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GetZonesListInStateResult EndGetZonesListInState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelMetaDataAndFullStatusByDeviceID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelMetaDataAndFullStatusByDeviceID(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResults EndGetPanelMetaDataAndFullStatusByDeviceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetPanelMetaDataAndFullStatusByDeviceIDEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetPanelMetaDataAndFullStatusByDeviceIDEx(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx EndGetPanelMetaDataAndFullStatusByDeviceIDEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ImportSecurityInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginImportSecurityInformation(string SessionID, long LocationID, long DeviceID, int InstallerCode, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ImportSecurityInfoResults EndImportSecurityInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/Bypass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginBypass(string SessionID, long LocationID, long DeviceID, int Zone, int UserCode, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ZoneBypassResults EndBypass(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ArmSecuritySystem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginArmSecuritySystem(string SessionID, long LocationID, long DeviceID, int ArmType, int UserCode, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ArmSecuritySystemResults EndArmSecuritySystem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DisarmSecuritySystem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDisarmSecuritySystem(string SessionID, long LocationID, long DeviceID, int UserCode, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.DisarmSecuritySystemResults EndDisarmSecuritySystem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ReadConsoleDisplay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginReadConsoleDisplay(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ReadConsoleDisplayResults EndReadConsoleDisplay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ConnectToPanel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginConnectToPanel(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndConnectToPanel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SendKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSendKey(string SessionID, long LocationID, long DeviceID, string KeyChar, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndSendKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/OverrideSecurityPanelSession", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginOverrideSecurityPanelSession(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndOverrideSecurityPanelSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/CheckSecurityPanelLastCommandState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginCheckSecurityPanelLastCommandState(string SessionID, long LocationID, long DeviceID, int CommandCode, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndCheckSecurityPanelLastCommandState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetContentConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetContentConfiguration(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ContentConfigurationResult EndGetContentConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SaveContentConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSaveContentConfiguration(string SessionID, long LocationID, TotalConnect.TotalConnectService.ContentConfigurationInfo ContentConfiguration, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndSaveContentConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetSlideShowPhotos", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetSlideShowPhotos(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SlideShowPhotoResult EndGetSlideShowPhotos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/AddSlideShowPhoto", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginAddSlideShowPhoto(TotalConnect.TotalConnectService.AddSlideShowPhotoRequest request, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AddSlideShowPhotoResponse EndAddSlideShowPhoto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DeleteSlideShowPhoto", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDeleteSlideShowPhoto(string SessionID, long LocationID, long PhotoID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndDeleteSlideShowPhoto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCurrentWeather", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCurrentWeather(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CurrentWeatherResult EndGetCurrentWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetForecastWeather", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetForecastWeather(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ForecastWeatherResult EndGetForecastWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetDealerMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetDealerMessages(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.DealerMessageResult EndGetDealerMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateDealerMessageReadState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateDealerMessageReadState(string SessionID, long LocationID, long MessageID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndUpdateDealerMessageReadState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/IsCameraAvailable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginIsCameraAvailable(string MAC, string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndIsCameraAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCameraState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCameraState(string MAC, string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraStateResult EndGetCameraState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCameraIOState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCameraIOState(string MAC, string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraIOStateResult EndGetCameraIOState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCameraPosition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCameraPosition(string MAC, string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraPositionResult EndGetCameraPosition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GotoPreset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGotoPreset(string MAC, string SessionID, int PresetSlot, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndGotoPreset(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/StorePreset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginStorePreset(string MAC, string SessionID, int PresetSlot, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndStorePreset(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/MoveCamera", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginMoveCamera(string MAC, string SessionID, int Direction, int Degrees, int PanSpeed, int TiltSpeed, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndMoveCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DirectPanTilt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDirectPanTilt(string MAC, string SessionID, int X, int Y, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndDirectPanTilt(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/WLLED_Control", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginWLLED_Control(string MAC, string SessionID, int NewState, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndWLLED_Control(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/Output_Control", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginOutput_Control(string MAC, string SessionID, int OutputNumber, int NewState, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndOutput_Control(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/TriggerVideoCapture", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginTriggerVideoCapture(string MAC, string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndTriggerVideoCapture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ConfigStreamMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginConfigStreamMode(string MAC, string SessionID, int ModeSelector, int Size, int FramesPerSecond, int QualityType, int Quality, int BitRate, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ConfigStreamModeResult EndConfigStreamMode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetLocationCameraList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetLocationCameraList(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraListResult EndGetLocationCameraList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetTimeZones", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetTimeZones(string SessionId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.TimeZonesResult EndGetTimeZones(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetVideoFileURLs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetVideoFileURLs(string SessionId, long LocationId, short FilterClass, long EventRecordId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.VideoFileURLResult EndGetVideoFileURLs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetEventNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetEventNotes(string SessionId, short FilterClass, long EventRecordId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.NotesResult EndGetEventNotes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetEvents(string SessionId, short FilterClass, long LocationId, long DeviceId, short MaxRecords, long EventTypeFilter, bool ShowHidden, string StartDateTime, string EndDateTime, short DateFormat, short TimeFormat, int SortOrder, long LastEventIdReceived, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EventsResult EndGetEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetEventTypeFilter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetEventTypeFilter(string SessionId, short FilterClass, long LocationId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EventTypeFilterResult EndGetEventTypeFilter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetLiveEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetLiveEvents(string SessionId, long LocationId, long LastEventIdReceived, short MaxRecords, short DateFormat, short TimeFormat, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EventsResult EndGetLiveEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateEventNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateEventNotes(string SessionId, short FilterClass, long EventRecordId, string Note, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndUpdateEventNotes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateEventRecordHideState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateEventRecordHideState(string SessionId, short FilterClass, long EventRecordId, bool IsHidden, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndUpdateEventRecordHideState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateEventRecordLockState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateEventRecordLockState(string SessionId, short FilterClass, long EventRecordId, bool IsLocked, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndUpdateEventRecordLockState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/RemoteAuthenticateUserLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginRemoteAuthenticateUserLogin(string userName, string password, int RemoteApplicationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults EndRemoteAuthenticateUserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/AuthenticateUserLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginAuthenticateUserLogin(string userName, string password, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AuthenticateLoginResults EndAuthenticateUserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/AuthenticateGUIDLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginAuthenticateGUIDLogin(string GUID, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AuthenticateLoginResults EndAuthenticateGUIDLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetSessionDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetSessionDetails(string SessionID, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SessionDetailResults EndGetSessionDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/KeepAlive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginKeepAlive(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndKeepAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/Logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginLogout(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/AnythingChanged", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginAnythingChanged(string SessionID, long LocationID, TotalConnect.TotalConnectService.Module[] Modules, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AnythingChangedResults EndAnythingChanged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetInterfaceSchemaDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetInterfaceSchemaDetails(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.InterfaceSchemaResults EndGetInterfaceSchemaDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetInterfaceSchemaDetailsEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetInterfaceSchemaDetailsEx(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.InterfaceSchemaResultsEx EndGetInterfaceSchemaDetailsEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetUsers(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.UserConfigurationResults EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DeleteUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDeleteUserInfo(string SessionID, long UserId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.DeleteUserInfoResults EndDeleteUserInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DisableEnableUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDisableEnableUser(string SessionID, long UserId, bool StateToSet, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.DisableEnableUserResults EndDisableEnableUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateEula", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateEula(string SessionID, long UserId, int Eula, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndUpdateEula(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetUserInfo(string SessionID, long UserId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.UserInfoResults EndGetUserInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDeleteUser(string SessionID, long UserId, int UserTypeID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.DeleteUserResults EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DisableEnableUserEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDisableEnableUserEx(string SessionID, long UserId, int UserTypeId, bool StateToSet, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.DisableEnableUserResults EndDisableEnableUserEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetUserDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetUserDetails(string SessionID, long ManageUserId, int UserTypeId, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.UserDetailResults EndGetUserDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SaveUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSaveUser(string SessionID, TotalConnect.TotalConnectService.UserDetails UserDetails, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SaveUserResults EndSaveUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetUsersEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetUsersEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.UserListResults EndGetUsersEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SynchronizePanelUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSynchronizePanelUser(string SessionID, TotalConnect.TotalConnectService.DeviceAuthorizingCode[] DeviceList, bool StatusOnly, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SynchronizeUserResults EndSynchronizePanelUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetSMSEmailCarriers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetSMSEmailCarriers(string SessionID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SMSEmailCarrierResults EndGetSMSEmailCarriers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/IsUserNameValid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginIsUserNameValid(string SessionID, TotalConnect.TotalConnectService.UserNameInfo UserNameInfo, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.IsUserNameValidResults EndIsUserNameValid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SaveCreateUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSaveCreateUserInfo(string SessionID, TotalConnect.TotalConnectService.UserInfo UserInfo, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SaveCreateUserInfoResults EndSaveCreateUserInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SaveUserClientPreferences", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSaveUserClientPreferences(string SessionID, string PreferencesString, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndSaveUserClientPreferences(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetEventMetaDataEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetEventMetaDataEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EventMetaDataExResult EndGetEventMetaDataEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetConfiguredEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetConfiguredEvents(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ConfiguredEventResult EndGetConfiguredEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetConfiguredEventsEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetConfiguredEventsEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ConfiguredEventExResult EndGetConfiguredEventsEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetEventSummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetEventSummary(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SummaryConfiguredEventString EndGetEventSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/TransactNotificationListEventsEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginTransactNotificationListEventsEx(string SessionID, long LocationID, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndTransactNotificationListEventsEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/TransactNotificationListEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginTransactNotificationListEvents(string SessionID, long LocationID, TotalConnect.TotalConnectService.SentToPanelEvents[] SentToPanelEvents, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndTransactNotificationListEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetAllNotificationConditionalStates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetAllNotificationConditionalStates(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.NotificationConditionalStateResult EndGetAllNotificationConditionalStates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetAllNotificationSchedules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetAllNotificationSchedules(string SessionID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.NotificationScheduleResult EndGetAllNotificationSchedules(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/TransactNotificationSchedules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginTransactNotificationSchedules(string SessionID, TotalConnect.TotalConnectService.NotificationSchedule[] NotificationSchedules, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndTransactNotificationSchedules(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetAllNotificationLists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetAllNotificationLists(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GetAllNotificationListsResults EndGetAllNotificationLists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/TransactNotificationLists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginTransactNotificationLists(string SessionID, TotalConnect.TotalConnectService.NotificationListBaseInfo[] NotificationListCollection, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.TransactNotificationListResults EndTransactNotificationLists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SendTestNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSendTestNotification(string SessionID, long LocationID, long NotificationListID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndSendTestNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetEventMetaData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetEventMetaData(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.EventMetaDataResults EndGetEventMetaData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetMediaServerConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetMediaServerConfiguration(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.MediaServerConfigurationResults EndGetMediaServerConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCameraConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCameraConfiguration(string MAC, string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraConfigurationResults EndGetCameraConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateCameraConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateCameraConfiguration(string MAC, string SessionID, string CameraName, string SYSTEM_Data, string VIDEO_Data, string MOTION_Data, string IO_Data, string EVENT_Data, string PTZ_Data, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndUpdateCameraConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SetDefaultCamera", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSetDefaultCamera(string SessionID, string MAC, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndSetDefaultCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpgradeCameraFirmware", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpgradeCameraFirmware(string MAC, string SessionID, int FirmwareVersionNumber, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndUpgradeCameraFirmware(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetFirmwareList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetFirmwareList(string MAC, string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraFirmwareListResult EndGetFirmwareList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetWirelessStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetWirelessStatus(string SessionID, string MAC, int SearchType, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraSignalStrengthResults EndGetWirelessStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCameraInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCameraInformation(string SessionID, string MAC, int SearchType, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CameraInformationResults EndGetCameraInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetWAPClientsInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetWAPClientsInfo(string SessionID, string MAC, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WAPClientsListResults EndGetWAPClientsInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetLocation(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.LocationResult EndGetLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetLocationSimple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetLocationSimple(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.LocationSimpleResult EndGetLocationSimple(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SaveLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSaveLocation(TotalConnect.TotalConnectService.SaveLocationRequest request, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SaveLocationResponse EndSaveLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SaveLocationSimple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSaveLocationSimple(TotalConnect.TotalConnectService.SaveLocationSimpleRequest request, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SaveLocationSimpleResponse EndSaveLocationSimple(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCountryList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCountryList(string SessionID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CountryListResult EndGetCountryList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetCountryStateList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetCountryStateList(string SessionID, long CountryID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CountryStateListResult EndGetCountryStateList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetImage(TotalConnect.TotalConnectService.GetImageRequest request, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GetImageResponse EndGetImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetLogoImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetLogoImage(TotalConnect.TotalConnectService.GetLogoImageRequest request, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GetLogoImageResponse EndGetLogoImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetContentImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetContentImage(TotalConnect.TotalConnectService.GetContentImageRequest request, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GetContentImageResponse EndGetContentImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ServiceVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginServiceVersion(System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndServiceVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetGPSDevices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetGPSDevices(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GPSDevicesResult EndGetGPSDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetGPSDeviceLocationData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetGPSDeviceLocationData(string SessionId, long DeviceID, long LocationId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GPSLocationResult EndGetGPSDeviceLocationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetGPSDeviceGeoFence", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetGPSDeviceGeoFence(string SessionId, long DeviceID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult EndGetGPSDeviceGeoFence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetEnteredGPSGeofences", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetEnteredGPSGeofences(string SessionId, long DeviceID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GeofenceListResult EndGetEnteredGPSGeofences(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SendGPSLocateNowMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSendGPSLocateNowMessage(string SessionId, long DeviceID, long LocationId, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndSendGPSLocateNowMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SavePhotoForGPSDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSavePhotoForGPSDevice(TotalConnect.TotalConnectService.SavePhotoForGPSDeviceRequest request, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SavePhotoForGPSDeviceResponse EndSavePhotoForGPSDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/SaveGPSDeviceData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginSaveGPSDeviceData(string SessionId, TotalConnect.TotalConnectService.GPSInfo GPSData, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.WebMethodResults EndSaveGPSDeviceData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/RequestTWMSession", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginRequestTWMSession(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.GPSPopupURLResult EndRequestTWMSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateSwitchIcon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateSwitchIcon(string SessionID, long DeviceID, long SwitchID, byte SwitchIconID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.UpdateSwitchIconResults EndUpdateSwitchIcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/UpdateThermostatSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginUpdateThermostatSchedule(string SessionID, long DeviceID, TotalConnect.TotalConnectService.ThermostatSchedule ThermostatSchedule, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.UpdateThermostatScheduleResults EndUpdateThermostatSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetThermostatSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetThermostatSchedule(string SessionID, long DeviceID, long ThermostatID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ThermostatScheduleResults EndGetThermostatSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ExecuteAScene", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginExecuteAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ExecuteASceneResults EndExecuteAScene(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/CreateEditAScene", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginCreateEditAScene(string SessionID, long DeviceID, long SceneID, string SceneName, short SceneIconID, bool IsSceneEnabled, TotalConnect.TotalConnectService.SceneSwitch[] Automation_Switch, TotalConnect.TotalConnectService.SceneThermostat[] Automation_Thermostat, TotalConnect.TotalConnectService.SceneLock[] Automation_Lock, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.CreateEditASceneResults EndCreateEditAScene(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/DeleteAScene", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginDeleteAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SceneDeletionResults EndDeleteAScene(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetAScene", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SceneDataResults EndGetAScene(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetSceneList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetSceneList(string SessionID, long DeviceID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.SceneListInfo EndGetSceneList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetAutomationDeviceStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetAutomationDeviceStatus(string SessionID, long DeviceID, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AutomationDataResults EndGetAutomationDeviceStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/GetAutomationDeviceStatusEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginGetAutomationDeviceStatusEx(string SessionID, long DeviceID, bool CheckDeviceStatus, string AdditionalInput, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.AutomationDataResults EndGetAutomationDeviceStatusEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ControlALock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginControlALock(string SessionID, long DeviceID, long LockID, int LockDesiredState, string AuthorizingCode, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.LockControlDataResults EndControlALock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://services.alarmnet.com/TC2/ControlAThermostat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DeviceInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NotificationInfoBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PanelBaseInfo))]
        System.IAsyncResult BeginControlAThermostat(string SessionID, long DeviceID, long ThermostatID, int CurrentOpModeID, int HeatThreshold, int CoolThreshold, int ThermostatModeID, int HeatSetPoint, int CoolSetPoint, int ThermostatFanModeID, System.AsyncCallback callback, object asyncState);
        
        TotalConnect.TotalConnectService.ThermostatControlDataResults EndControlAThermostat(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SwitchControlDataResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermostatControlDataResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LockControlDataResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AutomationDataResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SceneListInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SceneDataResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SceneDeletionResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreateEditASceneResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ExecuteASceneResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermostatScheduleResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UpdateThermostatScheduleResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UpdateSwitchIconResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GPSPopupURLResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PhotoURLResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeofenceListResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GPSDeviceGeoFenceResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GPSLocationResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GPSDevicesResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountryStateListResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountryListResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocationSimpleResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocationResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WAPClientsListResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraInformationResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraSignalStrengthResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraFirmwareListResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraConfigurationResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaServerConfigurationResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EventMetaDataResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransactNotificationListResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetAllNotificationListsResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NotificationScheduleResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NotificationConditionalStateResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SummaryConfiguredEventString))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConfiguredEventExResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConfiguredEventResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EventMetaDataExResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SaveCreateUserInfoResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IsUserNameValidResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SMSEmailCarrierResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SynchronizeUserResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserListResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SaveUserResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserDetailResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeleteUserResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserInfoResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DisableEnableUserResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeleteUserInfoResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserConfigurationResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterfaceSchemaResultsEx))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterfaceSchemaResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnythingChangedResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SessionDetailResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticateLoginResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RemoteAuthenticateLoginResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EventTypeFilterResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EventsResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NotesResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoFileURLResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeZonesResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraListResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConfigStreamModeResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraPositionResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraIOStateResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraStateResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DealerMessageResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForecastWeatherResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CurrentWeatherResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SlideShowPhotoResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContentConfigurationResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReadConsoleDisplayResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DisarmSecuritySystemResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ArmSecuritySystemResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZoneBypassResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ImportSecurityInfoResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetZonesListInStateResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelStatusResultsEx))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelStatusResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelMetadataAndStatusResultsEx))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelMetadataAndStatusResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailValidationResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AutomationSyncResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SwitchControlDataResults))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class WebMethodResults : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int resultCodeField;
        
        private string resultDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ResultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
                this.RaisePropertyChanged("ResultCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultData {
            get {
                return this.resultDataField;
            }
            set {
                this.resultDataField = value;
                this.RaisePropertyChanged("ResultData");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserNameInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long userIdField;
        
        private string userNameField;
        
        private int resultCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int ResultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
                this.RaisePropertyChanged("ResultCode");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeviceAuthorizingCode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long locationIDField;
        
        private long deviceIDField;
        
        private string authorizingCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long LocationID {
            get {
                return this.locationIDField;
            }
            set {
                this.locationIDField = value;
                this.RaisePropertyChanged("LocationID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AuthorizingCode {
            get {
                return this.authorizingCodeField;
            }
            set {
                this.authorizingCodeField = value;
                this.RaisePropertyChanged("AuthorizingCode");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class Parameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class Module : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private Parameter[] parametersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public Parameter[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
                this.RaisePropertyChanged("Parameters");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class AutomationInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long accountIDField;
        
        private long deviceIDField;
        
        private long deviceSerialNumberField;
        
        private string deviceSerialTextField;
        
        private short lockCapacityField;
        
        private short switchCapacityField;
        
        private short thermostatCapacityField;
        
        private short sceneCapacityField;
        
        private short deviceCapacityPerSceneField;
        
        private bool syncDeviceFlagField;
        
        private bool communicationStateField;
        
        private int automationStatusLimitField;
        
        private SwitchInfo[] automationSwitchField;
        
        private ThermostatInfo[] automationThermostatField;
        
        private LockInfo[] automationLockField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long AccountID {
            get {
                return this.accountIDField;
            }
            set {
                this.accountIDField = value;
                this.RaisePropertyChanged("AccountID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public long DeviceSerialNumber {
            get {
                return this.deviceSerialNumberField;
            }
            set {
                this.deviceSerialNumberField = value;
                this.RaisePropertyChanged("DeviceSerialNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DeviceSerialText {
            get {
                return this.deviceSerialTextField;
            }
            set {
                this.deviceSerialTextField = value;
                this.RaisePropertyChanged("DeviceSerialText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public short LockCapacity {
            get {
                return this.lockCapacityField;
            }
            set {
                this.lockCapacityField = value;
                this.RaisePropertyChanged("LockCapacity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public short SwitchCapacity {
            get {
                return this.switchCapacityField;
            }
            set {
                this.switchCapacityField = value;
                this.RaisePropertyChanged("SwitchCapacity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public short ThermostatCapacity {
            get {
                return this.thermostatCapacityField;
            }
            set {
                this.thermostatCapacityField = value;
                this.RaisePropertyChanged("ThermostatCapacity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public short SceneCapacity {
            get {
                return this.sceneCapacityField;
            }
            set {
                this.sceneCapacityField = value;
                this.RaisePropertyChanged("SceneCapacity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public short DeviceCapacityPerScene {
            get {
                return this.deviceCapacityPerSceneField;
            }
            set {
                this.deviceCapacityPerSceneField = value;
                this.RaisePropertyChanged("DeviceCapacityPerScene");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public bool SyncDeviceFlag {
            get {
                return this.syncDeviceFlagField;
            }
            set {
                this.syncDeviceFlagField = value;
                this.RaisePropertyChanged("SyncDeviceFlag");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool CommunicationState {
            get {
                return this.communicationStateField;
            }
            set {
                this.communicationStateField = value;
                this.RaisePropertyChanged("CommunicationState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public int AutomationStatusLimit {
            get {
                return this.automationStatusLimitField;
            }
            set {
                this.automationStatusLimitField = value;
                this.RaisePropertyChanged("AutomationStatusLimit");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=12)]
        public SwitchInfo[] AutomationSwitch {
            get {
                return this.automationSwitchField;
            }
            set {
                this.automationSwitchField = value;
                this.RaisePropertyChanged("AutomationSwitch");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=13)]
        public ThermostatInfo[] AutomationThermostat {
            get {
                return this.automationThermostatField;
            }
            set {
                this.automationThermostatField = value;
                this.RaisePropertyChanged("AutomationThermostat");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=14)]
        public LockInfo[] AutomationLock {
            get {
                return this.automationLockField;
            }
            set {
                this.automationLockField = value;
                this.RaisePropertyChanged("AutomationLock");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SwitchInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private long switchIDField;
        
        private string switchNameField;
        
        private short switchIndexField;
        
        private int switchTypeField;
        
        private short switchStateField;
        
        private short switchLevelField;
        
        private short switchIconIDField;
        
        private byte deviceStatusIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long SwitchID {
            get {
                return this.switchIDField;
            }
            set {
                this.switchIDField = value;
                this.RaisePropertyChanged("SwitchID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SwitchName {
            get {
                return this.switchNameField;
            }
            set {
                this.switchNameField = value;
                this.RaisePropertyChanged("SwitchName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public short SwitchIndex {
            get {
                return this.switchIndexField;
            }
            set {
                this.switchIndexField = value;
                this.RaisePropertyChanged("SwitchIndex");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int SwitchType {
            get {
                return this.switchTypeField;
            }
            set {
                this.switchTypeField = value;
                this.RaisePropertyChanged("SwitchType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public short SwitchState {
            get {
                return this.switchStateField;
            }
            set {
                this.switchStateField = value;
                this.RaisePropertyChanged("SwitchState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public short SwitchLevel {
            get {
                return this.switchLevelField;
            }
            set {
                this.switchLevelField = value;
                this.RaisePropertyChanged("SwitchLevel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public short SwitchIconID {
            get {
                return this.switchIconIDField;
            }
            set {
                this.switchIconIDField = value;
                this.RaisePropertyChanged("SwitchIconID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public byte DeviceStatusID {
            get {
                return this.deviceStatusIDField;
            }
            set {
                this.deviceStatusIDField = value;
                this.RaisePropertyChanged("DeviceStatusID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ThermostatInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private long thermostatIDField;
        
        private string thermostatNameField;
        
        private short thermostatIndexField;
        
        private short currentOpModeField;
        
        private short thermostatModeField;
        
        private short thermostatFanModeField;
        
        private short heatSetPointField;
        
        private short coolSetPointField;
        
        private short energySaveHeatSetPointField;
        
        private short energySaveCoolSetPointField;
        
        private string temperatureScaleField;
        
        private short currentTempertureField;
        
        private short batteryStateField;
        
        private ModeInfo[] fanModeListField;
        
        private ModeInfo[] thermostatModeListField;
        
        private ModeInfo[] thermostatSupportedOpModeListField;
        
        private byte deviceStatusIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long ThermostatID {
            get {
                return this.thermostatIDField;
            }
            set {
                this.thermostatIDField = value;
                this.RaisePropertyChanged("ThermostatID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ThermostatName {
            get {
                return this.thermostatNameField;
            }
            set {
                this.thermostatNameField = value;
                this.RaisePropertyChanged("ThermostatName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public short ThermostatIndex {
            get {
                return this.thermostatIndexField;
            }
            set {
                this.thermostatIndexField = value;
                this.RaisePropertyChanged("ThermostatIndex");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public short CurrentOpMode {
            get {
                return this.currentOpModeField;
            }
            set {
                this.currentOpModeField = value;
                this.RaisePropertyChanged("CurrentOpMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public short ThermostatMode {
            get {
                return this.thermostatModeField;
            }
            set {
                this.thermostatModeField = value;
                this.RaisePropertyChanged("ThermostatMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public short ThermostatFanMode {
            get {
                return this.thermostatFanModeField;
            }
            set {
                this.thermostatFanModeField = value;
                this.RaisePropertyChanged("ThermostatFanMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public short HeatSetPoint {
            get {
                return this.heatSetPointField;
            }
            set {
                this.heatSetPointField = value;
                this.RaisePropertyChanged("HeatSetPoint");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public short CoolSetPoint {
            get {
                return this.coolSetPointField;
            }
            set {
                this.coolSetPointField = value;
                this.RaisePropertyChanged("CoolSetPoint");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public short EnergySaveHeatSetPoint {
            get {
                return this.energySaveHeatSetPointField;
            }
            set {
                this.energySaveHeatSetPointField = value;
                this.RaisePropertyChanged("EnergySaveHeatSetPoint");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public short EnergySaveCoolSetPoint {
            get {
                return this.energySaveCoolSetPointField;
            }
            set {
                this.energySaveCoolSetPointField = value;
                this.RaisePropertyChanged("EnergySaveCoolSetPoint");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string TemperatureScale {
            get {
                return this.temperatureScaleField;
            }
            set {
                this.temperatureScaleField = value;
                this.RaisePropertyChanged("TemperatureScale");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public short CurrentTemperture {
            get {
                return this.currentTempertureField;
            }
            set {
                this.currentTempertureField = value;
                this.RaisePropertyChanged("CurrentTemperture");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public short BatteryState {
            get {
                return this.batteryStateField;
            }
            set {
                this.batteryStateField = value;
                this.RaisePropertyChanged("BatteryState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=14)]
        public ModeInfo[] FanModeList {
            get {
                return this.fanModeListField;
            }
            set {
                this.fanModeListField = value;
                this.RaisePropertyChanged("FanModeList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=15)]
        public ModeInfo[] ThermostatModeList {
            get {
                return this.thermostatModeListField;
            }
            set {
                this.thermostatModeListField = value;
                this.RaisePropertyChanged("ThermostatModeList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=16)]
        public ModeInfo[] ThermostatSupportedOpModeList {
            get {
                return this.thermostatSupportedOpModeListField;
            }
            set {
                this.thermostatSupportedOpModeListField = value;
                this.RaisePropertyChanged("ThermostatSupportedOpModeList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public byte DeviceStatusID {
            get {
                return this.deviceStatusIDField;
            }
            set {
                this.deviceStatusIDField = value;
                this.RaisePropertyChanged("DeviceStatusID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ModeInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private short modeIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public short ModeID {
            get {
                return this.modeIDField;
            }
            set {
                this.modeIDField = value;
                this.RaisePropertyChanged("ModeID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LockInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private long lockIDField;
        
        private string lockNameField;
        
        private short lockIndexField;
        
        private bool lockStateField;
        
        private short batteryStateField;
        
        private byte deviceStatusIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long LockID {
            get {
                return this.lockIDField;
            }
            set {
                this.lockIDField = value;
                this.RaisePropertyChanged("LockID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string LockName {
            get {
                return this.lockNameField;
            }
            set {
                this.lockNameField = value;
                this.RaisePropertyChanged("LockName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public short LockIndex {
            get {
                return this.lockIndexField;
            }
            set {
                this.lockIndexField = value;
                this.RaisePropertyChanged("LockIndex");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool LockState {
            get {
                return this.lockStateField;
            }
            set {
                this.lockStateField = value;
                this.RaisePropertyChanged("LockState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public short BatteryState {
            get {
                return this.batteryStateField;
            }
            set {
                this.batteryStateField = value;
                this.RaisePropertyChanged("BatteryState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public byte DeviceStatusID {
            get {
                return this.deviceStatusIDField;
            }
            set {
                this.deviceStatusIDField = value;
                this.RaisePropertyChanged("DeviceStatusID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneLock : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long lockIDField;
        
        private bool sceneLockStateField;
        
        private string sceneAuthorizationCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long LockID {
            get {
                return this.lockIDField;
            }
            set {
                this.lockIDField = value;
                this.RaisePropertyChanged("LockID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool SceneLockState {
            get {
                return this.sceneLockStateField;
            }
            set {
                this.sceneLockStateField = value;
                this.RaisePropertyChanged("SceneLockState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SceneAuthorizationCode {
            get {
                return this.sceneAuthorizationCodeField;
            }
            set {
                this.sceneAuthorizationCodeField = value;
                this.RaisePropertyChanged("SceneAuthorizationCode");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneStatusLock : object, System.ComponentModel.INotifyPropertyChanged {
        
        private LockInfo sceneLockInfoField;
        
        private SceneLock sceneLockField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public LockInfo SceneLockInfo {
            get {
                return this.sceneLockInfoField;
            }
            set {
                this.sceneLockInfoField = value;
                this.RaisePropertyChanged("SceneLockInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SceneLock SceneLock {
            get {
                return this.sceneLockField;
            }
            set {
                this.sceneLockField = value;
                this.RaisePropertyChanged("SceneLock");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneThermostat : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long thermostatIDField;
        
        private int sceneThermostatModeIDField;
        
        private int sceneThermostatFanModeField;
        
        private int sceneThermostatHeatSetPointField;
        
        private int sceneThermostatCoolSetPointField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long ThermostatID {
            get {
                return this.thermostatIDField;
            }
            set {
                this.thermostatIDField = value;
                this.RaisePropertyChanged("ThermostatID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int SceneThermostatModeID {
            get {
                return this.sceneThermostatModeIDField;
            }
            set {
                this.sceneThermostatModeIDField = value;
                this.RaisePropertyChanged("SceneThermostatModeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int SceneThermostatFanMode {
            get {
                return this.sceneThermostatFanModeField;
            }
            set {
                this.sceneThermostatFanModeField = value;
                this.RaisePropertyChanged("SceneThermostatFanMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int SceneThermostatHeatSetPoint {
            get {
                return this.sceneThermostatHeatSetPointField;
            }
            set {
                this.sceneThermostatHeatSetPointField = value;
                this.RaisePropertyChanged("SceneThermostatHeatSetPoint");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int SceneThermostatCoolSetPoint {
            get {
                return this.sceneThermostatCoolSetPointField;
            }
            set {
                this.sceneThermostatCoolSetPointField = value;
                this.RaisePropertyChanged("SceneThermostatCoolSetPoint");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneStatusThermostat : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ThermostatInfo sceneThermostatInfoField;
        
        private SceneThermostat sceneThermostatField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ThermostatInfo SceneThermostatInfo {
            get {
                return this.sceneThermostatInfoField;
            }
            set {
                this.sceneThermostatInfoField = value;
                this.RaisePropertyChanged("SceneThermostatInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SceneThermostat SceneThermostat {
            get {
                return this.sceneThermostatField;
            }
            set {
                this.sceneThermostatField = value;
                this.RaisePropertyChanged("SceneThermostat");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneSwitch : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long switchIDField;
        
        private short sceneSwitchStateField;
        
        private short sceneSwitchLevelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long SwitchID {
            get {
                return this.switchIDField;
            }
            set {
                this.switchIDField = value;
                this.RaisePropertyChanged("SwitchID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public short SceneSwitchState {
            get {
                return this.sceneSwitchStateField;
            }
            set {
                this.sceneSwitchStateField = value;
                this.RaisePropertyChanged("SceneSwitchState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public short SceneSwitchLevel {
            get {
                return this.sceneSwitchLevelField;
            }
            set {
                this.sceneSwitchLevelField = value;
                this.RaisePropertyChanged("SceneSwitchLevel");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneStatusSwitch : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SwitchInfo sceneSwitchInfoField;
        
        private SceneSwitch sceneSwitchField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SwitchInfo SceneSwitchInfo {
            get {
                return this.sceneSwitchInfoField;
            }
            set {
                this.sceneSwitchInfoField = value;
                this.RaisePropertyChanged("SceneSwitchInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SceneSwitch SceneSwitch {
            get {
                return this.sceneSwitchField;
            }
            set {
                this.sceneSwitchField = value;
                this.RaisePropertyChanged("SceneSwitch");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sceneNameField;
        
        private bool isSceneEnabledField;
        
        private int sceneIconIDField;
        
        private long sceneIDField;
        
        private bool inUseField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SceneName {
            get {
                return this.sceneNameField;
            }
            set {
                this.sceneNameField = value;
                this.RaisePropertyChanged("SceneName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsSceneEnabled {
            get {
                return this.isSceneEnabledField;
            }
            set {
                this.isSceneEnabledField = value;
                this.RaisePropertyChanged("IsSceneEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int SceneIconID {
            get {
                return this.sceneIconIDField;
            }
            set {
                this.sceneIconIDField = value;
                this.RaisePropertyChanged("SceneIconID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public long SceneID {
            get {
                return this.sceneIDField;
            }
            set {
                this.sceneIDField = value;
                this.RaisePropertyChanged("SceneID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool InUse {
            get {
                return this.inUseField;
            }
            set {
                this.inUseField = value;
                this.RaisePropertyChanged("InUse");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneAutomationInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SceneInfo sceneInfoHeaderField;
        
        private long accountIDField;
        
        private long deviceIDField;
        
        private long deviceSerialNumberField;
        
        private string deviceSerialTextField;
        
        private SceneStatusSwitch[] automationSwitchField;
        
        private SceneStatusThermostat[] automationThermostatField;
        
        private SceneStatusLock[] automationLockField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SceneInfo SceneInfoHeader {
            get {
                return this.sceneInfoHeaderField;
            }
            set {
                this.sceneInfoHeaderField = value;
                this.RaisePropertyChanged("SceneInfoHeader");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long AccountID {
            get {
                return this.accountIDField;
            }
            set {
                this.accountIDField = value;
                this.RaisePropertyChanged("AccountID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public long DeviceSerialNumber {
            get {
                return this.deviceSerialNumberField;
            }
            set {
                this.deviceSerialNumberField = value;
                this.RaisePropertyChanged("DeviceSerialNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string DeviceSerialText {
            get {
                return this.deviceSerialTextField;
            }
            set {
                this.deviceSerialTextField = value;
                this.RaisePropertyChanged("DeviceSerialText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public SceneStatusSwitch[] AutomationSwitch {
            get {
                return this.automationSwitchField;
            }
            set {
                this.automationSwitchField = value;
                this.RaisePropertyChanged("AutomationSwitch");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public SceneStatusThermostat[] AutomationThermostat {
            get {
                return this.automationThermostatField;
            }
            set {
                this.automationThermostatField = value;
                this.RaisePropertyChanged("AutomationThermostat");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public SceneStatusLock[] AutomationLock {
            get {
                return this.automationLockField;
            }
            set {
                this.automationLockField = value;
                this.RaisePropertyChanged("AutomationLock");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class TimePeriodInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private short indexField;
        
        private bool enabledField;
        
        private short tempHeatField;
        
        private short tempCoolField;
        
        private string timeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public short Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
                this.RaisePropertyChanged("Index");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("Enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public short TempHeat {
            get {
                return this.tempHeatField;
            }
            set {
                this.tempHeatField = value;
                this.RaisePropertyChanged("TempHeat");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public short TempCool {
            get {
                return this.tempCoolField;
            }
            set {
                this.tempCoolField = value;
                this.RaisePropertyChanged("TempCool");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
                this.RaisePropertyChanged("Time");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ScheduleInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long scheduleIDField;
        
        private short scheduleDayField;
        
        private TimePeriodInfo[] timePeriodsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long ScheduleID {
            get {
                return this.scheduleIDField;
            }
            set {
                this.scheduleIDField = value;
                this.RaisePropertyChanged("ScheduleID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public short ScheduleDay {
            get {
                return this.scheduleDayField;
            }
            set {
                this.scheduleDayField = value;
                this.RaisePropertyChanged("ScheduleDay");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public TimePeriodInfo[] TimePeriods {
            get {
                return this.timePeriodsField;
            }
            set {
                this.timePeriodsField = value;
                this.RaisePropertyChanged("TimePeriods");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ThermostatSchedule : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long thermostatIDField;
        
        private ScheduleInfo[] setPointsField;
        
        private short highThresholdValueField;
        
        private short lowThresholdValueField;
        
        private int highThresholdStatusField;
        
        private int lowThresholdStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long ThermostatID {
            get {
                return this.thermostatIDField;
            }
            set {
                this.thermostatIDField = value;
                this.RaisePropertyChanged("ThermostatID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public ScheduleInfo[] SetPoints {
            get {
                return this.setPointsField;
            }
            set {
                this.setPointsField = value;
                this.RaisePropertyChanged("SetPoints");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public short HighThresholdValue {
            get {
                return this.highThresholdValueField;
            }
            set {
                this.highThresholdValueField = value;
                this.RaisePropertyChanged("HighThresholdValue");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public short LowThresholdValue {
            get {
                return this.lowThresholdValueField;
            }
            set {
                this.lowThresholdValueField = value;
                this.RaisePropertyChanged("LowThresholdValue");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int HighThresholdStatus {
            get {
                return this.highThresholdStatusField;
            }
            set {
                this.highThresholdStatusField = value;
                this.RaisePropertyChanged("HighThresholdStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int LowThresholdStatus {
            get {
                return this.lowThresholdStatusField;
            }
            set {
                this.lowThresholdStatusField = value;
                this.RaisePropertyChanged("LowThresholdStatus");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GeofenceInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string geoFenceNameField;
        
        private int geofenceIDField;
        
        private float latitudeField;
        
        private float longitudeField;
        
        private double radiusField;
        
        private string eventTypeField;
        
        private int eventTypeIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string GeoFenceName {
            get {
                return this.geoFenceNameField;
            }
            set {
                this.geoFenceNameField = value;
                this.RaisePropertyChanged("GeoFenceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int GeofenceID {
            get {
                return this.geofenceIDField;
            }
            set {
                this.geofenceIDField = value;
                this.RaisePropertyChanged("GeofenceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
                this.RaisePropertyChanged("Latitude");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public float Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
                this.RaisePropertyChanged("Longitude");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public double Radius {
            get {
                return this.radiusField;
            }
            set {
                this.radiusField = value;
                this.RaisePropertyChanged("Radius");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
                this.RaisePropertyChanged("EventType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int EventTypeID {
            get {
                return this.eventTypeIDField;
            }
            set {
                this.eventTypeIDField = value;
                this.RaisePropertyChanged("EventTypeID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GPSDeviceGeoFenceData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string geoFenceNameField;
        
        private long geoFenceIdField;
        
        private int directionField;
        
        private string timestampField;
        
        private string addressField;
        
        private float latitudeField;
        
        private float longitudeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string GeoFenceName {
            get {
                return this.geoFenceNameField;
            }
            set {
                this.geoFenceNameField = value;
                this.RaisePropertyChanged("GeoFenceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long GeoFenceId {
            get {
                return this.geoFenceIdField;
            }
            set {
                this.geoFenceIdField = value;
                this.RaisePropertyChanged("GeoFenceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
                this.RaisePropertyChanged("Direction");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
                this.RaisePropertyChanged("Timestamp");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
                this.RaisePropertyChanged("Address");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public float Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
                this.RaisePropertyChanged("Latitude");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public float Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
                this.RaisePropertyChanged("Longitude");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GPSLocationInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string aliasField;
        
        private long deviceIDField;
        
        private string deviceSerialTextField;
        
        private string latitudeField;
        
        private string longitudeField;
        
        private string addressField;
        
        private string cityField;
        
        private string stateField;
        
        private string countryField;
        
        private string zIPField;
        
        private string speedField;
        
        private string headingField;
        
        private System.DateTime dateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
                this.RaisePropertyChanged("Alias");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string DeviceSerialText {
            get {
                return this.deviceSerialTextField;
            }
            set {
                this.deviceSerialTextField = value;
                this.RaisePropertyChanged("DeviceSerialText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
                this.RaisePropertyChanged("Latitude");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
                this.RaisePropertyChanged("Longitude");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
                this.RaisePropertyChanged("Address");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("City");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
                this.RaisePropertyChanged("Country");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string ZIP {
            get {
                return this.zIPField;
            }
            set {
                this.zIPField = value;
                this.RaisePropertyChanged("ZIP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string Speed {
            get {
                return this.speedField;
            }
            set {
                this.speedField = value;
                this.RaisePropertyChanged("Speed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string Heading {
            get {
                return this.headingField;
            }
            set {
                this.headingField = value;
                this.RaisePropertyChanged("Heading");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GPSInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeviceInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string deviceNameField;
        
        private long deviceIdField;
        
        private long locationIdField;
        
        private long accountIdField;
        
        private long deviceSerialNumberField;
        
        private string deviceSerialTextField;
        
        private int deviceClassIdField;
        
        private string deviceAliasField;
        
        private System.DateTime deviceCreatedTimeStampField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string DeviceName {
            get {
                return this.deviceNameField;
            }
            set {
                this.deviceNameField = value;
                this.RaisePropertyChanged("DeviceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
                this.RaisePropertyChanged("DeviceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public long LocationId {
            get {
                return this.locationIdField;
            }
            set {
                this.locationIdField = value;
                this.RaisePropertyChanged("LocationId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public long AccountId {
            get {
                return this.accountIdField;
            }
            set {
                this.accountIdField = value;
                this.RaisePropertyChanged("AccountId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long DeviceSerialNumber {
            get {
                return this.deviceSerialNumberField;
            }
            set {
                this.deviceSerialNumberField = value;
                this.RaisePropertyChanged("DeviceSerialNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string DeviceSerialText {
            get {
                return this.deviceSerialTextField;
            }
            set {
                this.deviceSerialTextField = value;
                this.RaisePropertyChanged("DeviceSerialText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int DeviceClassId {
            get {
                return this.deviceClassIdField;
            }
            set {
                this.deviceClassIdField = value;
                this.RaisePropertyChanged("DeviceClassId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string DeviceAlias {
            get {
                return this.deviceAliasField;
            }
            set {
                this.deviceAliasField = value;
                this.RaisePropertyChanged("DeviceAlias");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public System.DateTime DeviceCreatedTimeStamp {
            get {
                return this.deviceCreatedTimeStampField;
            }
            set {
                this.deviceCreatedTimeStampField = value;
                this.RaisePropertyChanged("DeviceCreatedTimeStamp");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GPSInfo : DeviceInfo {
        
        private string photoURLField;
        
        private long photoIdField;
        
        private int gPSDeviceClassIdField;
        
        private int gPSServiceLevelIdField;
        
        private int iconIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long PhotoId {
            get {
                return this.photoIdField;
            }
            set {
                this.photoIdField = value;
                this.RaisePropertyChanged("PhotoId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int GPSDeviceClassId {
            get {
                return this.gPSDeviceClassIdField;
            }
            set {
                this.gPSDeviceClassIdField = value;
                this.RaisePropertyChanged("GPSDeviceClassId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int GPSServiceLevelId {
            get {
                return this.gPSServiceLevelIdField;
            }
            set {
                this.gPSServiceLevelIdField = value;
                this.RaisePropertyChanged("GPSServiceLevelId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int IconId {
            get {
                return this.iconIdField;
            }
            set {
                this.iconIdField = value;
                this.RaisePropertyChanged("IconId");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CountryStateInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long stateIDField;
        
        private string stateNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long StateID {
            get {
                return this.stateIDField;
            }
            set {
                this.stateIDField = value;
                this.RaisePropertyChanged("StateID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string StateName {
            get {
                return this.stateNameField;
            }
            set {
                this.stateNameField = value;
                this.RaisePropertyChanged("StateName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CountryInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long countryIDField;
        
        private string countryNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long CountryID {
            get {
                return this.countryIDField;
            }
            set {
                this.countryIDField = value;
                this.RaisePropertyChanged("CountryID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CountryName {
            get {
                return this.countryNameField;
            }
            set {
                this.countryNameField = value;
                this.RaisePropertyChanged("CountryName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocationInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LocationInfoSimple : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long locationIdField;
        
        private string locationNameField;
        
        private long accountIdField;
        
        private long photoIdField;
        
        private int timeZoneIdField;
        
        private string photoURLField;
        
        private bool setDefaultLocationNameField;
        
        private string securitySystemAliasField;
        
        private long securitySystemPanelDeviceIDField;
        
        private long countryIDField;
        
        private string streetNumberField;
        
        private string streetNameField;
        
        private string cityField;
        
        private long stateIDField;
        
        private string postalCodeField;
        
        private string temperatureUnitsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long LocationId {
            get {
                return this.locationIdField;
            }
            set {
                this.locationIdField = value;
                this.RaisePropertyChanged("LocationId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string LocationName {
            get {
                return this.locationNameField;
            }
            set {
                this.locationNameField = value;
                this.RaisePropertyChanged("LocationName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public long AccountId {
            get {
                return this.accountIdField;
            }
            set {
                this.accountIdField = value;
                this.RaisePropertyChanged("AccountId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public long PhotoId {
            get {
                return this.photoIdField;
            }
            set {
                this.photoIdField = value;
                this.RaisePropertyChanged("PhotoId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int TimeZoneId {
            get {
                return this.timeZoneIdField;
            }
            set {
                this.timeZoneIdField = value;
                this.RaisePropertyChanged("TimeZoneId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool SetDefaultLocationName {
            get {
                return this.setDefaultLocationNameField;
            }
            set {
                this.setDefaultLocationNameField = value;
                this.RaisePropertyChanged("SetDefaultLocationName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string SecuritySystemAlias {
            get {
                return this.securitySystemAliasField;
            }
            set {
                this.securitySystemAliasField = value;
                this.RaisePropertyChanged("SecuritySystemAlias");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public long SecuritySystemPanelDeviceID {
            get {
                return this.securitySystemPanelDeviceIDField;
            }
            set {
                this.securitySystemPanelDeviceIDField = value;
                this.RaisePropertyChanged("SecuritySystemPanelDeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public long CountryID {
            get {
                return this.countryIDField;
            }
            set {
                this.countryIDField = value;
                this.RaisePropertyChanged("CountryID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string StreetNumber {
            get {
                return this.streetNumberField;
            }
            set {
                this.streetNumberField = value;
                this.RaisePropertyChanged("StreetNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string StreetName {
            get {
                return this.streetNameField;
            }
            set {
                this.streetNameField = value;
                this.RaisePropertyChanged("StreetName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("City");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public long StateID {
            get {
                return this.stateIDField;
            }
            set {
                this.stateIDField = value;
                this.RaisePropertyChanged("StateID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
                this.RaisePropertyChanged("PostalCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string TemperatureUnits {
            get {
                return this.temperatureUnitsField;
            }
            set {
                this.temperatureUnitsField = value;
                this.RaisePropertyChanged("TemperatureUnits");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LocationInfo : LocationInfoSimple {
        
        private int contentServiceLevelIDField;
        
        private int dealerPushMessageRemainingCountField;
        
        private int advertisingServiceLevelIDField;
        
        private System.DateTime latestMessageDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ContentServiceLevelID {
            get {
                return this.contentServiceLevelIDField;
            }
            set {
                this.contentServiceLevelIDField = value;
                this.RaisePropertyChanged("ContentServiceLevelID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int DealerPushMessageRemainingCount {
            get {
                return this.dealerPushMessageRemainingCountField;
            }
            set {
                this.dealerPushMessageRemainingCountField = value;
                this.RaisePropertyChanged("DealerPushMessageRemainingCount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int AdvertisingServiceLevelID {
            get {
                return this.advertisingServiceLevelIDField;
            }
            set {
                this.advertisingServiceLevelIDField = value;
                this.RaisePropertyChanged("AdvertisingServiceLevelID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime LatestMessageDate {
            get {
                return this.latestMessageDateField;
            }
            set {
                this.latestMessageDateField = value;
                this.RaisePropertyChanged("LatestMessageDate");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraSignalStrength : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int signalStrengthField;
        
        private string detailsField;
        
        private string mACField;
        
        private int rSSIField;
        
        private string sSIDField;
        
        private string noiseField;
        
        private string wAPMACField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int SignalStrength {
            get {
                return this.signalStrengthField;
            }
            set {
                this.signalStrengthField = value;
                this.RaisePropertyChanged("SignalStrength");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
                this.RaisePropertyChanged("Details");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string MAC {
            get {
                return this.mACField;
            }
            set {
                this.mACField = value;
                this.RaisePropertyChanged("MAC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int RSSI {
            get {
                return this.rSSIField;
            }
            set {
                this.rSSIField = value;
                this.RaisePropertyChanged("RSSI");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string SSID {
            get {
                return this.sSIDField;
            }
            set {
                this.sSIDField = value;
                this.RaisePropertyChanged("SSID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Noise {
            get {
                return this.noiseField;
            }
            set {
                this.noiseField = value;
                this.RaisePropertyChanged("Noise");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string WAPMAC {
            get {
                return this.wAPMACField;
            }
            set {
                this.wAPMACField = value;
                this.RaisePropertyChanged("WAPMAC");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraFirmwareInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string firmwareVersionField;
        
        private int firmwareVersionNumberField;
        
        private string firmwareVersionDescriptionField;
        
        private string firmwareVersionStateField;
        
        private string firmwareReleaseDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FirmwareVersion {
            get {
                return this.firmwareVersionField;
            }
            set {
                this.firmwareVersionField = value;
                this.RaisePropertyChanged("FirmwareVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int FirmwareVersionNumber {
            get {
                return this.firmwareVersionNumberField;
            }
            set {
                this.firmwareVersionNumberField = value;
                this.RaisePropertyChanged("FirmwareVersionNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string FirmwareVersionDescription {
            get {
                return this.firmwareVersionDescriptionField;
            }
            set {
                this.firmwareVersionDescriptionField = value;
                this.RaisePropertyChanged("FirmwareVersionDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string FirmwareVersionState {
            get {
                return this.firmwareVersionStateField;
            }
            set {
                this.firmwareVersionStateField = value;
                this.RaisePropertyChanged("FirmwareVersionState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string FirmwareReleaseDate {
            get {
                return this.firmwareReleaseDateField;
            }
            set {
                this.firmwareReleaseDateField = value;
                this.RaisePropertyChanged("FirmwareReleaseDate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraFirmwareList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int firmwareCountField;
        
        private CameraFirmwareInfo[] cameraFirmwaresField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int FirmwareCount {
            get {
                return this.firmwareCountField;
            }
            set {
                this.firmwareCountField = value;
                this.RaisePropertyChanged("FirmwareCount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public CameraFirmwareInfo[] CameraFirmwares {
            get {
                return this.cameraFirmwaresField;
            }
            set {
                this.cameraFirmwaresField = value;
                this.RaisePropertyChanged("CameraFirmwares");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventTypeInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long eventTypeIDField;
        
        private string eventTypeDescriptionField;
        
        private EventModifierInfo[] eventModifierCollectionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long EventTypeID {
            get {
                return this.eventTypeIDField;
            }
            set {
                this.eventTypeIDField = value;
                this.RaisePropertyChanged("EventTypeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string EventTypeDescription {
            get {
                return this.eventTypeDescriptionField;
            }
            set {
                this.eventTypeDescriptionField = value;
                this.RaisePropertyChanged("EventTypeDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public EventModifierInfo[] EventModifierCollection {
            get {
                return this.eventModifierCollectionField;
            }
            set {
                this.eventModifierCollectionField = value;
                this.RaisePropertyChanged("EventModifierCollection");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventModifierInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long eventModifierIDField;
        
        private string eventModifierDescriptionField;
        
        private long deviceIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventModifierID {
            get {
                return this.eventModifierIDField;
            }
            set {
                this.eventModifierIDField = value;
                this.RaisePropertyChanged("EventModifierID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EventModifierDescription {
            get {
                return this.eventModifierDescriptionField;
            }
            set {
                this.eventModifierDescriptionField = value;
                this.RaisePropertyChanged("EventModifierDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventClassInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long eventClassIDField;
        
        private string eventClassDescriptionField;
        
        private EventTypeInfo[] eventTypeCollectionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long EventClassID {
            get {
                return this.eventClassIDField;
            }
            set {
                this.eventClassIDField = value;
                this.RaisePropertyChanged("EventClassID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string EventClassDescription {
            get {
                return this.eventClassDescriptionField;
            }
            set {
                this.eventClassDescriptionField = value;
                this.RaisePropertyChanged("EventClassDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public EventTypeInfo[] EventTypeCollection {
            get {
                return this.eventTypeCollectionField;
            }
            set {
                this.eventTypeCollectionField = value;
                this.RaisePropertyChanged("EventTypeCollection");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotificationListUserInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long userIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
                this.RaisePropertyChanged("UserID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotificationListBaseInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long notificationListIDField;
        
        private string notificationListNameField;
        
        private bool isNotificationListEnabledField;
        
        private bool isInUseField;
        
        private NotificationListUserInfo[] associatedUsersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long NotificationListID {
            get {
                return this.notificationListIDField;
            }
            set {
                this.notificationListIDField = value;
                this.RaisePropertyChanged("NotificationListID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string NotificationListName {
            get {
                return this.notificationListNameField;
            }
            set {
                this.notificationListNameField = value;
                this.RaisePropertyChanged("NotificationListName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsNotificationListEnabled {
            get {
                return this.isNotificationListEnabledField;
            }
            set {
                this.isNotificationListEnabledField = value;
                this.RaisePropertyChanged("IsNotificationListEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool IsInUse {
            get {
                return this.isInUseField;
            }
            set {
                this.isInUseField = value;
                this.RaisePropertyChanged("IsInUse");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public NotificationListUserInfo[] AssociatedUsers {
            get {
                return this.associatedUsersField;
            }
            set {
                this.associatedUsersField = value;
                this.RaisePropertyChanged("AssociatedUsers");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotificationSchedule : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long notificationScheduleIDField;
        
        private string notificationScheduleNameField;
        
        private int dayIDField;
        
        private string startTimeField;
        
        private string endTimeField;
        
        private bool isInUseField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long NotificationScheduleID {
            get {
                return this.notificationScheduleIDField;
            }
            set {
                this.notificationScheduleIDField = value;
                this.RaisePropertyChanged("NotificationScheduleID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NotificationScheduleName {
            get {
                return this.notificationScheduleNameField;
            }
            set {
                this.notificationScheduleNameField = value;
                this.RaisePropertyChanged("NotificationScheduleName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int DayID {
            get {
                return this.dayIDField;
            }
            set {
                this.dayIDField = value;
                this.RaisePropertyChanged("DayID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsInUse {
            get {
                return this.isInUseField;
            }
            set {
                this.isInUseField = value;
                this.RaisePropertyChanged("IsInUse");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotificationConditionalState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int conditionalStateIDField;
        
        private string conditionalStateNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ConditionalStateID {
            get {
                return this.conditionalStateIDField;
            }
            set {
                this.conditionalStateIDField = value;
                this.RaisePropertyChanged("ConditionalStateID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConditionalStateName {
            get {
                return this.conditionalStateNameField;
            }
            set {
                this.conditionalStateNameField = value;
                this.RaisePropertyChanged("ConditionalStateName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class TimeTriggeredAction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private long sceneIDField;
        
        private long eventItemIDField;
        
        private string triggerTimeField;
        
        private int selectedDayIDField;
        
        private bool isEnabledField;
        
        private int flashEventCardTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long SceneID {
            get {
                return this.sceneIDField;
            }
            set {
                this.sceneIDField = value;
                this.RaisePropertyChanged("SceneID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventItemID {
            get {
                return this.eventItemIDField;
            }
            set {
                this.eventItemIDField = value;
                this.RaisePropertyChanged("EventItemID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TriggerTime {
            get {
                return this.triggerTimeField;
            }
            set {
                this.triggerTimeField = value;
                this.RaisePropertyChanged("TriggerTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SelectedDayID {
            get {
                return this.selectedDayIDField;
            }
            set {
                this.selectedDayIDField = value;
                this.RaisePropertyChanged("SelectedDayID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsEnabled {
            get {
                return this.isEnabledField;
            }
            set {
                this.isEnabledField = value;
                this.RaisePropertyChanged("IsEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int FlashEventCardType {
            get {
                return this.flashEventCardTypeField;
            }
            set {
                this.flashEventCardTypeField = value;
                this.RaisePropertyChanged("FlashEventCardType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EventNotification))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SceneTrigger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoTrigger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SentToPanelEvents))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotificationInfoBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long eventTypeIDField;
        
        private long eventItemIDField;
        
        private long eventModifierIDField;
        
        private long deviceIDField;
        
        private bool isEnabledField;
        
        private int flashEventCardTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventTypeID {
            get {
                return this.eventTypeIDField;
            }
            set {
                this.eventTypeIDField = value;
                this.RaisePropertyChanged("EventTypeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventItemID {
            get {
                return this.eventItemIDField;
            }
            set {
                this.eventItemIDField = value;
                this.RaisePropertyChanged("EventItemID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventModifierID {
            get {
                return this.eventModifierIDField;
            }
            set {
                this.eventModifierIDField = value;
                this.RaisePropertyChanged("EventModifierID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsEnabled {
            get {
                return this.isEnabledField;
            }
            set {
                this.isEnabledField = value;
                this.RaisePropertyChanged("IsEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int FlashEventCardType {
            get {
                return this.flashEventCardTypeField;
            }
            set {
                this.flashEventCardTypeField = value;
                this.RaisePropertyChanged("FlashEventCardType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventNotification : NotificationInfoBase {
        
        private string customNotificationMessageField;
        
        private long notificationListIDField;
        
        private long scheduleIDField;
        
        private int securityPanelStateConditionField;
        
        private int notificationTypeIDField;
        
        private int notificationDelayField;
        
        private string notificationDeadLineField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CustomNotificationMessage {
            get {
                return this.customNotificationMessageField;
            }
            set {
                this.customNotificationMessageField = value;
                this.RaisePropertyChanged("CustomNotificationMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long NotificationListID {
            get {
                return this.notificationListIDField;
            }
            set {
                this.notificationListIDField = value;
                this.RaisePropertyChanged("NotificationListID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long ScheduleID {
            get {
                return this.scheduleIDField;
            }
            set {
                this.scheduleIDField = value;
                this.RaisePropertyChanged("ScheduleID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SecurityPanelStateCondition {
            get {
                return this.securityPanelStateConditionField;
            }
            set {
                this.securityPanelStateConditionField = value;
                this.RaisePropertyChanged("SecurityPanelStateCondition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int NotificationTypeID {
            get {
                return this.notificationTypeIDField;
            }
            set {
                this.notificationTypeIDField = value;
                this.RaisePropertyChanged("NotificationTypeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int NotificationDelay {
            get {
                return this.notificationDelayField;
            }
            set {
                this.notificationDelayField = value;
                this.RaisePropertyChanged("NotificationDelay");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NotificationDeadLine {
            get {
                return this.notificationDeadLineField;
            }
            set {
                this.notificationDeadLineField = value;
                this.RaisePropertyChanged("NotificationDeadLine");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneTrigger : NotificationInfoBase {
        
        private long sceneIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long SceneID {
            get {
                return this.sceneIDField;
            }
            set {
                this.sceneIDField = value;
                this.RaisePropertyChanged("SceneID");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class VideoTrigger : NotificationInfoBase {
        
        private long scheduleIDField;
        
        private int securityPanelStateConditionField;
        
        private long cameraIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long ScheduleID {
            get {
                return this.scheduleIDField;
            }
            set {
                this.scheduleIDField = value;
                this.RaisePropertyChanged("ScheduleID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SecurityPanelStateCondition {
            get {
                return this.securityPanelStateConditionField;
            }
            set {
                this.securityPanelStateConditionField = value;
                this.RaisePropertyChanged("SecurityPanelStateCondition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long CameraID {
            get {
                return this.cameraIDField;
            }
            set {
                this.cameraIDField = value;
                this.RaisePropertyChanged("CameraID");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SentToPanelEvents : NotificationInfoBase {
        
        private string customNotificationMessageField;
        
        private int notificationTypeIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CustomNotificationMessage {
            get {
                return this.customNotificationMessageField;
            }
            set {
                this.customNotificationMessageField = value;
                this.RaisePropertyChanged("CustomNotificationMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int NotificationTypeID {
            get {
                return this.notificationTypeIDField;
            }
            set {
                this.notificationTypeIDField = value;
                this.RaisePropertyChanged("NotificationTypeID");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraSimple : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long cameraDeviceIDField;
        
        private string cameraNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long CameraDeviceID {
            get {
                return this.cameraDeviceIDField;
            }
            set {
                this.cameraDeviceIDField = value;
                this.RaisePropertyChanged("CameraDeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CameraName {
            get {
                return this.cameraNameField;
            }
            set {
                this.cameraNameField = value;
                this.RaisePropertyChanged("CameraName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private EventModifierInfo[] eventModifierCollectionField;
        
        private long eventTypeIDField;
        
        private long eventGroupIDField;
        
        private string eventTypeDescriptionField;
        
        private long eventTypeCapabilitiesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public EventModifierInfo[] EventModifierCollection {
            get {
                return this.eventModifierCollectionField;
            }
            set {
                this.eventModifierCollectionField = value;
                this.RaisePropertyChanged("EventModifierCollection");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventTypeID {
            get {
                return this.eventTypeIDField;
            }
            set {
                this.eventTypeIDField = value;
                this.RaisePropertyChanged("EventTypeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventGroupID {
            get {
                return this.eventGroupIDField;
            }
            set {
                this.eventGroupIDField = value;
                this.RaisePropertyChanged("EventGroupID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EventTypeDescription {
            get {
                return this.eventTypeDescriptionField;
            }
            set {
                this.eventTypeDescriptionField = value;
                this.RaisePropertyChanged("EventTypeDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventTypeCapabilities {
            get {
                return this.eventTypeCapabilitiesField;
            }
            set {
                this.eventTypeCapabilitiesField = value;
                this.RaisePropertyChanged("EventTypeCapabilities");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long eventGroupIDField;
        
        private string eventGroupNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventGroupID {
            get {
                return this.eventGroupIDField;
            }
            set {
                this.eventGroupIDField = value;
                this.RaisePropertyChanged("EventGroupID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EventGroupName {
            get {
                return this.eventGroupNameField;
            }
            set {
                this.eventGroupNameField = value;
                this.RaisePropertyChanged("EventGroupName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventClass : object, System.ComponentModel.INotifyPropertyChanged {
        
        private EventGroup[] eventGroupListField;
        
        private EventType[] eventTypeCollectionField;
        
        private long eventClassIDField;
        
        private string eventClassDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public EventGroup[] EventGroupList {
            get {
                return this.eventGroupListField;
            }
            set {
                this.eventGroupListField = value;
                this.RaisePropertyChanged("EventGroupList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public EventType[] EventTypeCollection {
            get {
                return this.eventTypeCollectionField;
            }
            set {
                this.eventTypeCollectionField = value;
                this.RaisePropertyChanged("EventTypeCollection");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long EventClassID {
            get {
                return this.eventClassIDField;
            }
            set {
                this.eventClassIDField = value;
                this.RaisePropertyChanged("EventClassID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EventClassDescription {
            get {
                return this.eventClassDescriptionField;
            }
            set {
                this.eventClassDescriptionField = value;
                this.RaisePropertyChanged("EventClassDescription");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class MobileCarrier : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int carrierIDField;
        
        private string carrierNameField;
        
        private string carrierEmailSuffixField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int CarrierID {
            get {
                return this.carrierIDField;
            }
            set {
                this.carrierIDField = value;
                this.RaisePropertyChanged("CarrierID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CarrierName {
            get {
                return this.carrierNameField;
            }
            set {
                this.carrierNameField = value;
                this.RaisePropertyChanged("CarrierName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CarrierEmailSuffix {
            get {
                return this.carrierEmailSuffixField;
            }
            set {
                this.carrierEmailSuffixField = value;
                this.RaisePropertyChanged("CarrierEmailSuffix");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SyncStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private string deviceNameField;
        
        private int totalStepsField;
        
        private int currentStepField;
        
        private string descriptionField;
        
        private string statusTextField;
        
        private int resultCodeField;
        
        private string resultDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DeviceName {
            get {
                return this.deviceNameField;
            }
            set {
                this.deviceNameField = value;
                this.RaisePropertyChanged("DeviceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int TotalSteps {
            get {
                return this.totalStepsField;
            }
            set {
                this.totalStepsField = value;
                this.RaisePropertyChanged("TotalSteps");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int CurrentStep {
            get {
                return this.currentStepField;
            }
            set {
                this.currentStepField = value;
                this.RaisePropertyChanged("CurrentStep");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string StatusText {
            get {
                return this.statusTextField;
            }
            set {
                this.statusTextField = value;
                this.RaisePropertyChanged("StatusText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int ResultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
                this.RaisePropertyChanged("ResultCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ResultData {
            get {
                return this.resultDataField;
            }
            set {
                this.resultDataField = value;
                this.RaisePropertyChanged("ResultData");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserListDetail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long userIdField;
        
        private string userNameField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private bool enabledField;
        
        private bool isValidatedField;
        
        private UserFeatureCacheInfo[] featureInfoField;
        
        private System.DateTime timeStampUpdateField;
        
        private long imageIdField;
        
        private string photoURLField;
        
        private int userTypeIDField;
        
        private int outOfSyncCountField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("FirstName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("LastName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("Enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool IsValidated {
            get {
                return this.isValidatedField;
            }
            set {
                this.isValidatedField = value;
                this.RaisePropertyChanged("IsValidated");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public UserFeatureCacheInfo[] FeatureInfo {
            get {
                return this.featureInfoField;
            }
            set {
                this.featureInfoField = value;
                this.RaisePropertyChanged("FeatureInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime TimeStampUpdate {
            get {
                return this.timeStampUpdateField;
            }
            set {
                this.timeStampUpdateField = value;
                this.RaisePropertyChanged("TimeStampUpdate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public long ImageId {
            get {
                return this.imageIdField;
            }
            set {
                this.imageIdField = value;
                this.RaisePropertyChanged("ImageId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public int UserTypeID {
            get {
                return this.userTypeIDField;
            }
            set {
                this.userTypeIDField = value;
                this.RaisePropertyChanged("UserTypeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public int OutOfSyncCount {
            get {
                return this.outOfSyncCountField;
            }
            set {
                this.outOfSyncCountField = value;
                this.RaisePropertyChanged("OutOfSyncCount");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserFeatureCacheInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int featureIdField;
        
        private string featureNameField;
        
        private bool featureEnabledField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int FeatureId {
            get {
                return this.featureIdField;
            }
            set {
                this.featureIdField = value;
                this.RaisePropertyChanged("FeatureId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FeatureName {
            get {
                return this.featureNameField;
            }
            set {
                this.featureNameField = value;
                this.RaisePropertyChanged("FeatureName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool FeatureEnabled {
            get {
                return this.featureEnabledField;
            }
            set {
                this.featureEnabledField = value;
                this.RaisePropertyChanged("FeatureEnabled");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserManagementOptions : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool isOptedForUserCodeManagementField;
        
        private bool isUserCodeDisplayedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsOptedForUserCodeManagement {
            get {
                return this.isOptedForUserCodeManagementField;
            }
            set {
                this.isOptedForUserCodeManagementField = value;
                this.RaisePropertyChanged("IsOptedForUserCodeManagement");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsUserCodeDisplayed {
            get {
                return this.isUserCodeDisplayedField;
            }
            set {
                this.isUserCodeDisplayedField = value;
                this.RaisePropertyChanged("IsUserCodeDisplayed");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeviceAttribute : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeviceUserAuthorization : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private string deviceNameField;
        
        private int deviceClassIDField;
        
        private string deviceSerialNumberField;
        
        private bool isAccessGrantedField;
        
        private string syncField;
        
        private DeviceAttribute[] deviceAuthorizationAttributesField;
        
        private long prerequisiteDeviceIDField;
        
        private int prerequisiteDeviceClassIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DeviceName {
            get {
                return this.deviceNameField;
            }
            set {
                this.deviceNameField = value;
                this.RaisePropertyChanged("DeviceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int DeviceClassID {
            get {
                return this.deviceClassIDField;
            }
            set {
                this.deviceClassIDField = value;
                this.RaisePropertyChanged("DeviceClassID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DeviceSerialNumber {
            get {
                return this.deviceSerialNumberField;
            }
            set {
                this.deviceSerialNumberField = value;
                this.RaisePropertyChanged("DeviceSerialNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool IsAccessGranted {
            get {
                return this.isAccessGrantedField;
            }
            set {
                this.isAccessGrantedField = value;
                this.RaisePropertyChanged("IsAccessGranted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Sync {
            get {
                return this.syncField;
            }
            set {
                this.syncField = value;
                this.RaisePropertyChanged("Sync");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public DeviceAttribute[] DeviceAuthorizationAttributes {
            get {
                return this.deviceAuthorizationAttributesField;
            }
            set {
                this.deviceAuthorizationAttributesField = value;
                this.RaisePropertyChanged("DeviceAuthorizationAttributes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public long PrerequisiteDeviceID {
            get {
                return this.prerequisiteDeviceIDField;
            }
            set {
                this.prerequisiteDeviceIDField = value;
                this.RaisePropertyChanged("PrerequisiteDeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int PrerequisiteDeviceClassID {
            get {
                return this.prerequisiteDeviceClassIDField;
            }
            set {
                this.prerequisiteDeviceClassIDField = value;
                this.RaisePropertyChanged("PrerequisiteDeviceClassID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LocationUserAuthorization : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long locationIDField;
        
        private string locationNameField;
        
        private DeviceUserAuthorization[] deviceListField;
        
        private string photoURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long LocationID {
            get {
                return this.locationIDField;
            }
            set {
                this.locationIDField = value;
                this.RaisePropertyChanged("LocationID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string LocationName {
            get {
                return this.locationNameField;
            }
            set {
                this.locationNameField = value;
                this.RaisePropertyChanged("LocationName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DeviceUserAuthorization[] DeviceList {
            get {
                return this.deviceListField;
            }
            set {
                this.deviceListField = value;
                this.RaisePropertyChanged("DeviceList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long userIdField;
        
        private string userNameField;
        
        private string passWordField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private bool enabledField;
        
        private PhoneInfo[] phoneListField;
        
        private EmailInfo[] emailListField;
        
        private LocationUserAuthorization[] locationListField;
        
        private UserFeatureCacheInfo[] featureInfoField;
        
        private bool imageChangedField;
        
        private byte[] imageField;
        
        private long imageIdField;
        
        private string photoURLField;
        
        private int adminAccessField;
        
        private int userTypeIDField;
        
        private UserManagementOptions userManagementOptionsField;
        
        private bool promptForUserCodeField;
        
        private int outOfSyncCountField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PassWord {
            get {
                return this.passWordField;
            }
            set {
                this.passWordField = value;
                this.RaisePropertyChanged("PassWord");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("FirstName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("LastName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("Enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public PhoneInfo[] PhoneList {
            get {
                return this.phoneListField;
            }
            set {
                this.phoneListField = value;
                this.RaisePropertyChanged("PhoneList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public EmailInfo[] EmailList {
            get {
                return this.emailListField;
            }
            set {
                this.emailListField = value;
                this.RaisePropertyChanged("EmailList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        public LocationUserAuthorization[] LocationList {
            get {
                return this.locationListField;
            }
            set {
                this.locationListField = value;
                this.RaisePropertyChanged("LocationList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        public UserFeatureCacheInfo[] FeatureInfo {
            get {
                return this.featureInfoField;
            }
            set {
                this.featureInfoField = value;
                this.RaisePropertyChanged("FeatureInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool ImageChanged {
            get {
                return this.imageChangedField;
            }
            set {
                this.imageChangedField = value;
                this.RaisePropertyChanged("ImageChanged");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=11)]
        public byte[] Image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
                this.RaisePropertyChanged("Image");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public long ImageId {
            get {
                return this.imageIdField;
            }
            set {
                this.imageIdField = value;
                this.RaisePropertyChanged("ImageId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public int AdminAccess {
            get {
                return this.adminAccessField;
            }
            set {
                this.adminAccessField = value;
                this.RaisePropertyChanged("AdminAccess");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public int UserTypeID {
            get {
                return this.userTypeIDField;
            }
            set {
                this.userTypeIDField = value;
                this.RaisePropertyChanged("UserTypeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public UserManagementOptions UserManagementOptions {
            get {
                return this.userManagementOptionsField;
            }
            set {
                this.userManagementOptionsField = value;
                this.RaisePropertyChanged("UserManagementOptions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public bool PromptForUserCode {
            get {
                return this.promptForUserCodeField;
            }
            set {
                this.promptForUserCodeField = value;
                this.RaisePropertyChanged("PromptForUserCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public int OutOfSyncCount {
            get {
                return this.outOfSyncCountField;
            }
            set {
                this.outOfSyncCountField = value;
                this.RaisePropertyChanged("OutOfSyncCount");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PhoneInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string phoneNumberField;
        
        private bool isPhoneValidatedField;
        
        private bool isSMSControlEnabledField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
                this.RaisePropertyChanged("PhoneNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsPhoneValidated {
            get {
                return this.isPhoneValidatedField;
            }
            set {
                this.isPhoneValidatedField = value;
                this.RaisePropertyChanged("IsPhoneValidated");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsSMSControlEnabled {
            get {
                return this.isSMSControlEnabledField;
            }
            set {
                this.isSMSControlEnabledField = value;
                this.RaisePropertyChanged("IsSMSControlEnabled");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EmailInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string emailAddressField;
        
        private bool isEmailValidatedField;
        
        private int notificationMethodIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string EmailAddress {
            get {
                return this.emailAddressField;
            }
            set {
                this.emailAddressField = value;
                this.RaisePropertyChanged("EmailAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsEmailValidated {
            get {
                return this.isEmailValidatedField;
            }
            set {
                this.isEmailValidatedField = value;
                this.RaisePropertyChanged("IsEmailValidated");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int NotificationMethodID {
            get {
                return this.notificationMethodIDField;
            }
            set {
                this.notificationMethodIDField = value;
                this.RaisePropertyChanged("NotificationMethodID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeviceInfoBasic_UserEnabled : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private string deviceNameField;
        
        private int deviceClassIDField;
        
        private string deviceSerialNumberField;
        
        private bool isAccessGrantedField;
        
        private string panelSlotNumberField;
        
        private string panelUserCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DeviceName {
            get {
                return this.deviceNameField;
            }
            set {
                this.deviceNameField = value;
                this.RaisePropertyChanged("DeviceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int DeviceClassID {
            get {
                return this.deviceClassIDField;
            }
            set {
                this.deviceClassIDField = value;
                this.RaisePropertyChanged("DeviceClassID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DeviceSerialNumber {
            get {
                return this.deviceSerialNumberField;
            }
            set {
                this.deviceSerialNumberField = value;
                this.RaisePropertyChanged("DeviceSerialNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool IsAccessGranted {
            get {
                return this.isAccessGrantedField;
            }
            set {
                this.isAccessGrantedField = value;
                this.RaisePropertyChanged("IsAccessGranted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string PanelSlotNumber {
            get {
                return this.panelSlotNumberField;
            }
            set {
                this.panelSlotNumberField = value;
                this.RaisePropertyChanged("PanelSlotNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string PanelUserCode {
            get {
                return this.panelUserCodeField;
            }
            set {
                this.panelUserCodeField = value;
                this.RaisePropertyChanged("PanelUserCode");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LocationInfoBasic_UserEnabled : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long locationIDField;
        
        private string locationNameField;
        
        private DeviceInfoBasic_UserEnabled[] deviceListField;
        
        private string photoURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long LocationID {
            get {
                return this.locationIDField;
            }
            set {
                this.locationIDField = value;
                this.RaisePropertyChanged("LocationID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string LocationName {
            get {
                return this.locationNameField;
            }
            set {
                this.locationNameField = value;
                this.RaisePropertyChanged("LocationName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DeviceInfoBasic_UserEnabled[] DeviceList {
            get {
                return this.deviceListField;
            }
            set {
                this.deviceListField = value;
                this.RaisePropertyChanged("DeviceList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long userIdField;
        
        private string userNameField;
        
        private string passWordField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private bool enabledField;
        
        private PhoneInfo[] phoneListField;
        
        private EmailInfo[] emailListField;
        
        private LocationInfoBasic_UserEnabled[] locationListField;
        
        private UserFeatureCacheInfo[] featureInfoField;
        
        private int resultCodeField;
        
        private bool imageChangedField;
        
        private byte[] imageField;
        
        private long imageIdField;
        
        private string photoURLField;
        
        private int adminAccessField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PassWord {
            get {
                return this.passWordField;
            }
            set {
                this.passWordField = value;
                this.RaisePropertyChanged("PassWord");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("FirstName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("LastName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("Enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public PhoneInfo[] PhoneList {
            get {
                return this.phoneListField;
            }
            set {
                this.phoneListField = value;
                this.RaisePropertyChanged("PhoneList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public EmailInfo[] EmailList {
            get {
                return this.emailListField;
            }
            set {
                this.emailListField = value;
                this.RaisePropertyChanged("EmailList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        public LocationInfoBasic_UserEnabled[] LocationList {
            get {
                return this.locationListField;
            }
            set {
                this.locationListField = value;
                this.RaisePropertyChanged("LocationList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        public UserFeatureCacheInfo[] FeatureInfo {
            get {
                return this.featureInfoField;
            }
            set {
                this.featureInfoField = value;
                this.RaisePropertyChanged("FeatureInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public int ResultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
                this.RaisePropertyChanged("ResultCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public bool ImageChanged {
            get {
                return this.imageChangedField;
            }
            set {
                this.imageChangedField = value;
                this.RaisePropertyChanged("ImageChanged");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=12)]
        public byte[] Image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
                this.RaisePropertyChanged("Image");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public long ImageId {
            get {
                return this.imageIdField;
            }
            set {
                this.imageIdField = value;
                this.RaisePropertyChanged("ImageId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public int AdminAccess {
            get {
                return this.adminAccessField;
            }
            set {
                this.adminAccessField = value;
                this.RaisePropertyChanged("AdminAccess");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class Users : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long userIdField;
        
        private string userNameField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private bool enabledField;
        
        private bool isValidatedField;
        
        private UserFeatureCacheInfo[] featureInfoField;
        
        private System.DateTime timeStampUpdateField;
        
        private long imageIdField;
        
        private string photoURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("FirstName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("LastName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("Enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool IsValidated {
            get {
                return this.isValidatedField;
            }
            set {
                this.isValidatedField = value;
                this.RaisePropertyChanged("IsValidated");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public UserFeatureCacheInfo[] FeatureInfo {
            get {
                return this.featureInfoField;
            }
            set {
                this.featureInfoField = value;
                this.RaisePropertyChanged("FeatureInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime TimeStampUpdate {
            get {
                return this.timeStampUpdateField;
            }
            set {
                this.timeStampUpdateField = value;
                this.RaisePropertyChanged("TimeStampUpdate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public long ImageId {
            get {
                return this.imageIdField;
            }
            set {
                this.imageIdField = value;
                this.RaisePropertyChanged("ImageId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterfaceSchemaInfoEx))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class InterfaceSchemaInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int interfaceSchemaIDField;
        
        private string schemaNameField;
        
        private string baseURLField;
        
        private string productNameField;
        
        private string companyNameField;
        
        private string companyPhoneNumberField;
        
        private string websiteURLField;
        
        private string logoURLField;
        
        private string helpURLField;
        
        private string customHeaderMessageField;
        
        private string customFooterMessageField;
        
        private string miscellaneousAttributesField;
        
        private string mailSenderNameField;
        
        private bool skinningEnabledField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int InterfaceSchemaID {
            get {
                return this.interfaceSchemaIDField;
            }
            set {
                this.interfaceSchemaIDField = value;
                this.RaisePropertyChanged("InterfaceSchemaID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string SchemaName {
            get {
                return this.schemaNameField;
            }
            set {
                this.schemaNameField = value;
                this.RaisePropertyChanged("SchemaName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string BaseURL {
            get {
                return this.baseURLField;
            }
            set {
                this.baseURLField = value;
                this.RaisePropertyChanged("BaseURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
                this.RaisePropertyChanged("ProductName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
                this.RaisePropertyChanged("CompanyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string CompanyPhoneNumber {
            get {
                return this.companyPhoneNumberField;
            }
            set {
                this.companyPhoneNumberField = value;
                this.RaisePropertyChanged("CompanyPhoneNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string WebsiteURL {
            get {
                return this.websiteURLField;
            }
            set {
                this.websiteURLField = value;
                this.RaisePropertyChanged("WebsiteURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string LogoURL {
            get {
                return this.logoURLField;
            }
            set {
                this.logoURLField = value;
                this.RaisePropertyChanged("LogoURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string HelpURL {
            get {
                return this.helpURLField;
            }
            set {
                this.helpURLField = value;
                this.RaisePropertyChanged("HelpURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string CustomHeaderMessage {
            get {
                return this.customHeaderMessageField;
            }
            set {
                this.customHeaderMessageField = value;
                this.RaisePropertyChanged("CustomHeaderMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string CustomFooterMessage {
            get {
                return this.customFooterMessageField;
            }
            set {
                this.customFooterMessageField = value;
                this.RaisePropertyChanged("CustomFooterMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string MiscellaneousAttributes {
            get {
                return this.miscellaneousAttributesField;
            }
            set {
                this.miscellaneousAttributesField = value;
                this.RaisePropertyChanged("MiscellaneousAttributes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string MailSenderName {
            get {
                return this.mailSenderNameField;
            }
            set {
                this.mailSenderNameField = value;
                this.RaisePropertyChanged("MailSenderName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool SkinningEnabled {
            get {
                return this.skinningEnabledField;
            }
            set {
                this.skinningEnabledField = value;
                this.RaisePropertyChanged("SkinningEnabled");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class InterfaceSchemaInfoEx : InterfaceSchemaInfo {
        
        private string loginURLField;
        
        private string supportPhoneNumberField;
        
        private string companyEmailAddressField;
        
        private string appleDownloadURLField;
        
        private string androidDownloadURLField;
        
        private string blackBerryDownloadURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string LoginURL {
            get {
                return this.loginURLField;
            }
            set {
                this.loginURLField = value;
                this.RaisePropertyChanged("LoginURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string SupportPhoneNumber {
            get {
                return this.supportPhoneNumberField;
            }
            set {
                this.supportPhoneNumberField = value;
                this.RaisePropertyChanged("SupportPhoneNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CompanyEmailAddress {
            get {
                return this.companyEmailAddressField;
            }
            set {
                this.companyEmailAddressField = value;
                this.RaisePropertyChanged("CompanyEmailAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string AppleDownloadURL {
            get {
                return this.appleDownloadURLField;
            }
            set {
                this.appleDownloadURLField = value;
                this.RaisePropertyChanged("AppleDownloadURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string AndroidDownloadURL {
            get {
                return this.androidDownloadURLField;
            }
            set {
                this.androidDownloadURLField = value;
                this.RaisePropertyChanged("AndroidDownloadURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string BlackBerryDownloadURL {
            get {
                return this.blackBerryDownloadURLField;
            }
            set {
                this.blackBerryDownloadURLField = value;
                this.RaisePropertyChanged("BlackBerryDownloadURL");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeviceInfoBasic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long deviceIDField;
        
        private string deviceNameField;
        
        private int deviceClassIDField;
        
        private string deviceSerialNumberField;
        
        private string deviceFlagsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DeviceName {
            get {
                return this.deviceNameField;
            }
            set {
                this.deviceNameField = value;
                this.RaisePropertyChanged("DeviceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int DeviceClassID {
            get {
                return this.deviceClassIDField;
            }
            set {
                this.deviceClassIDField = value;
                this.RaisePropertyChanged("DeviceClassID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DeviceSerialNumber {
            get {
                return this.deviceSerialNumberField;
            }
            set {
                this.deviceSerialNumberField = value;
                this.RaisePropertyChanged("DeviceSerialNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string DeviceFlags {
            get {
                return this.deviceFlagsField;
            }
            set {
                this.deviceFlagsField = value;
                this.RaisePropertyChanged("DeviceFlags");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LocationInfoBasic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long locationIDField;
        
        private string locationNameField;
        
        private string photoURLField;
        
        private string locationModuleFlagsField;
        
        private long securityDeviceIDField;
        
        private DeviceInfoBasic[] deviceListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long LocationID {
            get {
                return this.locationIDField;
            }
            set {
                this.locationIDField = value;
                this.RaisePropertyChanged("LocationID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string LocationName {
            get {
                return this.locationNameField;
            }
            set {
                this.locationNameField = value;
                this.RaisePropertyChanged("LocationName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string LocationModuleFlags {
            get {
                return this.locationModuleFlagsField;
            }
            set {
                this.locationModuleFlagsField = value;
                this.RaisePropertyChanged("LocationModuleFlags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long SecurityDeviceID {
            get {
                return this.securityDeviceIDField;
            }
            set {
                this.securityDeviceIDField = value;
                this.RaisePropertyChanged("SecurityDeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public DeviceInfoBasic[] DeviceList {
            get {
                return this.deviceListField;
            }
            set {
                this.deviceListField = value;
                this.RaisePropertyChanged("DeviceList");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserInfoBasic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long userIDField;
        
        private string usernameField;
        
        private string fullnameField;
        
        private string languageField;
        
        private string userFeatureListField;
        
        private string clientPreferencesField;
        
        private bool isEulaAcceptedField;
        
        private bool isSMSEulaAcceptedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
                this.RaisePropertyChanged("UserID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
                this.RaisePropertyChanged("Username");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Fullname {
            get {
                return this.fullnameField;
            }
            set {
                this.fullnameField = value;
                this.RaisePropertyChanged("Fullname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
                this.RaisePropertyChanged("Language");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string UserFeatureList {
            get {
                return this.userFeatureListField;
            }
            set {
                this.userFeatureListField = value;
                this.RaisePropertyChanged("UserFeatureList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ClientPreferences {
            get {
                return this.clientPreferencesField;
            }
            set {
                this.clientPreferencesField = value;
                this.RaisePropertyChanged("ClientPreferences");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool IsEulaAccepted {
            get {
                return this.isEulaAcceptedField;
            }
            set {
                this.isEulaAcceptedField = value;
                this.RaisePropertyChanged("IsEulaAccepted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool IsSMSEulaAccepted {
            get {
                return this.isSMSEulaAcceptedField;
            }
            set {
                this.isSMSEulaAcceptedField = value;
                this.RaisePropertyChanged("IsSMSEulaAccepted");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class FilterEventType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long eventTypeFilterIdField;
        
        private string eventTypeFilterNameField;
        
        private long eventClassField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long EventTypeFilterId {
            get {
                return this.eventTypeFilterIdField;
            }
            set {
                this.eventTypeFilterIdField = value;
                this.RaisePropertyChanged("EventTypeFilterId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string EventTypeFilterName {
            get {
                return this.eventTypeFilterNameField;
            }
            set {
                this.eventTypeFilterNameField = value;
                this.RaisePropertyChanged("EventTypeFilterName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public long EventClass {
            get {
                return this.eventClassField;
            }
            set {
                this.eventClassField = value;
                this.RaisePropertyChanged("EventClass");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long eventRecordIdField;
        
        private long eventTypeField;
        
        private string eventField;
        
        private string originatorField;
        
        private string noticeField;
        
        private string notesField;
        
        private bool hasNotesField;
        
        private bool isLockedField;
        
        private bool isHiddenField;
        
        private string recDateTimeGMTField;
        
        private string recDateLocalField;
        
        private string recDateSuffixField;
        
        private int filterClassField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long EventRecordId {
            get {
                return this.eventRecordIdField;
            }
            set {
                this.eventRecordIdField = value;
                this.RaisePropertyChanged("EventRecordId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
                this.RaisePropertyChanged("EventType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Event {
            get {
                return this.eventField;
            }
            set {
                this.eventField = value;
                this.RaisePropertyChanged("Event");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
                this.RaisePropertyChanged("Originator");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Notice {
            get {
                return this.noticeField;
            }
            set {
                this.noticeField = value;
                this.RaisePropertyChanged("Notice");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
                this.RaisePropertyChanged("Notes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool HasNotes {
            get {
                return this.hasNotesField;
            }
            set {
                this.hasNotesField = value;
                this.RaisePropertyChanged("HasNotes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool IsLocked {
            get {
                return this.isLockedField;
            }
            set {
                this.isLockedField = value;
                this.RaisePropertyChanged("IsLocked");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool IsHidden {
            get {
                return this.isHiddenField;
            }
            set {
                this.isHiddenField = value;
                this.RaisePropertyChanged("IsHidden");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string RecDateTimeGMT {
            get {
                return this.recDateTimeGMTField;
            }
            set {
                this.recDateTimeGMTField = value;
                this.RaisePropertyChanged("RecDateTimeGMT");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string RecDateLocal {
            get {
                return this.recDateLocalField;
            }
            set {
                this.recDateLocalField = value;
                this.RaisePropertyChanged("RecDateLocal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string RecDateSuffix {
            get {
                return this.recDateSuffixField;
            }
            set {
                this.recDateSuffixField = value;
                this.RaisePropertyChanged("RecDateSuffix");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public int FilterClass {
            get {
                return this.filterClassField;
            }
            set {
                this.filterClassField = value;
                this.RaisePropertyChanged("FilterClass");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class VideoURL : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string uRLField;
        
        private int imageWidthField;
        
        private int imageHeightField;
        
        private short videoTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
                this.RaisePropertyChanged("URL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int imageWidth {
            get {
                return this.imageWidthField;
            }
            set {
                this.imageWidthField = value;
                this.RaisePropertyChanged("imageWidth");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int imageHeight {
            get {
                return this.imageHeightField;
            }
            set {
                this.imageHeightField = value;
                this.RaisePropertyChanged("imageHeight");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public short videoType {
            get {
                return this.videoTypeField;
            }
            set {
                this.videoTypeField = value;
                this.RaisePropertyChanged("videoType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class TimeZoneData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int timeZoneIDField;
        
        private string timeZoneNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int TimeZoneID {
            get {
                return this.timeZoneIDField;
            }
            set {
                this.timeZoneIDField = value;
                this.RaisePropertyChanged("TimeZoneID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string TimeZoneName {
            get {
                return this.timeZoneNameField;
            }
            set {
                this.timeZoneNameField = value;
                this.RaisePropertyChanged("TimeZoneName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string mACField;
        
        private string cameraNameField;
        
        private string featureFlagsField;
        
        private byte defaultCameraField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string MAC {
            get {
                return this.mACField;
            }
            set {
                this.mACField = value;
                this.RaisePropertyChanged("MAC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CameraName {
            get {
                return this.cameraNameField;
            }
            set {
                this.cameraNameField = value;
                this.RaisePropertyChanged("CameraName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string FeatureFlags {
            get {
                return this.featureFlagsField;
            }
            set {
                this.featureFlagsField = value;
                this.RaisePropertyChanged("FeatureFlags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public byte DefaultCamera {
            get {
                return this.defaultCameraField;
            }
            set {
                this.defaultCameraField = value;
                this.RaisePropertyChanged("DefaultCamera");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int cameraCountField;
        
        private CameraInfo[] camerasField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int CameraCount {
            get {
                return this.cameraCountField;
            }
            set {
                this.cameraCountField = value;
                this.RaisePropertyChanged("CameraCount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public CameraInfo[] Cameras {
            get {
                return this.camerasField;
            }
            set {
                this.camerasField = value;
                this.RaisePropertyChanged("Cameras");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DealerMessageInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private short displayTypeIDField;
        
        private long accountIDField;
        
        private long locationIDField;
        
        private int priorityField;
        
        private int messageIDField;
        
        private int messageTypeField;
        
        private string titleField;
        
        private string messageDataField;
        
        private string receivedTimeField;
        
        private int readStateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public short DisplayTypeID {
            get {
                return this.displayTypeIDField;
            }
            set {
                this.displayTypeIDField = value;
                this.RaisePropertyChanged("DisplayTypeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long AccountID {
            get {
                return this.accountIDField;
            }
            set {
                this.accountIDField = value;
                this.RaisePropertyChanged("AccountID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public long LocationID {
            get {
                return this.locationIDField;
            }
            set {
                this.locationIDField = value;
                this.RaisePropertyChanged("LocationID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
                this.RaisePropertyChanged("Priority");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
                this.RaisePropertyChanged("MessageID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int MessageType {
            get {
                return this.messageTypeField;
            }
            set {
                this.messageTypeField = value;
                this.RaisePropertyChanged("MessageType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string MessageData {
            get {
                return this.messageDataField;
            }
            set {
                this.messageDataField = value;
                this.RaisePropertyChanged("MessageData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string ReceivedTime {
            get {
                return this.receivedTimeField;
            }
            set {
                this.receivedTimeField = value;
                this.RaisePropertyChanged("ReceivedTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public int ReadState {
            get {
                return this.readStateField;
            }
            set {
                this.readStateField = value;
                this.RaisePropertyChanged("ReadState");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ForecastWeatherRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int dayField;
        
        private string dayCodeField;
        
        private string dateField;
        
        private string weatherTextField;
        
        private int weatherIconField;
        
        private int highTemperatureField;
        
        private int lowTemperatureField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Day {
            get {
                return this.dayField;
            }
            set {
                this.dayField = value;
                this.RaisePropertyChanged("Day");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DayCode {
            get {
                return this.dayCodeField;
            }
            set {
                this.dayCodeField = value;
                this.RaisePropertyChanged("DayCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string WeatherText {
            get {
                return this.weatherTextField;
            }
            set {
                this.weatherTextField = value;
                this.RaisePropertyChanged("WeatherText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int WeatherIcon {
            get {
                return this.weatherIconField;
            }
            set {
                this.weatherIconField = value;
                this.RaisePropertyChanged("WeatherIcon");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int HighTemperature {
            get {
                return this.highTemperatureField;
            }
            set {
                this.highTemperatureField = value;
                this.RaisePropertyChanged("HighTemperature");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int LowTemperature {
            get {
                return this.lowTemperatureField;
            }
            set {
                this.lowTemperatureField = value;
                this.RaisePropertyChanged("LowTemperature");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ForecastWeatherInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int unitField;
        
        private string timeField;
        
        private ForecastWeatherRecord[] forecastWeatherListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
                this.RaisePropertyChanged("Unit");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
                this.RaisePropertyChanged("Time");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public ForecastWeatherRecord[] ForecastWeatherList {
            get {
                return this.forecastWeatherListField;
            }
            set {
                this.forecastWeatherListField = value;
                this.RaisePropertyChanged("ForecastWeatherList");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CurrentWeatherRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int temperatureField;
        
        private int apparentTemperatureField;
        
        private string humidityField;
        
        private string weatherTextField;
        
        private int weatherIconField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Temperature {
            get {
                return this.temperatureField;
            }
            set {
                this.temperatureField = value;
                this.RaisePropertyChanged("Temperature");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int ApparentTemperature {
            get {
                return this.apparentTemperatureField;
            }
            set {
                this.apparentTemperatureField = value;
                this.RaisePropertyChanged("ApparentTemperature");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Humidity {
            get {
                return this.humidityField;
            }
            set {
                this.humidityField = value;
                this.RaisePropertyChanged("Humidity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string WeatherText {
            get {
                return this.weatherTextField;
            }
            set {
                this.weatherTextField = value;
                this.RaisePropertyChanged("WeatherText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int WeatherIcon {
            get {
                return this.weatherIconField;
            }
            set {
                this.weatherIconField = value;
                this.RaisePropertyChanged("WeatherIcon");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CurrentWeatherInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int unitField;
        
        private string timeField;
        
        private CurrentWeatherRecord currentWeatherField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
                this.RaisePropertyChanged("Unit");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
                this.RaisePropertyChanged("Time");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public CurrentWeatherRecord CurrentWeather {
            get {
                return this.currentWeatherField;
            }
            set {
                this.currentWeatherField = value;
                this.RaisePropertyChanged("CurrentWeather");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ContentPhotoInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long photoIdField;
        
        private string photoURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long PhotoId {
            get {
                return this.photoIdField;
            }
            set {
                this.photoIdField = value;
                this.RaisePropertyChanged("PhotoId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SlideShowConfigInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ContentPhotoInfo[] photoListField;
        
        private int photoCountLeftField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ContentPhotoInfo[] PhotoList {
            get {
                return this.photoListField;
            }
            set {
                this.photoListField = value;
                this.RaisePropertyChanged("PhotoList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PhotoCountLeft {
            get {
                return this.photoCountLeftField;
            }
            set {
                this.photoCountLeftField = value;
                this.RaisePropertyChanged("PhotoCountLeft");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ContentSettingsInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int contentTypeField;
        
        private string configurationValuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
                this.RaisePropertyChanged("ContentType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationValues {
            get {
                return this.configurationValuesField;
            }
            set {
                this.configurationValuesField = value;
                this.RaisePropertyChanged("ConfigurationValues");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ContentConfigurationInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int[] availableContentTypeListField;
        
        private ContentSettingsInfo[] contentSettingsListField;
        
        private int[] homeIconListField;
        
        private int firstRefreshTimeField;
        
        private int secondRefreshTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public int[] AvailableContentTypeList {
            get {
                return this.availableContentTypeListField;
            }
            set {
                this.availableContentTypeListField = value;
                this.RaisePropertyChanged("AvailableContentTypeList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public ContentSettingsInfo[] ContentSettingsList {
            get {
                return this.contentSettingsListField;
            }
            set {
                this.contentSettingsListField = value;
                this.RaisePropertyChanged("ContentSettingsList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public int[] HomeIconList {
            get {
                return this.homeIconListField;
            }
            set {
                this.homeIconListField = value;
                this.RaisePropertyChanged("HomeIconList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int FirstRefreshTime {
            get {
                return this.firstRefreshTimeField;
            }
            set {
                this.firstRefreshTimeField = value;
                this.RaisePropertyChanged("FirstRefreshTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int SecondRefreshTime {
            get {
                return this.secondRefreshTimeField;
            }
            set {
                this.secondRefreshTimeField = value;
                this.RaisePropertyChanged("SecondRefreshTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ConsoleDisplayInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string line1Field;
        
        private string line2Field;
        
        private int ledStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Line1 {
            get {
                return this.line1Field;
            }
            set {
                this.line1Field = value;
                this.RaisePropertyChanged("Line1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Line2 {
            get {
                return this.line2Field;
            }
            set {
                this.line2Field = value;
                this.RaisePropertyChanged("Line2");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int LedStatus {
            get {
                return this.ledStatusField;
            }
            set {
                this.ledStatusField = value;
                this.RaisePropertyChanged("LedStatus");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ZoneStatusList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ZoneStatusInfo[] zonesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ZoneStatusInfo[] Zones {
            get {
                return this.zonesField;
            }
            set {
                this.zonesField = value;
                this.RaisePropertyChanged("Zones");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ZoneStatusInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int zoneIDField;
        
        private int zoneStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ZoneID {
            get {
                return this.zoneIDField;
            }
            set {
                this.zoneIDField = value;
                this.RaisePropertyChanged("ZoneID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ZoneStatus {
            get {
                return this.zoneStatusField;
            }
            set {
                this.zoneStatusField = value;
                this.RaisePropertyChanged("ZoneStatus");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ZoneInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int zoneIDField;
        
        private string zoneDescriptionField;
        
        private int zoneStatusField;
        
        private int partitionIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ZoneID {
            get {
                return this.zoneIDField;
            }
            set {
                this.zoneIDField = value;
                this.RaisePropertyChanged("ZoneID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ZoneDescription {
            get {
                return this.zoneDescriptionField;
            }
            set {
                this.zoneDescriptionField = value;
                this.RaisePropertyChanged("ZoneDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ZoneStatus {
            get {
                return this.zoneStatusField;
            }
            set {
                this.zoneStatusField = value;
                this.RaisePropertyChanged("ZoneStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int PartitionID {
            get {
                return this.partitionIDField;
            }
            set {
                this.partitionIDField = value;
                this.RaisePropertyChanged("PartitionID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PartitionInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int partitionIDField;
        
        private int armingStateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int PartitionID {
            get {
                return this.partitionIDField;
            }
            set {
                this.partitionIDField = value;
                this.RaisePropertyChanged("PartitionID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int ArmingState {
            get {
                return this.armingStateField;
            }
            set {
                this.armingStateField = value;
                this.RaisePropertyChanged("ArmingState");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelStatusInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelBaseInfoEx))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelStatusInfoEx))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelMetadataAndStatusInfoEx))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelMetadataAndStatusInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public abstract partial class PanelBaseInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private PartitionInfo[] partitionsField;
        
        private long lastUpdatedTimestampTicksField;
        
        private int configurationSequenceNumberField;
        
        private bool isInACLossField;
        
        private bool isInLowBatteryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public PartitionInfo[] Partitions {
            get {
                return this.partitionsField;
            }
            set {
                this.partitionsField = value;
                this.RaisePropertyChanged("Partitions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long LastUpdatedTimestampTicks {
            get {
                return this.lastUpdatedTimestampTicksField;
            }
            set {
                this.lastUpdatedTimestampTicksField = value;
                this.RaisePropertyChanged("LastUpdatedTimestampTicks");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ConfigurationSequenceNumber {
            get {
                return this.configurationSequenceNumberField;
            }
            set {
                this.configurationSequenceNumberField = value;
                this.RaisePropertyChanged("ConfigurationSequenceNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsInACLoss {
            get {
                return this.isInACLossField;
            }
            set {
                this.isInACLossField = value;
                this.RaisePropertyChanged("IsInACLoss");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsInLowBattery {
            get {
                return this.isInLowBatteryField;
            }
            set {
                this.isInLowBatteryField = value;
                this.RaisePropertyChanged("IsInLowBattery");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelStatusInfo : PanelBaseInfo {
        
        private ZoneStatusInfo[] zonesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ZoneStatusInfo[] Zones {
            get {
                return this.zonesField;
            }
            set {
                this.zonesField = value;
                this.RaisePropertyChanged("Zones");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelStatusInfoEx))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PanelMetadataAndStatusInfoEx))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public abstract partial class PanelBaseInfoEx : PanelBaseInfo {
        
        private bool syncSecDeviceFlagField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SyncSecDeviceFlag {
            get {
                return this.syncSecDeviceFlagField;
            }
            set {
                this.syncSecDeviceFlagField = value;
                this.RaisePropertyChanged("SyncSecDeviceFlag");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelStatusInfoEx : PanelBaseInfoEx {
        
        private ZoneStatusInfo[] zonesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ZoneStatusInfo[] Zones {
            get {
                return this.zonesField;
            }
            set {
                this.zonesField = value;
                this.RaisePropertyChanged("Zones");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelMetadataAndStatusInfoEx : PanelBaseInfoEx {
        
        private ZoneInfo[] zonesField;
        
        private bool promptForImportSecuritySettingsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ZoneInfo[] Zones {
            get {
                return this.zonesField;
            }
            set {
                this.zonesField = value;
                this.RaisePropertyChanged("Zones");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool PromptForImportSecuritySettings {
            get {
                return this.promptForImportSecuritySettingsField;
            }
            set {
                this.promptForImportSecuritySettingsField = value;
                this.RaisePropertyChanged("PromptForImportSecuritySettings");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelMetadataAndStatusInfo : PanelBaseInfo {
        
        private ZoneInfo[] zonesField;
        
        private bool promptForImportSecuritySettingsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ZoneInfo[] Zones {
            get {
                return this.zonesField;
            }
            set {
                this.zonesField = value;
                this.RaisePropertyChanged("Zones");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool PromptForImportSecuritySettings {
            get {
                return this.promptForImportSecuritySettingsField;
            }
            set {
                this.promptForImportSecuritySettingsField = value;
                this.RaisePropertyChanged("PromptForImportSecuritySettings");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ThermostatControlDataResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LockControlDataResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class AutomationDataResults : WebMethodResults {
        
        private AutomationInfo automationDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AutomationInfo AutomationData {
            get {
                return this.automationDataField;
            }
            set {
                this.automationDataField = value;
                this.RaisePropertyChanged("AutomationData");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneListInfo : WebMethodResults {
        
        private SceneInfo[] sceneDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public SceneInfo[] SceneData {
            get {
                return this.sceneDataField;
            }
            set {
                this.sceneDataField = value;
                this.RaisePropertyChanged("SceneData");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneDataResults : WebMethodResults {
        
        private SceneAutomationInfo sceneAutomationDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SceneAutomationInfo SceneAutomationData {
            get {
                return this.sceneAutomationDataField;
            }
            set {
                this.sceneAutomationDataField = value;
                this.RaisePropertyChanged("SceneAutomationData");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SceneDeletionResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CreateEditASceneResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ExecuteASceneResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ThermostatScheduleResults : WebMethodResults {
        
        private ThermostatSchedule thermostatScheduleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ThermostatSchedule ThermostatSchedule {
            get {
                return this.thermostatScheduleField;
            }
            set {
                this.thermostatScheduleField = value;
                this.RaisePropertyChanged("ThermostatSchedule");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UpdateThermostatScheduleResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UpdateSwitchIconResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GPSPopupURLResult : WebMethodResults {
        
        private string gPSPopupURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string GPSPopupURL {
            get {
                return this.gPSPopupURLField;
            }
            set {
                this.gPSPopupURLField = value;
                this.RaisePropertyChanged("GPSPopupURL");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PhotoURLResult : WebMethodResults {
        
        private long photoIDField;
        
        private string photoURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long PhotoID {
            get {
                return this.photoIDField;
            }
            set {
                this.photoIDField = value;
                this.RaisePropertyChanged("PhotoID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PhotoURL {
            get {
                return this.photoURLField;
            }
            set {
                this.photoURLField = value;
                this.RaisePropertyChanged("PhotoURL");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GeofenceListResult : WebMethodResults {
        
        private GeofenceInfo[] geoFencesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public GeofenceInfo[] GeoFences {
            get {
                return this.geoFencesField;
            }
            set {
                this.geoFencesField = value;
                this.RaisePropertyChanged("GeoFences");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GPSDeviceGeoFenceResult : WebMethodResults {
        
        private GPSDeviceGeoFenceData geoFenceDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public GPSDeviceGeoFenceData GeoFenceData {
            get {
                return this.geoFenceDataField;
            }
            set {
                this.geoFenceDataField = value;
                this.RaisePropertyChanged("GeoFenceData");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GPSLocationResult : WebMethodResults {
        
        private GPSLocationInfo gPSLocationDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public GPSLocationInfo GPSLocationData {
            get {
                return this.gPSLocationDataField;
            }
            set {
                this.gPSLocationDataField = value;
                this.RaisePropertyChanged("GPSLocationData");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GPSDevicesResult : WebMethodResults {
        
        private GPSInfo[] gPSDevicesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public GPSInfo[] GPSDevices {
            get {
                return this.gPSDevicesField;
            }
            set {
                this.gPSDevicesField = value;
                this.RaisePropertyChanged("GPSDevices");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CountryStateListResult : WebMethodResults {
        
        private CountryStateInfo[] countryStateListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public CountryStateInfo[] CountryStateList {
            get {
                return this.countryStateListField;
            }
            set {
                this.countryStateListField = value;
                this.RaisePropertyChanged("CountryStateList");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CountryListResult : WebMethodResults {
        
        private CountryInfo[] countryListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public CountryInfo[] CountryList {
            get {
                return this.countryListField;
            }
            set {
                this.countryListField = value;
                this.RaisePropertyChanged("CountryList");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LocationSimpleResult : WebMethodResults {
        
        private LocationInfoSimple locationInfoSimpleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public LocationInfoSimple LocationInfoSimple {
            get {
                return this.locationInfoSimpleField;
            }
            set {
                this.locationInfoSimpleField = value;
                this.RaisePropertyChanged("LocationInfoSimple");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class LocationResult : WebMethodResults {
        
        private LocationInfo locationInfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public LocationInfo LocationInfo {
            get {
                return this.locationInfoField;
            }
            set {
                this.locationInfoField = value;
                this.RaisePropertyChanged("LocationInfo");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class WAPClientsListResults : WebMethodResults {
        
        private CameraSignalStrength[] wAPClientsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public CameraSignalStrength[] WAPClients {
            get {
                return this.wAPClientsField;
            }
            set {
                this.wAPClientsField = value;
                this.RaisePropertyChanged("WAPClients");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraInformationResults : WebMethodResults {
        
        private string detailsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
                this.RaisePropertyChanged("Details");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraSignalStrengthResults : WebMethodResults {
        
        private CameraSignalStrength signalStrengthField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CameraSignalStrength SignalStrength {
            get {
                return this.signalStrengthField;
            }
            set {
                this.signalStrengthField = value;
                this.RaisePropertyChanged("SignalStrength");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraFirmwareListResult : WebMethodResults {
        
        private CameraFirmwareList firmwareListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CameraFirmwareList FirmwareList {
            get {
                return this.firmwareListField;
            }
            set {
                this.firmwareListField = value;
                this.RaisePropertyChanged("FirmwareList");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraConfigurationResults : WebMethodResults {
        
        private string cameraNameField;
        
        private string featureFlagsField;
        
        private string sYSTEM_DataField;
        
        private string vIDEO_DataField;
        
        private string mOTION_DataField;
        
        private string iO_DataField;
        
        private string eVENT_DataField;
        
        private string pTZ_DataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CameraName {
            get {
                return this.cameraNameField;
            }
            set {
                this.cameraNameField = value;
                this.RaisePropertyChanged("CameraName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FeatureFlags {
            get {
                return this.featureFlagsField;
            }
            set {
                this.featureFlagsField = value;
                this.RaisePropertyChanged("FeatureFlags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SYSTEM_Data {
            get {
                return this.sYSTEM_DataField;
            }
            set {
                this.sYSTEM_DataField = value;
                this.RaisePropertyChanged("SYSTEM_Data");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string VIDEO_Data {
            get {
                return this.vIDEO_DataField;
            }
            set {
                this.vIDEO_DataField = value;
                this.RaisePropertyChanged("VIDEO_Data");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string MOTION_Data {
            get {
                return this.mOTION_DataField;
            }
            set {
                this.mOTION_DataField = value;
                this.RaisePropertyChanged("MOTION_Data");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string IO_Data {
            get {
                return this.iO_DataField;
            }
            set {
                this.iO_DataField = value;
                this.RaisePropertyChanged("IO_Data");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string EVENT_Data {
            get {
                return this.eVENT_DataField;
            }
            set {
                this.eVENT_DataField = value;
                this.RaisePropertyChanged("EVENT_Data");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string PTZ_Data {
            get {
                return this.pTZ_DataField;
            }
            set {
                this.pTZ_DataField = value;
                this.RaisePropertyChanged("PTZ_Data");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class MediaServerConfigurationResults : WebMethodResults {
        
        private string serverURLField;
        
        private string additionalInfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ServerURL {
            get {
                return this.serverURLField;
            }
            set {
                this.serverURLField = value;
                this.RaisePropertyChanged("ServerURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AdditionalInfo {
            get {
                return this.additionalInfoField;
            }
            set {
                this.additionalInfoField = value;
                this.RaisePropertyChanged("AdditionalInfo");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventMetaDataResults : WebMethodResults {
        
        private EventClassInfo[] eventClassCollectionField;
        
        private bool isSecurityUpdateRequiredField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public EventClassInfo[] EventClassCollection {
            get {
                return this.eventClassCollectionField;
            }
            set {
                this.eventClassCollectionField = value;
                this.RaisePropertyChanged("EventClassCollection");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsSecurityUpdateRequired {
            get {
                return this.isSecurityUpdateRequiredField;
            }
            set {
                this.isSecurityUpdateRequiredField = value;
                this.RaisePropertyChanged("IsSecurityUpdateRequired");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class TransactNotificationListResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GetAllNotificationListsResults : WebMethodResults {
        
        private NotificationListBaseInfo[] notificationListCollectionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public NotificationListBaseInfo[] NotificationListCollection {
            get {
                return this.notificationListCollectionField;
            }
            set {
                this.notificationListCollectionField = value;
                this.RaisePropertyChanged("NotificationListCollection");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotificationScheduleResult : WebMethodResults {
        
        private NotificationSchedule[] notificationSchedulesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public NotificationSchedule[] NotificationSchedules {
            get {
                return this.notificationSchedulesField;
            }
            set {
                this.notificationSchedulesField = value;
                this.RaisePropertyChanged("NotificationSchedules");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotificationConditionalStateResult : WebMethodResults {
        
        private NotificationConditionalState[] notificationConditionalStatesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public NotificationConditionalState[] NotificationConditionalStates {
            get {
                return this.notificationConditionalStatesField;
            }
            set {
                this.notificationConditionalStatesField = value;
                this.RaisePropertyChanged("NotificationConditionalStates");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SummaryConfiguredEventString : WebMethodResults {
        
        private string eventSummaryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string EventSummary {
            get {
                return this.eventSummaryField;
            }
            set {
                this.eventSummaryField = value;
                this.RaisePropertyChanged("EventSummary");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ConfiguredEventExResult : WebMethodResults {
        
        private EventNotification[] eventNotificationsField;
        
        private SceneTrigger[] sceneTriggersField;
        
        private VideoTrigger[] videoTriggersField;
        
        private TimeTriggeredAction[] timeTriggeredActionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public EventNotification[] EventNotifications {
            get {
                return this.eventNotificationsField;
            }
            set {
                this.eventNotificationsField = value;
                this.RaisePropertyChanged("EventNotifications");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public SceneTrigger[] SceneTriggers {
            get {
                return this.sceneTriggersField;
            }
            set {
                this.sceneTriggersField = value;
                this.RaisePropertyChanged("SceneTriggers");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public VideoTrigger[] VideoTriggers {
            get {
                return this.videoTriggersField;
            }
            set {
                this.videoTriggersField = value;
                this.RaisePropertyChanged("VideoTriggers");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public TimeTriggeredAction[] TimeTriggeredActions {
            get {
                return this.timeTriggeredActionsField;
            }
            set {
                this.timeTriggeredActionsField = value;
                this.RaisePropertyChanged("TimeTriggeredActions");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ConfiguredEventResult : WebMethodResults {
        
        private SentToPanelEvents[] sentToPanelEventsField;
        
        private EventNotification[] eventNotificationsField;
        
        private SceneTrigger[] sceneTriggersField;
        
        private VideoTrigger[] videoTriggersField;
        
        private TimeTriggeredAction[] timeTriggeredActionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public SentToPanelEvents[] SentToPanelEvents {
            get {
                return this.sentToPanelEventsField;
            }
            set {
                this.sentToPanelEventsField = value;
                this.RaisePropertyChanged("SentToPanelEvents");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public EventNotification[] EventNotifications {
            get {
                return this.eventNotificationsField;
            }
            set {
                this.eventNotificationsField = value;
                this.RaisePropertyChanged("EventNotifications");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public SceneTrigger[] SceneTriggers {
            get {
                return this.sceneTriggersField;
            }
            set {
                this.sceneTriggersField = value;
                this.RaisePropertyChanged("SceneTriggers");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public VideoTrigger[] VideoTriggers {
            get {
                return this.videoTriggersField;
            }
            set {
                this.videoTriggersField = value;
                this.RaisePropertyChanged("VideoTriggers");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public TimeTriggeredAction[] TimeTriggeredActions {
            get {
                return this.timeTriggeredActionsField;
            }
            set {
                this.timeTriggeredActionsField = value;
                this.RaisePropertyChanged("TimeTriggeredActions");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventMetaDataExResult : WebMethodResults {
        
        private EventClass[] eventClassCollectionField;
        
        private string locationLimitationsField;
        
        private CameraSimple[] locationCameraListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public EventClass[] EventClassCollection {
            get {
                return this.eventClassCollectionField;
            }
            set {
                this.eventClassCollectionField = value;
                this.RaisePropertyChanged("EventClassCollection");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string LocationLimitations {
            get {
                return this.locationLimitationsField;
            }
            set {
                this.locationLimitationsField = value;
                this.RaisePropertyChanged("LocationLimitations");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public CameraSimple[] LocationCameraList {
            get {
                return this.locationCameraListField;
            }
            set {
                this.locationCameraListField = value;
                this.RaisePropertyChanged("LocationCameraList");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SaveCreateUserInfoResults : WebMethodResults {
        
        private long userIdField;
        
        private string resultPhotoURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultPhotoURL {
            get {
                return this.resultPhotoURLField;
            }
            set {
                this.resultPhotoURLField = value;
                this.RaisePropertyChanged("ResultPhotoURL");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class IsUserNameValidResults : WebMethodResults {
        
        private long userIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
                this.RaisePropertyChanged("UserID");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SMSEmailCarrierResults : WebMethodResults {
        
        private MobileCarrier[] mobileCarriersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public MobileCarrier[] MobileCarriers {
            get {
                return this.mobileCarriersField;
            }
            set {
                this.mobileCarriersField = value;
                this.RaisePropertyChanged("MobileCarriers");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SynchronizeUserResults : WebMethodResults {
        
        private SyncStatus[] synchronizationStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public SyncStatus[] SynchronizationStatus {
            get {
                return this.synchronizationStatusField;
            }
            set {
                this.synchronizationStatusField = value;
                this.RaisePropertyChanged("SynchronizationStatus");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserListResults : WebMethodResults {
        
        private UserManagementOptions userManagementOptionsField;
        
        private UserListDetail[] usersField;
        
        private int urgentSyncCountField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public UserManagementOptions UserManagementOptions {
            get {
                return this.userManagementOptionsField;
            }
            set {
                this.userManagementOptionsField = value;
                this.RaisePropertyChanged("UserManagementOptions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public UserListDetail[] Users {
            get {
                return this.usersField;
            }
            set {
                this.usersField = value;
                this.RaisePropertyChanged("Users");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int UrgentSyncCount {
            get {
                return this.urgentSyncCountField;
            }
            set {
                this.urgentSyncCountField = value;
                this.RaisePropertyChanged("UrgentSyncCount");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SaveUserResults : WebMethodResults {
        
        private long userIdField;
        
        private string resultPhotoURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultPhotoURL {
            get {
                return this.resultPhotoURLField;
            }
            set {
                this.resultPhotoURLField = value;
                this.RaisePropertyChanged("ResultPhotoURL");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserDetailResults : WebMethodResults {
        
        private UserDetails userDetailsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public UserDetails UserDetails {
            get {
                return this.userDetailsField;
            }
            set {
                this.userDetailsField = value;
                this.RaisePropertyChanged("UserDetails");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeleteUserResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserInfoResults : WebMethodResults {
        
        private UserInfo userInfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public UserInfo UserInfo {
            get {
                return this.userInfoField;
            }
            set {
                this.userInfoField = value;
                this.RaisePropertyChanged("UserInfo");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DisableEnableUserResults : WebMethodResults {
        
        private bool enableStateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool EnableState {
            get {
                return this.enableStateField;
            }
            set {
                this.enableStateField = value;
                this.RaisePropertyChanged("EnableState");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DeleteUserInfoResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class UserConfigurationResults : WebMethodResults {
        
        private Users[] usersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public Users[] Users {
            get {
                return this.usersField;
            }
            set {
                this.usersField = value;
                this.RaisePropertyChanged("Users");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class InterfaceSchemaResultsEx : WebMethodResults {
        
        private InterfaceSchemaInfoEx interfaceSchemaDetailsExField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public InterfaceSchemaInfoEx InterfaceSchemaDetailsEx {
            get {
                return this.interfaceSchemaDetailsExField;
            }
            set {
                this.interfaceSchemaDetailsExField = value;
                this.RaisePropertyChanged("InterfaceSchemaDetailsEx");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class InterfaceSchemaResults : WebMethodResults {
        
        private InterfaceSchemaInfo interfaceSchemaDetailsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public InterfaceSchemaInfo InterfaceSchemaDetails {
            get {
                return this.interfaceSchemaDetailsField;
            }
            set {
                this.interfaceSchemaDetailsField = value;
                this.RaisePropertyChanged("InterfaceSchemaDetails");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class AnythingChangedResults : WebMethodResults {
        
        private string[] methodCodesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public string[] MethodCodes {
            get {
                return this.methodCodesField;
            }
            set {
                this.methodCodesField = value;
                this.RaisePropertyChanged("MethodCodes");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SessionDetailResults : WebMethodResults {
        
        private string moduleFlagsField;
        
        private string sessionIDField;
        
        private UserInfoBasic userInfoField;
        
        private LocationInfoBasic[] locationsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ModuleFlags {
            get {
                return this.moduleFlagsField;
            }
            set {
                this.moduleFlagsField = value;
                this.RaisePropertyChanged("ModuleFlags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
                this.RaisePropertyChanged("SessionID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public UserInfoBasic UserInfo {
            get {
                return this.userInfoField;
            }
            set {
                this.userInfoField = value;
                this.RaisePropertyChanged("UserInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public LocationInfoBasic[] Locations {
            get {
                return this.locationsField;
            }
            set {
                this.locationsField = value;
                this.RaisePropertyChanged("Locations");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class AuthenticateLoginResults : WebMethodResults {
        
        private string sessionIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
                this.RaisePropertyChanged("SessionID");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class RemoteAuthenticateLoginResults : WebMethodResults {
        
        private string gUIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string GUID {
            get {
                return this.gUIDField;
            }
            set {
                this.gUIDField = value;
                this.RaisePropertyChanged("GUID");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventTypeFilterResult : WebMethodResults {
        
        private FilterEventType[] eventTypeFiltersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public FilterEventType[] EventTypeFilters {
            get {
                return this.eventTypeFiltersField;
            }
            set {
                this.eventTypeFiltersField = value;
                this.RaisePropertyChanged("EventTypeFilters");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EventsResult : WebMethodResults {
        
        private EventRecord[] eventsField;
        
        private bool hasMoreField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public EventRecord[] Events {
            get {
                return this.eventsField;
            }
            set {
                this.eventsField = value;
                this.RaisePropertyChanged("Events");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool HasMore {
            get {
                return this.hasMoreField;
            }
            set {
                this.hasMoreField = value;
                this.RaisePropertyChanged("HasMore");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class NotesResult : WebMethodResults {
        
        private string noteField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
                this.RaisePropertyChanged("Note");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class VideoFileURLResult : WebMethodResults {
        
        private VideoURL[] uRLsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public VideoURL[] URLs {
            get {
                return this.uRLsField;
            }
            set {
                this.uRLsField = value;
                this.RaisePropertyChanged("URLs");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class TimeZonesResult : WebMethodResults {
        
        private TimeZoneData[] timeZoneRegionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public TimeZoneData[] TimeZoneRegions {
            get {
                return this.timeZoneRegionsField;
            }
            set {
                this.timeZoneRegionsField = value;
                this.RaisePropertyChanged("TimeZoneRegions");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraListResult : WebMethodResults {
        
        private string sessionIDField;
        
        private CameraList accountCameraListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
                this.RaisePropertyChanged("SessionID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public CameraList AccountCameraList {
            get {
                return this.accountCameraListField;
            }
            set {
                this.accountCameraListField = value;
                this.RaisePropertyChanged("AccountCameraList");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ConfigStreamModeResult : WebMethodResults {
        
        private string mACField;
        
        private string cameraIPAddressField;
        
        private string cameraNameField;
        
        private string featureFlagsField;
        
        private string rTSP_ParametersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string MAC {
            get {
                return this.mACField;
            }
            set {
                this.mACField = value;
                this.RaisePropertyChanged("MAC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CameraIPAddress {
            get {
                return this.cameraIPAddressField;
            }
            set {
                this.cameraIPAddressField = value;
                this.RaisePropertyChanged("CameraIPAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CameraName {
            get {
                return this.cameraNameField;
            }
            set {
                this.cameraNameField = value;
                this.RaisePropertyChanged("CameraName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string FeatureFlags {
            get {
                return this.featureFlagsField;
            }
            set {
                this.featureFlagsField = value;
                this.RaisePropertyChanged("FeatureFlags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string RTSP_Parameters {
            get {
                return this.rTSP_ParametersField;
            }
            set {
                this.rTSP_ParametersField = value;
                this.RaisePropertyChanged("RTSP_Parameters");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraPositionResult : WebMethodResults {
        
        private string currentPositionField;
        
        private string homePositionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CurrentPosition {
            get {
                return this.currentPositionField;
            }
            set {
                this.currentPositionField = value;
                this.RaisePropertyChanged("CurrentPosition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string HomePosition {
            get {
                return this.homePositionField;
            }
            set {
                this.homePositionField = value;
                this.RaisePropertyChanged("HomePosition");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraIOStateResult : WebMethodResults {
        
        private string cameraNameField;
        
        private string featureFlagsField;
        
        private int wlledStateField;
        
        private string output_1_StateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CameraName {
            get {
                return this.cameraNameField;
            }
            set {
                this.cameraNameField = value;
                this.RaisePropertyChanged("CameraName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FeatureFlags {
            get {
                return this.featureFlagsField;
            }
            set {
                this.featureFlagsField = value;
                this.RaisePropertyChanged("FeatureFlags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int WlledState {
            get {
                return this.wlledStateField;
            }
            set {
                this.wlledStateField = value;
                this.RaisePropertyChanged("WlledState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Output_1_State {
            get {
                return this.output_1_StateField;
            }
            set {
                this.output_1_StateField = value;
                this.RaisePropertyChanged("Output_1_State");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CameraStateResult : WebMethodResults {
        
        private string cameraNameField;
        
        private string featureFlagsField;
        
        private string currentPositionField;
        
        private int wlledStateField;
        
        private string output_1_StateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CameraName {
            get {
                return this.cameraNameField;
            }
            set {
                this.cameraNameField = value;
                this.RaisePropertyChanged("CameraName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FeatureFlags {
            get {
                return this.featureFlagsField;
            }
            set {
                this.featureFlagsField = value;
                this.RaisePropertyChanged("FeatureFlags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CurrentPosition {
            get {
                return this.currentPositionField;
            }
            set {
                this.currentPositionField = value;
                this.RaisePropertyChanged("CurrentPosition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int WlledState {
            get {
                return this.wlledStateField;
            }
            set {
                this.wlledStateField = value;
                this.RaisePropertyChanged("WlledState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Output_1_State {
            get {
                return this.output_1_StateField;
            }
            set {
                this.output_1_StateField = value;
                this.RaisePropertyChanged("Output_1_State");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DealerMessageResult : WebMethodResults {
        
        private DealerMessageInfo[] dealerMessageListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DealerMessageInfo[] DealerMessageList {
            get {
                return this.dealerMessageListField;
            }
            set {
                this.dealerMessageListField = value;
                this.RaisePropertyChanged("DealerMessageList");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ForecastWeatherResult : WebMethodResults {
        
        private ForecastWeatherInfo weatherDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ForecastWeatherInfo WeatherData {
            get {
                return this.weatherDataField;
            }
            set {
                this.weatherDataField = value;
                this.RaisePropertyChanged("WeatherData");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class CurrentWeatherResult : WebMethodResults {
        
        private CurrentWeatherInfo weatherDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CurrentWeatherInfo WeatherData {
            get {
                return this.weatherDataField;
            }
            set {
                this.weatherDataField = value;
                this.RaisePropertyChanged("WeatherData");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class SlideShowPhotoResult : WebMethodResults {
        
        private SlideShowConfigInfo slideShowConfigField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SlideShowConfigInfo SlideShowConfig {
            get {
                return this.slideShowConfigField;
            }
            set {
                this.slideShowConfigField = value;
                this.RaisePropertyChanged("SlideShowConfig");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ContentConfigurationResult : WebMethodResults {
        
        private ContentConfigurationInfo contentConfigurationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ContentConfigurationInfo ContentConfiguration {
            get {
                return this.contentConfigurationField;
            }
            set {
                this.contentConfigurationField = value;
                this.RaisePropertyChanged("ContentConfiguration");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ReadConsoleDisplayResults : WebMethodResults {
        
        private ConsoleDisplayInfo consoleDisplayField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ConsoleDisplayInfo ConsoleDisplay {
            get {
                return this.consoleDisplayField;
            }
            set {
                this.consoleDisplayField = value;
                this.RaisePropertyChanged("ConsoleDisplay");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class DisarmSecuritySystemResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ArmSecuritySystemResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ZoneBypassResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class ImportSecurityInfoResults : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class GetZonesListInStateResult : WebMethodResults {
        
        private ZoneStatusList zoneStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ZoneStatusList ZoneStatus {
            get {
                return this.zoneStatusField;
            }
            set {
                this.zoneStatusField = value;
                this.RaisePropertyChanged("ZoneStatus");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelStatusResultsEx : WebMethodResults {
        
        private PanelStatusInfoEx panelStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PanelStatusInfoEx PanelStatus {
            get {
                return this.panelStatusField;
            }
            set {
                this.panelStatusField = value;
                this.RaisePropertyChanged("PanelStatus");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelStatusResults : WebMethodResults {
        
        private PanelStatusInfo panelStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PanelStatusInfo PanelStatus {
            get {
                return this.panelStatusField;
            }
            set {
                this.panelStatusField = value;
                this.RaisePropertyChanged("PanelStatus");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelMetadataAndStatusResultsEx : WebMethodResults {
        
        private PanelMetadataAndStatusInfoEx panelMetadataAndStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PanelMetadataAndStatusInfoEx PanelMetadataAndStatus {
            get {
                return this.panelMetadataAndStatusField;
            }
            set {
                this.panelMetadataAndStatusField = value;
                this.RaisePropertyChanged("PanelMetadataAndStatus");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class PanelMetadataAndStatusResults : WebMethodResults {
        
        private PanelMetadataAndStatusInfo panelMetadataAndStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PanelMetadataAndStatusInfo PanelMetadataAndStatus {
            get {
                return this.panelMetadataAndStatusField;
            }
            set {
                this.panelMetadataAndStatusField = value;
                this.RaisePropertyChanged("PanelMetadataAndStatus");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class EmailValidationResult : WebMethodResults {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18054")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.alarmnet.com/TC2/")]
    public partial class AutomationSyncResults : WebMethodResults {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddSlideShowPhoto", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class AddSlideShowPhotoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public string SessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=1)]
        public long LocationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Image;
        
        public AddSlideShowPhotoRequest() {
        }
        
        public AddSlideShowPhotoRequest(string SessionID, long LocationID, byte[] Image) {
            this.SessionID = SessionID;
            this.LocationID = LocationID;
            this.Image = Image;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddSlideShowPhotoResponse", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class AddSlideShowPhotoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public TotalConnect.TotalConnectService.WebMethodResults AddSlideShowPhotoResult;
        
        public AddSlideShowPhotoResponse() {
        }
        
        public AddSlideShowPhotoResponse(TotalConnect.TotalConnectService.WebMethodResults AddSlideShowPhotoResult) {
            this.AddSlideShowPhotoResult = AddSlideShowPhotoResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveLocation", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class SaveLocationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public string SessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=1)]
        public TotalConnect.TotalConnectService.LocationInfo Locale;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Image;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=3)]
        public bool dataChanged;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=4)]
        public bool imageChanged;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=5)]
        public string Alias;
        
        public SaveLocationRequest() {
        }
        
        public SaveLocationRequest(string SessionId, TotalConnect.TotalConnectService.LocationInfo Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias) {
            this.SessionId = SessionId;
            this.Locale = Locale;
            this.Image = Image;
            this.dataChanged = dataChanged;
            this.imageChanged = imageChanged;
            this.Alias = Alias;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveLocationResponse", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class SaveLocationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public TotalConnect.TotalConnectService.LocationResult SaveLocationResult;
        
        public SaveLocationResponse() {
        }
        
        public SaveLocationResponse(TotalConnect.TotalConnectService.LocationResult SaveLocationResult) {
            this.SaveLocationResult = SaveLocationResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveLocationSimple", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class SaveLocationSimpleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public string SessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=1)]
        public TotalConnect.TotalConnectService.LocationInfoSimple Locale;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Image;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=3)]
        public bool dataChanged;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=4)]
        public bool imageChanged;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=5)]
        public string Alias;
        
        public SaveLocationSimpleRequest() {
        }
        
        public SaveLocationSimpleRequest(string SessionId, TotalConnect.TotalConnectService.LocationInfoSimple Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias) {
            this.SessionId = SessionId;
            this.Locale = Locale;
            this.Image = Image;
            this.dataChanged = dataChanged;
            this.imageChanged = imageChanged;
            this.Alias = Alias;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveLocationSimpleResponse", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class SaveLocationSimpleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public TotalConnect.TotalConnectService.LocationSimpleResult SaveLocationSimpleResult;
        
        public SaveLocationSimpleResponse() {
        }
        
        public SaveLocationSimpleResponse(TotalConnect.TotalConnectService.LocationSimpleResult SaveLocationSimpleResult) {
            this.SaveLocationSimpleResult = SaveLocationSimpleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetImage", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class GetImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public string SessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=1)]
        public long ImageId;
        
        public GetImageRequest() {
        }
        
        public GetImageRequest(string SessionId, long ImageId) {
            this.SessionId = SessionId;
            this.ImageId = ImageId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetImageResponse", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class GetImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetImageResult;
        
        public GetImageResponse() {
        }
        
        public GetImageResponse(byte[] GetImageResult) {
            this.GetImageResult = GetImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLogoImage", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class GetLogoImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public long ImageId;
        
        public GetLogoImageRequest() {
        }
        
        public GetLogoImageRequest(long ImageId) {
            this.ImageId = ImageId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLogoImageResponse", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class GetLogoImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLogoImageResult;
        
        public GetLogoImageResponse() {
        }
        
        public GetLogoImageResponse(byte[] GetLogoImageResult) {
            this.GetLogoImageResult = GetLogoImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetContentImage", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class GetContentImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public string SessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=1)]
        public long LocationId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=2)]
        public long ImageId;
        
        public GetContentImageRequest() {
        }
        
        public GetContentImageRequest(string SessionId, long LocationId, long ImageId) {
            this.SessionId = SessionId;
            this.LocationId = LocationId;
            this.ImageId = ImageId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetContentImageResponse", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class GetContentImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetContentImageResult;
        
        public GetContentImageResponse() {
        }
        
        public GetContentImageResponse(byte[] GetContentImageResult) {
            this.GetContentImageResult = GetContentImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SavePhotoForGPSDevice", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class SavePhotoForGPSDeviceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public string SessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=1)]
        public long DeviceID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Image;
        
        public SavePhotoForGPSDeviceRequest() {
        }
        
        public SavePhotoForGPSDeviceRequest(string SessionId, long DeviceID, byte[] Image) {
            this.SessionId = SessionId;
            this.DeviceID = DeviceID;
            this.Image = Image;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SavePhotoForGPSDeviceResponse", WrapperNamespace="https://services.alarmnet.com/TC2/", IsWrapped=true)]
    public partial class SavePhotoForGPSDeviceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://services.alarmnet.com/TC2/", Order=0)]
        public TotalConnect.TotalConnectService.PhotoURLResult SavePhotoForGPSDeviceResult;
        
        public SavePhotoForGPSDeviceResponse() {
        }
        
        public SavePhotoForGPSDeviceResponse(TotalConnect.TotalConnectService.PhotoURLResult SavePhotoForGPSDeviceResult) {
            this.SavePhotoForGPSDeviceResult = SavePhotoForGPSDeviceResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface svcTC2APISoapChannel : TotalConnect.TotalConnectService.svcTC2APISoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControlASwitchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ControlASwitchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SwitchControlDataResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SwitchControlDataResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunAutomationSynchronizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RunAutomationSynchronizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.AutomationSyncResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.AutomationSyncResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SynchronizeSecurityPanelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SynchronizeSecurityPanelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.AutomationSyncResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.AutomationSyncResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisconnectPanelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisconnectPanelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateEmailAddressInSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateEmailAddressInSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EmailValidationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EmailValidationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateEmailAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateEmailAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EmailValidationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EmailValidationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendEmailValidationDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendEmailValidationDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EmailValidationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EmailValidationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelMetaDataAndFullStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelMetaDataAndFullStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelMetadataAndStatusResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelMetaDataAndFullStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelMetaDataAndFullStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelFullStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelFullStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelStatusResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelStatusResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelFullStatusByDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelFullStatusByDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelStatusResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelStatusResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelFullStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelFullStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelStatusResultsEx Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelStatusResultsEx)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelFullStatusByDeviceIDExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelFullStatusByDeviceIDExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelStatusResultsEx Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelStatusResultsEx)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetZonesListInStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetZonesListInStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.GetZonesListInStateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.GetZonesListInStateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelMetaDataAndFullStatusByDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelMetaDataAndFullStatusByDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelMetadataAndStatusResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPanelMetaDataAndFullStatusByDeviceIDExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPanelMetaDataAndFullStatusByDeviceIDExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportSecurityInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportSecurityInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ImportSecurityInfoResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ImportSecurityInfoResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BypassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BypassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ZoneBypassResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ZoneBypassResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ArmSecuritySystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ArmSecuritySystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ArmSecuritySystemResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ArmSecuritySystemResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisarmSecuritySystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisarmSecuritySystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.DisarmSecuritySystemResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.DisarmSecuritySystemResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadConsoleDisplayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadConsoleDisplayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ReadConsoleDisplayResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ReadConsoleDisplayResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectToPanelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectToPanelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OverrideSecurityPanelSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OverrideSecurityPanelSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckSecurityPanelLastCommandStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckSecurityPanelLastCommandStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContentConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContentConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ContentConfigurationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ContentConfigurationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveContentConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveContentConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSlideShowPhotosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSlideShowPhotosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SlideShowPhotoResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SlideShowPhotoResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSlideShowPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSlideShowPhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteSlideShowPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteSlideShowPhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentWeatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentWeatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CurrentWeatherResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CurrentWeatherResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetForecastWeatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetForecastWeatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ForecastWeatherResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ForecastWeatherResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDealerMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDealerMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.DealerMessageResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.DealerMessageResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateDealerMessageReadStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateDealerMessageReadStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsCameraAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsCameraAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCameraStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraStateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraStateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCameraIOStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraIOStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraIOStateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraIOStateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCameraPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraPositionResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraPositionResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GotoPresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GotoPresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StorePresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StorePresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveCameraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveCameraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectPanTiltCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DirectPanTiltCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WLLED_ControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WLLED_ControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Output_ControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Output_ControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TriggerVideoCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TriggerVideoCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConfigStreamModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConfigStreamModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ConfigStreamModeResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ConfigStreamModeResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationCameraListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationCameraListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraListResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraListResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeZonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeZonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.TimeZonesResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.TimeZonesResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVideoFileURLsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVideoFileURLsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.VideoFileURLResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.VideoFileURLResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.NotesResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.NotesResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EventsResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EventsResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventTypeFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventTypeFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EventTypeFilterResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EventTypeFilterResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLiveEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLiveEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EventsResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EventsResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateEventNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateEventNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateEventRecordHideStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateEventRecordHideStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateEventRecordLockStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateEventRecordLockStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteAuthenticateUserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoteAuthenticateUserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateUserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateUserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.AuthenticateLoginResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.AuthenticateLoginResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateGUIDLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateGUIDLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.AuthenticateLoginResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.AuthenticateLoginResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SessionDetailResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SessionDetailResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KeepAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public KeepAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnythingChangedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AnythingChangedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.AnythingChangedResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.AnythingChangedResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInterfaceSchemaDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInterfaceSchemaDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.InterfaceSchemaResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.InterfaceSchemaResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInterfaceSchemaDetailsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInterfaceSchemaDetailsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.InterfaceSchemaResultsEx Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.InterfaceSchemaResultsEx)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.UserConfigurationResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.UserConfigurationResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.DeleteUserInfoResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.DeleteUserInfoResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisableEnableUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisableEnableUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.DisableEnableUserResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.DisableEnableUserResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateEulaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateEulaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.UserInfoResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.UserInfoResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.DeleteUserResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.DeleteUserResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisableEnableUserExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisableEnableUserExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.DisableEnableUserResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.DisableEnableUserResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.UserDetailResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.UserDetailResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SaveUserResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SaveUserResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.UserListResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.UserListResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SynchronizePanelUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SynchronizePanelUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SynchronizeUserResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SynchronizeUserResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSMSEmailCarriersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSMSEmailCarriersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SMSEmailCarrierResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SMSEmailCarrierResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsUserNameValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsUserNameValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.IsUserNameValidResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.IsUserNameValidResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCreateUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCreateUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SaveCreateUserInfoResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SaveCreateUserInfoResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUserClientPreferencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUserClientPreferencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventMetaDataExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventMetaDataExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EventMetaDataExResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EventMetaDataExResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfiguredEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfiguredEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ConfiguredEventResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ConfiguredEventResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfiguredEventsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfiguredEventsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ConfiguredEventExResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ConfiguredEventExResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SummaryConfiguredEventString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SummaryConfiguredEventString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactNotificationListEventsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TransactNotificationListEventsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactNotificationListEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TransactNotificationListEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllNotificationConditionalStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllNotificationConditionalStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.NotificationConditionalStateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.NotificationConditionalStateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllNotificationSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllNotificationSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.NotificationScheduleResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.NotificationScheduleResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactNotificationSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TransactNotificationSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllNotificationListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllNotificationListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.GetAllNotificationListsResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.GetAllNotificationListsResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactNotificationListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TransactNotificationListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.TransactNotificationListResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.TransactNotificationListResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendTestNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendTestNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.EventMetaDataResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.EventMetaDataResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMediaServerConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMediaServerConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.MediaServerConfigurationResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.MediaServerConfigurationResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCameraConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraConfigurationResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraConfigurationResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateCameraConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCameraConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetDefaultCameraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetDefaultCameraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpgradeCameraFirmwareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpgradeCameraFirmwareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFirmwareListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFirmwareListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraFirmwareListResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraFirmwareListResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWirelessStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWirelessStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraSignalStrengthResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraSignalStrengthResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCameraInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CameraInformationResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CameraInformationResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWAPClientsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWAPClientsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WAPClientsListResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WAPClientsListResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.LocationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.LocationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.LocationSimpleResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.LocationSimpleResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.LocationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.LocationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveLocationSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveLocationSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.LocationSimpleResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.LocationSimpleResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CountryListResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CountryListResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountryStateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountryStateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CountryStateListResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CountryStateListResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLogoImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLogoImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContentImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContentImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGPSDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGPSDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.GPSDevicesResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.GPSDevicesResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGPSDeviceLocationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGPSDeviceLocationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.GPSLocationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.GPSLocationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGPSDeviceGeoFenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGPSDeviceGeoFenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEnteredGPSGeofencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEnteredGPSGeofencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.GeofenceListResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.GeofenceListResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendGPSLocateNowMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendGPSLocateNowMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SavePhotoForGPSDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SavePhotoForGPSDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.PhotoURLResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.PhotoURLResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveGPSDeviceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveGPSDeviceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.WebMethodResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.WebMethodResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestTWMSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestTWMSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.GPSPopupURLResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.GPSPopupURLResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateSwitchIconCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateSwitchIconCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.UpdateSwitchIconResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.UpdateSwitchIconResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateThermostatScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateThermostatScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.UpdateThermostatScheduleResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.UpdateThermostatScheduleResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetThermostatScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetThermostatScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ThermostatScheduleResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ThermostatScheduleResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteASceneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteASceneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ExecuteASceneResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ExecuteASceneResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateEditASceneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateEditASceneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.CreateEditASceneResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.CreateEditASceneResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteASceneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteASceneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SceneDeletionResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SceneDeletionResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetASceneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetASceneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SceneDataResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SceneDataResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSceneListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSceneListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.SceneListInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.SceneListInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAutomationDeviceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAutomationDeviceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.AutomationDataResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.AutomationDataResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAutomationDeviceStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAutomationDeviceStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.AutomationDataResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.AutomationDataResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControlALockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ControlALockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.LockControlDataResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.LockControlDataResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControlAThermostatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ControlAThermostatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TotalConnect.TotalConnectService.ThermostatControlDataResults Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TotalConnect.TotalConnectService.ThermostatControlDataResults)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class svcTC2APISoapClient : System.ServiceModel.ClientBase<TotalConnect.TotalConnectService.svcTC2APISoap>, TotalConnect.TotalConnectService.svcTC2APISoap {
        
        private BeginOperationDelegate onBeginControlASwitchDelegate;
        
        private EndOperationDelegate onEndControlASwitchDelegate;
        
        private System.Threading.SendOrPostCallback onControlASwitchCompletedDelegate;
        
        private BeginOperationDelegate onBeginRunAutomationSynchronizationDelegate;
        
        private EndOperationDelegate onEndRunAutomationSynchronizationDelegate;
        
        private System.Threading.SendOrPostCallback onRunAutomationSynchronizationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSynchronizeSecurityPanelDelegate;
        
        private EndOperationDelegate onEndSynchronizeSecurityPanelDelegate;
        
        private System.Threading.SendOrPostCallback onSynchronizeSecurityPanelCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectPanelDelegate;
        
        private EndOperationDelegate onEndDisconnectPanelDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectPanelCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateEmailAddressInSessionDelegate;
        
        private EndOperationDelegate onEndValidateEmailAddressInSessionDelegate;
        
        private System.Threading.SendOrPostCallback onValidateEmailAddressInSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateEmailAddressDelegate;
        
        private EndOperationDelegate onEndValidateEmailAddressDelegate;
        
        private System.Threading.SendOrPostCallback onValidateEmailAddressCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendEmailValidationDetailsDelegate;
        
        private EndOperationDelegate onEndSendEmailValidationDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailValidationDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelMetaDataAndFullStatusDelegate;
        
        private EndOperationDelegate onEndGetPanelMetaDataAndFullStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelMetaDataAndFullStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelMetaDataAndFullStatusExDelegate;
        
        private EndOperationDelegate onEndGetPanelMetaDataAndFullStatusExDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelMetaDataAndFullStatusExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelFullStatusDelegate;
        
        private EndOperationDelegate onEndGetPanelFullStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelFullStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelFullStatusByDeviceIDDelegate;
        
        private EndOperationDelegate onEndGetPanelFullStatusByDeviceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelFullStatusByDeviceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelFullStatusExDelegate;
        
        private EndOperationDelegate onEndGetPanelFullStatusExDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelFullStatusExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelFullStatusByDeviceIDExDelegate;
        
        private EndOperationDelegate onEndGetPanelFullStatusByDeviceIDExDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelFullStatusByDeviceIDExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetZonesListInStateDelegate;
        
        private EndOperationDelegate onEndGetZonesListInStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetZonesListInStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelMetaDataAndFullStatusByDeviceIDDelegate;
        
        private EndOperationDelegate onEndGetPanelMetaDataAndFullStatusByDeviceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelMetaDataAndFullStatusByDeviceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPanelMetaDataAndFullStatusByDeviceIDExDelegate;
        
        private EndOperationDelegate onEndGetPanelMetaDataAndFullStatusByDeviceIDExDelegate;
        
        private System.Threading.SendOrPostCallback onGetPanelMetaDataAndFullStatusByDeviceIDExCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportSecurityInformationDelegate;
        
        private EndOperationDelegate onEndImportSecurityInformationDelegate;
        
        private System.Threading.SendOrPostCallback onImportSecurityInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginBypassDelegate;
        
        private EndOperationDelegate onEndBypassDelegate;
        
        private System.Threading.SendOrPostCallback onBypassCompletedDelegate;
        
        private BeginOperationDelegate onBeginArmSecuritySystemDelegate;
        
        private EndOperationDelegate onEndArmSecuritySystemDelegate;
        
        private System.Threading.SendOrPostCallback onArmSecuritySystemCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisarmSecuritySystemDelegate;
        
        private EndOperationDelegate onEndDisarmSecuritySystemDelegate;
        
        private System.Threading.SendOrPostCallback onDisarmSecuritySystemCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadConsoleDisplayDelegate;
        
        private EndOperationDelegate onEndReadConsoleDisplayDelegate;
        
        private System.Threading.SendOrPostCallback onReadConsoleDisplayCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnectToPanelDelegate;
        
        private EndOperationDelegate onEndConnectToPanelDelegate;
        
        private System.Threading.SendOrPostCallback onConnectToPanelCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendKeyDelegate;
        
        private EndOperationDelegate onEndSendKeyDelegate;
        
        private System.Threading.SendOrPostCallback onSendKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOverrideSecurityPanelSessionDelegate;
        
        private EndOperationDelegate onEndOverrideSecurityPanelSessionDelegate;
        
        private System.Threading.SendOrPostCallback onOverrideSecurityPanelSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckSecurityPanelLastCommandStateDelegate;
        
        private EndOperationDelegate onEndCheckSecurityPanelLastCommandStateDelegate;
        
        private System.Threading.SendOrPostCallback onCheckSecurityPanelLastCommandStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContentConfigurationDelegate;
        
        private EndOperationDelegate onEndGetContentConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetContentConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveContentConfigurationDelegate;
        
        private EndOperationDelegate onEndSaveContentConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onSaveContentConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSlideShowPhotosDelegate;
        
        private EndOperationDelegate onEndGetSlideShowPhotosDelegate;
        
        private System.Threading.SendOrPostCallback onGetSlideShowPhotosCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSlideShowPhotoDelegate;
        
        private EndOperationDelegate onEndAddSlideShowPhotoDelegate;
        
        private System.Threading.SendOrPostCallback onAddSlideShowPhotoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSlideShowPhotoDelegate;
        
        private EndOperationDelegate onEndDeleteSlideShowPhotoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSlideShowPhotoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentWeatherDelegate;
        
        private EndOperationDelegate onEndGetCurrentWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetForecastWeatherDelegate;
        
        private EndOperationDelegate onEndGetForecastWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetForecastWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDealerMessagesDelegate;
        
        private EndOperationDelegate onEndGetDealerMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDealerMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDealerMessageReadStateDelegate;
        
        private EndOperationDelegate onEndUpdateDealerMessageReadStateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDealerMessageReadStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsCameraAvailableDelegate;
        
        private EndOperationDelegate onEndIsCameraAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsCameraAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraStateDelegate;
        
        private EndOperationDelegate onEndGetCameraStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraIOStateDelegate;
        
        private EndOperationDelegate onEndGetCameraIOStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraIOStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraPositionDelegate;
        
        private EndOperationDelegate onEndGetCameraPositionDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraPositionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGotoPresetDelegate;
        
        private EndOperationDelegate onEndGotoPresetDelegate;
        
        private System.Threading.SendOrPostCallback onGotoPresetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStorePresetDelegate;
        
        private EndOperationDelegate onEndStorePresetDelegate;
        
        private System.Threading.SendOrPostCallback onStorePresetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveCameraDelegate;
        
        private EndOperationDelegate onEndMoveCameraDelegate;
        
        private System.Threading.SendOrPostCallback onMoveCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginDirectPanTiltDelegate;
        
        private EndOperationDelegate onEndDirectPanTiltDelegate;
        
        private System.Threading.SendOrPostCallback onDirectPanTiltCompletedDelegate;
        
        private BeginOperationDelegate onBeginWLLED_ControlDelegate;
        
        private EndOperationDelegate onEndWLLED_ControlDelegate;
        
        private System.Threading.SendOrPostCallback onWLLED_ControlCompletedDelegate;
        
        private BeginOperationDelegate onBeginOutput_ControlDelegate;
        
        private EndOperationDelegate onEndOutput_ControlDelegate;
        
        private System.Threading.SendOrPostCallback onOutput_ControlCompletedDelegate;
        
        private BeginOperationDelegate onBeginTriggerVideoCaptureDelegate;
        
        private EndOperationDelegate onEndTriggerVideoCaptureDelegate;
        
        private System.Threading.SendOrPostCallback onTriggerVideoCaptureCompletedDelegate;
        
        private BeginOperationDelegate onBeginConfigStreamModeDelegate;
        
        private EndOperationDelegate onEndConfigStreamModeDelegate;
        
        private System.Threading.SendOrPostCallback onConfigStreamModeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationCameraListDelegate;
        
        private EndOperationDelegate onEndGetLocationCameraListDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationCameraListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeZonesDelegate;
        
        private EndOperationDelegate onEndGetTimeZonesDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeZonesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVideoFileURLsDelegate;
        
        private EndOperationDelegate onEndGetVideoFileURLsDelegate;
        
        private System.Threading.SendOrPostCallback onGetVideoFileURLsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventNotesDelegate;
        
        private EndOperationDelegate onEndGetEventNotesDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventNotesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventsDelegate;
        
        private EndOperationDelegate onEndGetEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventTypeFilterDelegate;
        
        private EndOperationDelegate onEndGetEventTypeFilterDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventTypeFilterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLiveEventsDelegate;
        
        private EndOperationDelegate onEndGetLiveEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLiveEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateEventNotesDelegate;
        
        private EndOperationDelegate onEndUpdateEventNotesDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateEventNotesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateEventRecordHideStateDelegate;
        
        private EndOperationDelegate onEndUpdateEventRecordHideStateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateEventRecordHideStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateEventRecordLockStateDelegate;
        
        private EndOperationDelegate onEndUpdateEventRecordLockStateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateEventRecordLockStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoteAuthenticateUserLoginDelegate;
        
        private EndOperationDelegate onEndRemoteAuthenticateUserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onRemoteAuthenticateUserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateUserLoginDelegate;
        
        private EndOperationDelegate onEndAuthenticateUserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateUserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateGUIDLoginDelegate;
        
        private EndOperationDelegate onEndAuthenticateGUIDLoginDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateGUIDLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionDetailsDelegate;
        
        private EndOperationDelegate onEndGetSessionDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginKeepAliveDelegate;
        
        private EndOperationDelegate onEndKeepAliveDelegate;
        
        private System.Threading.SendOrPostCallback onKeepAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginAnythingChangedDelegate;
        
        private EndOperationDelegate onEndAnythingChangedDelegate;
        
        private System.Threading.SendOrPostCallback onAnythingChangedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInterfaceSchemaDetailsDelegate;
        
        private EndOperationDelegate onEndGetInterfaceSchemaDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetInterfaceSchemaDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInterfaceSchemaDetailsExDelegate;
        
        private EndOperationDelegate onEndGetInterfaceSchemaDetailsExDelegate;
        
        private System.Threading.SendOrPostCallback onGetInterfaceSchemaDetailsExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserInfoDelegate;
        
        private EndOperationDelegate onEndDeleteUserInfoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisableEnableUserDelegate;
        
        private EndOperationDelegate onEndDisableEnableUserDelegate;
        
        private System.Threading.SendOrPostCallback onDisableEnableUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateEulaDelegate;
        
        private EndOperationDelegate onEndUpdateEulaDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateEulaCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserInfoDelegate;
        
        private EndOperationDelegate onEndGetUserInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisableEnableUserExDelegate;
        
        private EndOperationDelegate onEndDisableEnableUserExDelegate;
        
        private System.Threading.SendOrPostCallback onDisableEnableUserExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDetailsDelegate;
        
        private EndOperationDelegate onEndGetUserDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUserDelegate;
        
        private EndOperationDelegate onEndSaveUserDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersExDelegate;
        
        private EndOperationDelegate onEndGetUsersExDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersExCompletedDelegate;
        
        private BeginOperationDelegate onBeginSynchronizePanelUserDelegate;
        
        private EndOperationDelegate onEndSynchronizePanelUserDelegate;
        
        private System.Threading.SendOrPostCallback onSynchronizePanelUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSMSEmailCarriersDelegate;
        
        private EndOperationDelegate onEndGetSMSEmailCarriersDelegate;
        
        private System.Threading.SendOrPostCallback onGetSMSEmailCarriersCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsUserNameValidDelegate;
        
        private EndOperationDelegate onEndIsUserNameValidDelegate;
        
        private System.Threading.SendOrPostCallback onIsUserNameValidCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCreateUserInfoDelegate;
        
        private EndOperationDelegate onEndSaveCreateUserInfoDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCreateUserInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUserClientPreferencesDelegate;
        
        private EndOperationDelegate onEndSaveUserClientPreferencesDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserClientPreferencesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventMetaDataExDelegate;
        
        private EndOperationDelegate onEndGetEventMetaDataExDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventMetaDataExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConfiguredEventsDelegate;
        
        private EndOperationDelegate onEndGetConfiguredEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfiguredEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConfiguredEventsExDelegate;
        
        private EndOperationDelegate onEndGetConfiguredEventsExDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfiguredEventsExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventSummaryDelegate;
        
        private EndOperationDelegate onEndGetEventSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransactNotificationListEventsExDelegate;
        
        private EndOperationDelegate onEndTransactNotificationListEventsExDelegate;
        
        private System.Threading.SendOrPostCallback onTransactNotificationListEventsExCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransactNotificationListEventsDelegate;
        
        private EndOperationDelegate onEndTransactNotificationListEventsDelegate;
        
        private System.Threading.SendOrPostCallback onTransactNotificationListEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllNotificationConditionalStatesDelegate;
        
        private EndOperationDelegate onEndGetAllNotificationConditionalStatesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllNotificationConditionalStatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllNotificationSchedulesDelegate;
        
        private EndOperationDelegate onEndGetAllNotificationSchedulesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllNotificationSchedulesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransactNotificationSchedulesDelegate;
        
        private EndOperationDelegate onEndTransactNotificationSchedulesDelegate;
        
        private System.Threading.SendOrPostCallback onTransactNotificationSchedulesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllNotificationListsDelegate;
        
        private EndOperationDelegate onEndGetAllNotificationListsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllNotificationListsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransactNotificationListsDelegate;
        
        private EndOperationDelegate onEndTransactNotificationListsDelegate;
        
        private System.Threading.SendOrPostCallback onTransactNotificationListsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendTestNotificationDelegate;
        
        private EndOperationDelegate onEndSendTestNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onSendTestNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventMetaDataDelegate;
        
        private EndOperationDelegate onEndGetEventMetaDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventMetaDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMediaServerConfigurationDelegate;
        
        private EndOperationDelegate onEndGetMediaServerConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetMediaServerConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraConfigurationDelegate;
        
        private EndOperationDelegate onEndGetCameraConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCameraConfigurationDelegate;
        
        private EndOperationDelegate onEndUpdateCameraConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCameraConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetDefaultCameraDelegate;
        
        private EndOperationDelegate onEndSetDefaultCameraDelegate;
        
        private System.Threading.SendOrPostCallback onSetDefaultCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpgradeCameraFirmwareDelegate;
        
        private EndOperationDelegate onEndUpgradeCameraFirmwareDelegate;
        
        private System.Threading.SendOrPostCallback onUpgradeCameraFirmwareCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFirmwareListDelegate;
        
        private EndOperationDelegate onEndGetFirmwareListDelegate;
        
        private System.Threading.SendOrPostCallback onGetFirmwareListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWirelessStatusDelegate;
        
        private EndOperationDelegate onEndGetWirelessStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetWirelessStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraInformationDelegate;
        
        private EndOperationDelegate onEndGetCameraInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWAPClientsInfoDelegate;
        
        private EndOperationDelegate onEndGetWAPClientsInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetWAPClientsInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationDelegate;
        
        private EndOperationDelegate onEndGetLocationDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationSimpleDelegate;
        
        private EndOperationDelegate onEndGetLocationSimpleDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationSimpleCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveLocationDelegate;
        
        private EndOperationDelegate onEndSaveLocationDelegate;
        
        private System.Threading.SendOrPostCallback onSaveLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveLocationSimpleDelegate;
        
        private EndOperationDelegate onEndSaveLocationSimpleDelegate;
        
        private System.Threading.SendOrPostCallback onSaveLocationSimpleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountryListDelegate;
        
        private EndOperationDelegate onEndGetCountryListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountryListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountryStateListDelegate;
        
        private EndOperationDelegate onEndGetCountryStateListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountryStateListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImageDelegate;
        
        private EndOperationDelegate onEndGetImageDelegate;
        
        private System.Threading.SendOrPostCallback onGetImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLogoImageDelegate;
        
        private EndOperationDelegate onEndGetLogoImageDelegate;
        
        private System.Threading.SendOrPostCallback onGetLogoImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContentImageDelegate;
        
        private EndOperationDelegate onEndGetContentImageDelegate;
        
        private System.Threading.SendOrPostCallback onGetContentImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginServiceVersionDelegate;
        
        private EndOperationDelegate onEndServiceVersionDelegate;
        
        private System.Threading.SendOrPostCallback onServiceVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGPSDevicesDelegate;
        
        private EndOperationDelegate onEndGetGPSDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetGPSDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGPSDeviceLocationDataDelegate;
        
        private EndOperationDelegate onEndGetGPSDeviceLocationDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetGPSDeviceLocationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGPSDeviceGeoFenceDelegate;
        
        private EndOperationDelegate onEndGetGPSDeviceGeoFenceDelegate;
        
        private System.Threading.SendOrPostCallback onGetGPSDeviceGeoFenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEnteredGPSGeofencesDelegate;
        
        private EndOperationDelegate onEndGetEnteredGPSGeofencesDelegate;
        
        private System.Threading.SendOrPostCallback onGetEnteredGPSGeofencesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendGPSLocateNowMessageDelegate;
        
        private EndOperationDelegate onEndSendGPSLocateNowMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendGPSLocateNowMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSavePhotoForGPSDeviceDelegate;
        
        private EndOperationDelegate onEndSavePhotoForGPSDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSavePhotoForGPSDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveGPSDeviceDataDelegate;
        
        private EndOperationDelegate onEndSaveGPSDeviceDataDelegate;
        
        private System.Threading.SendOrPostCallback onSaveGPSDeviceDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestTWMSessionDelegate;
        
        private EndOperationDelegate onEndRequestTWMSessionDelegate;
        
        private System.Threading.SendOrPostCallback onRequestTWMSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSwitchIconDelegate;
        
        private EndOperationDelegate onEndUpdateSwitchIconDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSwitchIconCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateThermostatScheduleDelegate;
        
        private EndOperationDelegate onEndUpdateThermostatScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateThermostatScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetThermostatScheduleDelegate;
        
        private EndOperationDelegate onEndGetThermostatScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onGetThermostatScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteASceneDelegate;
        
        private EndOperationDelegate onEndExecuteASceneDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteASceneCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateEditASceneDelegate;
        
        private EndOperationDelegate onEndCreateEditASceneDelegate;
        
        private System.Threading.SendOrPostCallback onCreateEditASceneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteASceneDelegate;
        
        private EndOperationDelegate onEndDeleteASceneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteASceneCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetASceneDelegate;
        
        private EndOperationDelegate onEndGetASceneDelegate;
        
        private System.Threading.SendOrPostCallback onGetASceneCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSceneListDelegate;
        
        private EndOperationDelegate onEndGetSceneListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSceneListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAutomationDeviceStatusDelegate;
        
        private EndOperationDelegate onEndGetAutomationDeviceStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetAutomationDeviceStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAutomationDeviceStatusExDelegate;
        
        private EndOperationDelegate onEndGetAutomationDeviceStatusExDelegate;
        
        private System.Threading.SendOrPostCallback onGetAutomationDeviceStatusExCompletedDelegate;
        
        private BeginOperationDelegate onBeginControlALockDelegate;
        
        private EndOperationDelegate onEndControlALockDelegate;
        
        private System.Threading.SendOrPostCallback onControlALockCompletedDelegate;
        
        private BeginOperationDelegate onBeginControlAThermostatDelegate;
        
        private EndOperationDelegate onEndControlAThermostatDelegate;
        
        private System.Threading.SendOrPostCallback onControlAThermostatCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public svcTC2APISoapClient() {
        }
        
        public svcTC2APISoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public svcTC2APISoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcTC2APISoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcTC2APISoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ControlASwitchCompletedEventArgs> ControlASwitchCompleted;
        
        public event System.EventHandler<RunAutomationSynchronizationCompletedEventArgs> RunAutomationSynchronizationCompleted;
        
        public event System.EventHandler<SynchronizeSecurityPanelCompletedEventArgs> SynchronizeSecurityPanelCompleted;
        
        public event System.EventHandler<DisconnectPanelCompletedEventArgs> DisconnectPanelCompleted;
        
        public event System.EventHandler<ValidateEmailAddressInSessionCompletedEventArgs> ValidateEmailAddressInSessionCompleted;
        
        public event System.EventHandler<ValidateEmailAddressCompletedEventArgs> ValidateEmailAddressCompleted;
        
        public event System.EventHandler<SendEmailValidationDetailsCompletedEventArgs> SendEmailValidationDetailsCompleted;
        
        public event System.EventHandler<GetPanelMetaDataAndFullStatusCompletedEventArgs> GetPanelMetaDataAndFullStatusCompleted;
        
        public event System.EventHandler<GetPanelMetaDataAndFullStatusExCompletedEventArgs> GetPanelMetaDataAndFullStatusExCompleted;
        
        public event System.EventHandler<GetPanelFullStatusCompletedEventArgs> GetPanelFullStatusCompleted;
        
        public event System.EventHandler<GetPanelFullStatusByDeviceIDCompletedEventArgs> GetPanelFullStatusByDeviceIDCompleted;
        
        public event System.EventHandler<GetPanelFullStatusExCompletedEventArgs> GetPanelFullStatusExCompleted;
        
        public event System.EventHandler<GetPanelFullStatusByDeviceIDExCompletedEventArgs> GetPanelFullStatusByDeviceIDExCompleted;
        
        public event System.EventHandler<GetZonesListInStateCompletedEventArgs> GetZonesListInStateCompleted;
        
        public event System.EventHandler<GetPanelMetaDataAndFullStatusByDeviceIDCompletedEventArgs> GetPanelMetaDataAndFullStatusByDeviceIDCompleted;
        
        public event System.EventHandler<GetPanelMetaDataAndFullStatusByDeviceIDExCompletedEventArgs> GetPanelMetaDataAndFullStatusByDeviceIDExCompleted;
        
        public event System.EventHandler<ImportSecurityInformationCompletedEventArgs> ImportSecurityInformationCompleted;
        
        public event System.EventHandler<BypassCompletedEventArgs> BypassCompleted;
        
        public event System.EventHandler<ArmSecuritySystemCompletedEventArgs> ArmSecuritySystemCompleted;
        
        public event System.EventHandler<DisarmSecuritySystemCompletedEventArgs> DisarmSecuritySystemCompleted;
        
        public event System.EventHandler<ReadConsoleDisplayCompletedEventArgs> ReadConsoleDisplayCompleted;
        
        public event System.EventHandler<ConnectToPanelCompletedEventArgs> ConnectToPanelCompleted;
        
        public event System.EventHandler<SendKeyCompletedEventArgs> SendKeyCompleted;
        
        public event System.EventHandler<OverrideSecurityPanelSessionCompletedEventArgs> OverrideSecurityPanelSessionCompleted;
        
        public event System.EventHandler<CheckSecurityPanelLastCommandStateCompletedEventArgs> CheckSecurityPanelLastCommandStateCompleted;
        
        public event System.EventHandler<GetContentConfigurationCompletedEventArgs> GetContentConfigurationCompleted;
        
        public event System.EventHandler<SaveContentConfigurationCompletedEventArgs> SaveContentConfigurationCompleted;
        
        public event System.EventHandler<GetSlideShowPhotosCompletedEventArgs> GetSlideShowPhotosCompleted;
        
        public event System.EventHandler<AddSlideShowPhotoCompletedEventArgs> AddSlideShowPhotoCompleted;
        
        public event System.EventHandler<DeleteSlideShowPhotoCompletedEventArgs> DeleteSlideShowPhotoCompleted;
        
        public event System.EventHandler<GetCurrentWeatherCompletedEventArgs> GetCurrentWeatherCompleted;
        
        public event System.EventHandler<GetForecastWeatherCompletedEventArgs> GetForecastWeatherCompleted;
        
        public event System.EventHandler<GetDealerMessagesCompletedEventArgs> GetDealerMessagesCompleted;
        
        public event System.EventHandler<UpdateDealerMessageReadStateCompletedEventArgs> UpdateDealerMessageReadStateCompleted;
        
        public event System.EventHandler<IsCameraAvailableCompletedEventArgs> IsCameraAvailableCompleted;
        
        public event System.EventHandler<GetCameraStateCompletedEventArgs> GetCameraStateCompleted;
        
        public event System.EventHandler<GetCameraIOStateCompletedEventArgs> GetCameraIOStateCompleted;
        
        public event System.EventHandler<GetCameraPositionCompletedEventArgs> GetCameraPositionCompleted;
        
        public event System.EventHandler<GotoPresetCompletedEventArgs> GotoPresetCompleted;
        
        public event System.EventHandler<StorePresetCompletedEventArgs> StorePresetCompleted;
        
        public event System.EventHandler<MoveCameraCompletedEventArgs> MoveCameraCompleted;
        
        public event System.EventHandler<DirectPanTiltCompletedEventArgs> DirectPanTiltCompleted;
        
        public event System.EventHandler<WLLED_ControlCompletedEventArgs> WLLED_ControlCompleted;
        
        public event System.EventHandler<Output_ControlCompletedEventArgs> Output_ControlCompleted;
        
        public event System.EventHandler<TriggerVideoCaptureCompletedEventArgs> TriggerVideoCaptureCompleted;
        
        public event System.EventHandler<ConfigStreamModeCompletedEventArgs> ConfigStreamModeCompleted;
        
        public event System.EventHandler<GetLocationCameraListCompletedEventArgs> GetLocationCameraListCompleted;
        
        public event System.EventHandler<GetTimeZonesCompletedEventArgs> GetTimeZonesCompleted;
        
        public event System.EventHandler<GetVideoFileURLsCompletedEventArgs> GetVideoFileURLsCompleted;
        
        public event System.EventHandler<GetEventNotesCompletedEventArgs> GetEventNotesCompleted;
        
        public event System.EventHandler<GetEventsCompletedEventArgs> GetEventsCompleted;
        
        public event System.EventHandler<GetEventTypeFilterCompletedEventArgs> GetEventTypeFilterCompleted;
        
        public event System.EventHandler<GetLiveEventsCompletedEventArgs> GetLiveEventsCompleted;
        
        public event System.EventHandler<UpdateEventNotesCompletedEventArgs> UpdateEventNotesCompleted;
        
        public event System.EventHandler<UpdateEventRecordHideStateCompletedEventArgs> UpdateEventRecordHideStateCompleted;
        
        public event System.EventHandler<UpdateEventRecordLockStateCompletedEventArgs> UpdateEventRecordLockStateCompleted;
        
        public event System.EventHandler<RemoteAuthenticateUserLoginCompletedEventArgs> RemoteAuthenticateUserLoginCompleted;
        
        public event System.EventHandler<AuthenticateUserLoginCompletedEventArgs> AuthenticateUserLoginCompleted;
        
        public event System.EventHandler<AuthenticateGUIDLoginCompletedEventArgs> AuthenticateGUIDLoginCompleted;
        
        public event System.EventHandler<GetSessionDetailsCompletedEventArgs> GetSessionDetailsCompleted;
        
        public event System.EventHandler<KeepAliveCompletedEventArgs> KeepAliveCompleted;
        
        public event System.EventHandler<LogoutCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<AnythingChangedCompletedEventArgs> AnythingChangedCompleted;
        
        public event System.EventHandler<GetInterfaceSchemaDetailsCompletedEventArgs> GetInterfaceSchemaDetailsCompleted;
        
        public event System.EventHandler<GetInterfaceSchemaDetailsExCompletedEventArgs> GetInterfaceSchemaDetailsExCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<DeleteUserInfoCompletedEventArgs> DeleteUserInfoCompleted;
        
        public event System.EventHandler<DisableEnableUserCompletedEventArgs> DisableEnableUserCompleted;
        
        public event System.EventHandler<UpdateEulaCompletedEventArgs> UpdateEulaCompleted;
        
        public event System.EventHandler<GetUserInfoCompletedEventArgs> GetUserInfoCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<DisableEnableUserExCompletedEventArgs> DisableEnableUserExCompleted;
        
        public event System.EventHandler<GetUserDetailsCompletedEventArgs> GetUserDetailsCompleted;
        
        public event System.EventHandler<SaveUserCompletedEventArgs> SaveUserCompleted;
        
        public event System.EventHandler<GetUsersExCompletedEventArgs> GetUsersExCompleted;
        
        public event System.EventHandler<SynchronizePanelUserCompletedEventArgs> SynchronizePanelUserCompleted;
        
        public event System.EventHandler<GetSMSEmailCarriersCompletedEventArgs> GetSMSEmailCarriersCompleted;
        
        public event System.EventHandler<IsUserNameValidCompletedEventArgs> IsUserNameValidCompleted;
        
        public event System.EventHandler<SaveCreateUserInfoCompletedEventArgs> SaveCreateUserInfoCompleted;
        
        public event System.EventHandler<SaveUserClientPreferencesCompletedEventArgs> SaveUserClientPreferencesCompleted;
        
        public event System.EventHandler<GetEventMetaDataExCompletedEventArgs> GetEventMetaDataExCompleted;
        
        public event System.EventHandler<GetConfiguredEventsCompletedEventArgs> GetConfiguredEventsCompleted;
        
        public event System.EventHandler<GetConfiguredEventsExCompletedEventArgs> GetConfiguredEventsExCompleted;
        
        public event System.EventHandler<GetEventSummaryCompletedEventArgs> GetEventSummaryCompleted;
        
        public event System.EventHandler<TransactNotificationListEventsExCompletedEventArgs> TransactNotificationListEventsExCompleted;
        
        public event System.EventHandler<TransactNotificationListEventsCompletedEventArgs> TransactNotificationListEventsCompleted;
        
        public event System.EventHandler<GetAllNotificationConditionalStatesCompletedEventArgs> GetAllNotificationConditionalStatesCompleted;
        
        public event System.EventHandler<GetAllNotificationSchedulesCompletedEventArgs> GetAllNotificationSchedulesCompleted;
        
        public event System.EventHandler<TransactNotificationSchedulesCompletedEventArgs> TransactNotificationSchedulesCompleted;
        
        public event System.EventHandler<GetAllNotificationListsCompletedEventArgs> GetAllNotificationListsCompleted;
        
        public event System.EventHandler<TransactNotificationListsCompletedEventArgs> TransactNotificationListsCompleted;
        
        public event System.EventHandler<SendTestNotificationCompletedEventArgs> SendTestNotificationCompleted;
        
        public event System.EventHandler<GetEventMetaDataCompletedEventArgs> GetEventMetaDataCompleted;
        
        public event System.EventHandler<GetMediaServerConfigurationCompletedEventArgs> GetMediaServerConfigurationCompleted;
        
        public event System.EventHandler<GetCameraConfigurationCompletedEventArgs> GetCameraConfigurationCompleted;
        
        public event System.EventHandler<UpdateCameraConfigurationCompletedEventArgs> UpdateCameraConfigurationCompleted;
        
        public event System.EventHandler<SetDefaultCameraCompletedEventArgs> SetDefaultCameraCompleted;
        
        public event System.EventHandler<UpgradeCameraFirmwareCompletedEventArgs> UpgradeCameraFirmwareCompleted;
        
        public event System.EventHandler<GetFirmwareListCompletedEventArgs> GetFirmwareListCompleted;
        
        public event System.EventHandler<GetWirelessStatusCompletedEventArgs> GetWirelessStatusCompleted;
        
        public event System.EventHandler<GetCameraInformationCompletedEventArgs> GetCameraInformationCompleted;
        
        public event System.EventHandler<GetWAPClientsInfoCompletedEventArgs> GetWAPClientsInfoCompleted;
        
        public event System.EventHandler<GetLocationCompletedEventArgs> GetLocationCompleted;
        
        public event System.EventHandler<GetLocationSimpleCompletedEventArgs> GetLocationSimpleCompleted;
        
        public event System.EventHandler<SaveLocationCompletedEventArgs> SaveLocationCompleted;
        
        public event System.EventHandler<SaveLocationSimpleCompletedEventArgs> SaveLocationSimpleCompleted;
        
        public event System.EventHandler<GetCountryListCompletedEventArgs> GetCountryListCompleted;
        
        public event System.EventHandler<GetCountryStateListCompletedEventArgs> GetCountryStateListCompleted;
        
        public event System.EventHandler<GetImageCompletedEventArgs> GetImageCompleted;
        
        public event System.EventHandler<GetLogoImageCompletedEventArgs> GetLogoImageCompleted;
        
        public event System.EventHandler<GetContentImageCompletedEventArgs> GetContentImageCompleted;
        
        public event System.EventHandler<ServiceVersionCompletedEventArgs> ServiceVersionCompleted;
        
        public event System.EventHandler<GetGPSDevicesCompletedEventArgs> GetGPSDevicesCompleted;
        
        public event System.EventHandler<GetGPSDeviceLocationDataCompletedEventArgs> GetGPSDeviceLocationDataCompleted;
        
        public event System.EventHandler<GetGPSDeviceGeoFenceCompletedEventArgs> GetGPSDeviceGeoFenceCompleted;
        
        public event System.EventHandler<GetEnteredGPSGeofencesCompletedEventArgs> GetEnteredGPSGeofencesCompleted;
        
        public event System.EventHandler<SendGPSLocateNowMessageCompletedEventArgs> SendGPSLocateNowMessageCompleted;
        
        public event System.EventHandler<SavePhotoForGPSDeviceCompletedEventArgs> SavePhotoForGPSDeviceCompleted;
        
        public event System.EventHandler<SaveGPSDeviceDataCompletedEventArgs> SaveGPSDeviceDataCompleted;
        
        public event System.EventHandler<RequestTWMSessionCompletedEventArgs> RequestTWMSessionCompleted;
        
        public event System.EventHandler<UpdateSwitchIconCompletedEventArgs> UpdateSwitchIconCompleted;
        
        public event System.EventHandler<UpdateThermostatScheduleCompletedEventArgs> UpdateThermostatScheduleCompleted;
        
        public event System.EventHandler<GetThermostatScheduleCompletedEventArgs> GetThermostatScheduleCompleted;
        
        public event System.EventHandler<ExecuteASceneCompletedEventArgs> ExecuteASceneCompleted;
        
        public event System.EventHandler<CreateEditASceneCompletedEventArgs> CreateEditASceneCompleted;
        
        public event System.EventHandler<DeleteASceneCompletedEventArgs> DeleteASceneCompleted;
        
        public event System.EventHandler<GetASceneCompletedEventArgs> GetASceneCompleted;
        
        public event System.EventHandler<GetSceneListCompletedEventArgs> GetSceneListCompleted;
        
        public event System.EventHandler<GetAutomationDeviceStatusCompletedEventArgs> GetAutomationDeviceStatusCompleted;
        
        public event System.EventHandler<GetAutomationDeviceStatusExCompletedEventArgs> GetAutomationDeviceStatusExCompleted;
        
        public event System.EventHandler<ControlALockCompletedEventArgs> ControlALockCompleted;
        
        public event System.EventHandler<ControlAThermostatCompletedEventArgs> ControlAThermostatCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginControlASwitch(string SessionID, long DeviceID, long SwitchID, int SwitchAction, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginControlASwitch(SessionID, DeviceID, SwitchID, SwitchAction, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SwitchControlDataResults TotalConnect.TotalConnectService.svcTC2APISoap.EndControlASwitch(System.IAsyncResult result) {
            return base.Channel.EndControlASwitch(result);
        }
        
        private System.IAsyncResult OnBeginControlASwitch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long SwitchID = ((long)(inValues[2]));
            int SwitchAction = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginControlASwitch(SessionID, DeviceID, SwitchID, SwitchAction, callback, asyncState);
        }
        
        private object[] OnEndControlASwitch(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SwitchControlDataResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndControlASwitch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnControlASwitchCompleted(object state) {
            if ((this.ControlASwitchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ControlASwitchCompleted(this, new ControlASwitchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ControlASwitchAsync(string SessionID, long DeviceID, long SwitchID, int SwitchAction) {
            this.ControlASwitchAsync(SessionID, DeviceID, SwitchID, SwitchAction, null);
        }
        
        public void ControlASwitchAsync(string SessionID, long DeviceID, long SwitchID, int SwitchAction, object userState) {
            if ((this.onBeginControlASwitchDelegate == null)) {
                this.onBeginControlASwitchDelegate = new BeginOperationDelegate(this.OnBeginControlASwitch);
            }
            if ((this.onEndControlASwitchDelegate == null)) {
                this.onEndControlASwitchDelegate = new EndOperationDelegate(this.OnEndControlASwitch);
            }
            if ((this.onControlASwitchCompletedDelegate == null)) {
                this.onControlASwitchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnControlASwitchCompleted);
            }
            base.InvokeAsync(this.onBeginControlASwitchDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        SwitchID,
                        SwitchAction}, this.onEndControlASwitchDelegate, this.onControlASwitchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginRunAutomationSynchronization(string SessionID, long LocationID, long DeviceID, int UserCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRunAutomationSynchronization(SessionID, LocationID, DeviceID, UserCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AutomationSyncResults TotalConnect.TotalConnectService.svcTC2APISoap.EndRunAutomationSynchronization(System.IAsyncResult result) {
            return base.Channel.EndRunAutomationSynchronization(result);
        }
        
        private System.IAsyncResult OnBeginRunAutomationSynchronization(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            int UserCode = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginRunAutomationSynchronization(SessionID, LocationID, DeviceID, UserCode, callback, asyncState);
        }
        
        private object[] OnEndRunAutomationSynchronization(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AutomationSyncResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndRunAutomationSynchronization(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRunAutomationSynchronizationCompleted(object state) {
            if ((this.RunAutomationSynchronizationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RunAutomationSynchronizationCompleted(this, new RunAutomationSynchronizationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RunAutomationSynchronizationAsync(string SessionID, long LocationID, long DeviceID, int UserCode) {
            this.RunAutomationSynchronizationAsync(SessionID, LocationID, DeviceID, UserCode, null);
        }
        
        public void RunAutomationSynchronizationAsync(string SessionID, long LocationID, long DeviceID, int UserCode, object userState) {
            if ((this.onBeginRunAutomationSynchronizationDelegate == null)) {
                this.onBeginRunAutomationSynchronizationDelegate = new BeginOperationDelegate(this.OnBeginRunAutomationSynchronization);
            }
            if ((this.onEndRunAutomationSynchronizationDelegate == null)) {
                this.onEndRunAutomationSynchronizationDelegate = new EndOperationDelegate(this.OnEndRunAutomationSynchronization);
            }
            if ((this.onRunAutomationSynchronizationCompletedDelegate == null)) {
                this.onRunAutomationSynchronizationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRunAutomationSynchronizationCompleted);
            }
            base.InvokeAsync(this.onBeginRunAutomationSynchronizationDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID,
                        UserCode}, this.onEndRunAutomationSynchronizationDelegate, this.onRunAutomationSynchronizationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSynchronizeSecurityPanel(string SessionID, string InstallerCode, string UserCode, long LocationID, bool ForceImport, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSynchronizeSecurityPanel(SessionID, InstallerCode, UserCode, LocationID, ForceImport, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AutomationSyncResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSynchronizeSecurityPanel(System.IAsyncResult result) {
            return base.Channel.EndSynchronizeSecurityPanel(result);
        }
        
        private System.IAsyncResult OnBeginSynchronizeSecurityPanel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string InstallerCode = ((string)(inValues[1]));
            string UserCode = ((string)(inValues[2]));
            long LocationID = ((long)(inValues[3]));
            bool ForceImport = ((bool)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSynchronizeSecurityPanel(SessionID, InstallerCode, UserCode, LocationID, ForceImport, callback, asyncState);
        }
        
        private object[] OnEndSynchronizeSecurityPanel(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AutomationSyncResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSynchronizeSecurityPanel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSynchronizeSecurityPanelCompleted(object state) {
            if ((this.SynchronizeSecurityPanelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SynchronizeSecurityPanelCompleted(this, new SynchronizeSecurityPanelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SynchronizeSecurityPanelAsync(string SessionID, string InstallerCode, string UserCode, long LocationID, bool ForceImport) {
            this.SynchronizeSecurityPanelAsync(SessionID, InstallerCode, UserCode, LocationID, ForceImport, null);
        }
        
        public void SynchronizeSecurityPanelAsync(string SessionID, string InstallerCode, string UserCode, long LocationID, bool ForceImport, object userState) {
            if ((this.onBeginSynchronizeSecurityPanelDelegate == null)) {
                this.onBeginSynchronizeSecurityPanelDelegate = new BeginOperationDelegate(this.OnBeginSynchronizeSecurityPanel);
            }
            if ((this.onEndSynchronizeSecurityPanelDelegate == null)) {
                this.onEndSynchronizeSecurityPanelDelegate = new EndOperationDelegate(this.OnEndSynchronizeSecurityPanel);
            }
            if ((this.onSynchronizeSecurityPanelCompletedDelegate == null)) {
                this.onSynchronizeSecurityPanelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSynchronizeSecurityPanelCompleted);
            }
            base.InvokeAsync(this.onBeginSynchronizeSecurityPanelDelegate, new object[] {
                        SessionID,
                        InstallerCode,
                        UserCode,
                        LocationID,
                        ForceImport}, this.onEndSynchronizeSecurityPanelDelegate, this.onSynchronizeSecurityPanelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDisconnectPanel(string SessionID, long DeviceID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnectPanel(SessionID, DeviceID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDisconnectPanel(System.IAsyncResult result) {
            return base.Channel.EndDisconnectPanel(result);
        }
        
        private System.IAsyncResult OnBeginDisconnectPanel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long LocationID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDisconnectPanel(SessionID, DeviceID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndDisconnectPanel(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDisconnectPanel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisconnectPanelCompleted(object state) {
            if ((this.DisconnectPanelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectPanelCompleted(this, new DisconnectPanelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectPanelAsync(string SessionID, long DeviceID, long LocationID) {
            this.DisconnectPanelAsync(SessionID, DeviceID, LocationID, null);
        }
        
        public void DisconnectPanelAsync(string SessionID, long DeviceID, long LocationID, object userState) {
            if ((this.onBeginDisconnectPanelDelegate == null)) {
                this.onBeginDisconnectPanelDelegate = new BeginOperationDelegate(this.OnBeginDisconnectPanel);
            }
            if ((this.onEndDisconnectPanelDelegate == null)) {
                this.onEndDisconnectPanelDelegate = new EndOperationDelegate(this.OnEndDisconnectPanel);
            }
            if ((this.onDisconnectPanelCompletedDelegate == null)) {
                this.onDisconnectPanelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectPanelCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectPanelDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        LocationID}, this.onEndDisconnectPanelDelegate, this.onDisconnectPanelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginValidateEmailAddressInSession(string SessionId, string EmailAddress, string ValidationKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateEmailAddressInSession(SessionId, EmailAddress, ValidationKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EmailValidationResult TotalConnect.TotalConnectService.svcTC2APISoap.EndValidateEmailAddressInSession(System.IAsyncResult result) {
            return base.Channel.EndValidateEmailAddressInSession(result);
        }
        
        private System.IAsyncResult OnBeginValidateEmailAddressInSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            string EmailAddress = ((string)(inValues[1]));
            string ValidationKey = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginValidateEmailAddressInSession(SessionId, EmailAddress, ValidationKey, callback, asyncState);
        }
        
        private object[] OnEndValidateEmailAddressInSession(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EmailValidationResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndValidateEmailAddressInSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateEmailAddressInSessionCompleted(object state) {
            if ((this.ValidateEmailAddressInSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateEmailAddressInSessionCompleted(this, new ValidateEmailAddressInSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateEmailAddressInSessionAsync(string SessionId, string EmailAddress, string ValidationKey) {
            this.ValidateEmailAddressInSessionAsync(SessionId, EmailAddress, ValidationKey, null);
        }
        
        public void ValidateEmailAddressInSessionAsync(string SessionId, string EmailAddress, string ValidationKey, object userState) {
            if ((this.onBeginValidateEmailAddressInSessionDelegate == null)) {
                this.onBeginValidateEmailAddressInSessionDelegate = new BeginOperationDelegate(this.OnBeginValidateEmailAddressInSession);
            }
            if ((this.onEndValidateEmailAddressInSessionDelegate == null)) {
                this.onEndValidateEmailAddressInSessionDelegate = new EndOperationDelegate(this.OnEndValidateEmailAddressInSession);
            }
            if ((this.onValidateEmailAddressInSessionCompletedDelegate == null)) {
                this.onValidateEmailAddressInSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateEmailAddressInSessionCompleted);
            }
            base.InvokeAsync(this.onBeginValidateEmailAddressInSessionDelegate, new object[] {
                        SessionId,
                        EmailAddress,
                        ValidationKey}, this.onEndValidateEmailAddressInSessionDelegate, this.onValidateEmailAddressInSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginValidateEmailAddress(string UserName, string ValidationKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateEmailAddress(UserName, ValidationKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EmailValidationResult TotalConnect.TotalConnectService.svcTC2APISoap.EndValidateEmailAddress(System.IAsyncResult result) {
            return base.Channel.EndValidateEmailAddress(result);
        }
        
        private System.IAsyncResult OnBeginValidateEmailAddress(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string ValidationKey = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginValidateEmailAddress(UserName, ValidationKey, callback, asyncState);
        }
        
        private object[] OnEndValidateEmailAddress(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EmailValidationResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndValidateEmailAddress(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateEmailAddressCompleted(object state) {
            if ((this.ValidateEmailAddressCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateEmailAddressCompleted(this, new ValidateEmailAddressCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateEmailAddressAsync(string UserName, string ValidationKey) {
            this.ValidateEmailAddressAsync(UserName, ValidationKey, null);
        }
        
        public void ValidateEmailAddressAsync(string UserName, string ValidationKey, object userState) {
            if ((this.onBeginValidateEmailAddressDelegate == null)) {
                this.onBeginValidateEmailAddressDelegate = new BeginOperationDelegate(this.OnBeginValidateEmailAddress);
            }
            if ((this.onEndValidateEmailAddressDelegate == null)) {
                this.onEndValidateEmailAddressDelegate = new EndOperationDelegate(this.OnEndValidateEmailAddress);
            }
            if ((this.onValidateEmailAddressCompletedDelegate == null)) {
                this.onValidateEmailAddressCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateEmailAddressCompleted);
            }
            base.InvokeAsync(this.onBeginValidateEmailAddressDelegate, new object[] {
                        UserName,
                        ValidationKey}, this.onEndValidateEmailAddressDelegate, this.onValidateEmailAddressCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSendEmailValidationDetails(string SessionId, string EmailAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmailValidationDetails(SessionId, EmailAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EmailValidationResult TotalConnect.TotalConnectService.svcTC2APISoap.EndSendEmailValidationDetails(System.IAsyncResult result) {
            return base.Channel.EndSendEmailValidationDetails(result);
        }
        
        private System.IAsyncResult OnBeginSendEmailValidationDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            string EmailAddress = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSendEmailValidationDetails(SessionId, EmailAddress, callback, asyncState);
        }
        
        private object[] OnEndSendEmailValidationDetails(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EmailValidationResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSendEmailValidationDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendEmailValidationDetailsCompleted(object state) {
            if ((this.SendEmailValidationDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailValidationDetailsCompleted(this, new SendEmailValidationDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailValidationDetailsAsync(string SessionId, string EmailAddress) {
            this.SendEmailValidationDetailsAsync(SessionId, EmailAddress, null);
        }
        
        public void SendEmailValidationDetailsAsync(string SessionId, string EmailAddress, object userState) {
            if ((this.onBeginSendEmailValidationDetailsDelegate == null)) {
                this.onBeginSendEmailValidationDetailsDelegate = new BeginOperationDelegate(this.OnBeginSendEmailValidationDetails);
            }
            if ((this.onEndSendEmailValidationDetailsDelegate == null)) {
                this.onEndSendEmailValidationDetailsDelegate = new EndOperationDelegate(this.OnEndSendEmailValidationDetails);
            }
            if ((this.onSendEmailValidationDetailsCompletedDelegate == null)) {
                this.onSendEmailValidationDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailValidationDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailValidationDetailsDelegate, new object[] {
                        SessionId,
                        EmailAddress}, this.onEndSendEmailValidationDetailsDelegate, this.onSendEmailValidationDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelMetaDataAndFullStatus(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelMetaDataAndFullStatus(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelMetaDataAndFullStatus(System.IAsyncResult result) {
            return base.Channel.EndGetPanelMetaDataAndFullStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelMetaDataAndFullStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelMetaDataAndFullStatus(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelMetaDataAndFullStatus(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelMetadataAndStatusResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelMetaDataAndFullStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelMetaDataAndFullStatusCompleted(object state) {
            if ((this.GetPanelMetaDataAndFullStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelMetaDataAndFullStatusCompleted(this, new GetPanelMetaDataAndFullStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelMetaDataAndFullStatusAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelMetaDataAndFullStatusAsync(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelMetaDataAndFullStatusAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelMetaDataAndFullStatusDelegate == null)) {
                this.onBeginGetPanelMetaDataAndFullStatusDelegate = new BeginOperationDelegate(this.OnBeginGetPanelMetaDataAndFullStatus);
            }
            if ((this.onEndGetPanelMetaDataAndFullStatusDelegate == null)) {
                this.onEndGetPanelMetaDataAndFullStatusDelegate = new EndOperationDelegate(this.OnEndGetPanelMetaDataAndFullStatus);
            }
            if ((this.onGetPanelMetaDataAndFullStatusCompletedDelegate == null)) {
                this.onGetPanelMetaDataAndFullStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelMetaDataAndFullStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelMetaDataAndFullStatusDelegate, new object[] {
                        SessionID,
                        LocationID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelMetaDataAndFullStatusDelegate, this.onGetPanelMetaDataAndFullStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelMetaDataAndFullStatusEx(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelMetaDataAndFullStatusEx(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelMetaDataAndFullStatusEx(System.IAsyncResult result) {
            return base.Channel.EndGetPanelMetaDataAndFullStatusEx(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelMetaDataAndFullStatusEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelMetaDataAndFullStatusEx(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelMetaDataAndFullStatusEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelMetaDataAndFullStatusEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelMetaDataAndFullStatusExCompleted(object state) {
            if ((this.GetPanelMetaDataAndFullStatusExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelMetaDataAndFullStatusExCompleted(this, new GetPanelMetaDataAndFullStatusExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelMetaDataAndFullStatusExAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelMetaDataAndFullStatusExAsync(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelMetaDataAndFullStatusExAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelMetaDataAndFullStatusExDelegate == null)) {
                this.onBeginGetPanelMetaDataAndFullStatusExDelegate = new BeginOperationDelegate(this.OnBeginGetPanelMetaDataAndFullStatusEx);
            }
            if ((this.onEndGetPanelMetaDataAndFullStatusExDelegate == null)) {
                this.onEndGetPanelMetaDataAndFullStatusExDelegate = new EndOperationDelegate(this.OnEndGetPanelMetaDataAndFullStatusEx);
            }
            if ((this.onGetPanelMetaDataAndFullStatusExCompletedDelegate == null)) {
                this.onGetPanelMetaDataAndFullStatusExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelMetaDataAndFullStatusExCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelMetaDataAndFullStatusExDelegate, new object[] {
                        SessionID,
                        LocationID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelMetaDataAndFullStatusExDelegate, this.onGetPanelMetaDataAndFullStatusExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelFullStatus(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelFullStatus(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelStatusResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelFullStatus(System.IAsyncResult result) {
            return base.Channel.EndGetPanelFullStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelFullStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelFullStatus(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelFullStatus(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelStatusResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelFullStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelFullStatusCompleted(object state) {
            if ((this.GetPanelFullStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelFullStatusCompleted(this, new GetPanelFullStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelFullStatusAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelFullStatusAsync(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelFullStatusAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelFullStatusDelegate == null)) {
                this.onBeginGetPanelFullStatusDelegate = new BeginOperationDelegate(this.OnBeginGetPanelFullStatus);
            }
            if ((this.onEndGetPanelFullStatusDelegate == null)) {
                this.onEndGetPanelFullStatusDelegate = new EndOperationDelegate(this.OnEndGetPanelFullStatus);
            }
            if ((this.onGetPanelFullStatusCompletedDelegate == null)) {
                this.onGetPanelFullStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelFullStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelFullStatusDelegate, new object[] {
                        SessionID,
                        LocationID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelFullStatusDelegate, this.onGetPanelFullStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelFullStatusByDeviceID(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelFullStatusByDeviceID(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelStatusResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelFullStatusByDeviceID(System.IAsyncResult result) {
            return base.Channel.EndGetPanelFullStatusByDeviceID(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelFullStatusByDeviceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelFullStatusByDeviceID(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelFullStatusByDeviceID(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelStatusResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelFullStatusByDeviceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelFullStatusByDeviceIDCompleted(object state) {
            if ((this.GetPanelFullStatusByDeviceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelFullStatusByDeviceIDCompleted(this, new GetPanelFullStatusByDeviceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelFullStatusByDeviceIDAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelFullStatusByDeviceIDAsync(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelFullStatusByDeviceIDAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelFullStatusByDeviceIDDelegate == null)) {
                this.onBeginGetPanelFullStatusByDeviceIDDelegate = new BeginOperationDelegate(this.OnBeginGetPanelFullStatusByDeviceID);
            }
            if ((this.onEndGetPanelFullStatusByDeviceIDDelegate == null)) {
                this.onEndGetPanelFullStatusByDeviceIDDelegate = new EndOperationDelegate(this.OnEndGetPanelFullStatusByDeviceID);
            }
            if ((this.onGetPanelFullStatusByDeviceIDCompletedDelegate == null)) {
                this.onGetPanelFullStatusByDeviceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelFullStatusByDeviceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelFullStatusByDeviceIDDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelFullStatusByDeviceIDDelegate, this.onGetPanelFullStatusByDeviceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelFullStatusEx(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelFullStatusEx(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelStatusResultsEx TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelFullStatusEx(System.IAsyncResult result) {
            return base.Channel.EndGetPanelFullStatusEx(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelFullStatusEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelFullStatusEx(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelFullStatusEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelStatusResultsEx retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelFullStatusEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelFullStatusExCompleted(object state) {
            if ((this.GetPanelFullStatusExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelFullStatusExCompleted(this, new GetPanelFullStatusExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelFullStatusExAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelFullStatusExAsync(SessionID, LocationID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelFullStatusExAsync(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelFullStatusExDelegate == null)) {
                this.onBeginGetPanelFullStatusExDelegate = new BeginOperationDelegate(this.OnBeginGetPanelFullStatusEx);
            }
            if ((this.onEndGetPanelFullStatusExDelegate == null)) {
                this.onEndGetPanelFullStatusExDelegate = new EndOperationDelegate(this.OnEndGetPanelFullStatusEx);
            }
            if ((this.onGetPanelFullStatusExCompletedDelegate == null)) {
                this.onGetPanelFullStatusExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelFullStatusExCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelFullStatusExDelegate, new object[] {
                        SessionID,
                        LocationID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelFullStatusExDelegate, this.onGetPanelFullStatusExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelFullStatusByDeviceIDEx(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelFullStatusByDeviceIDEx(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelStatusResultsEx TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelFullStatusByDeviceIDEx(System.IAsyncResult result) {
            return base.Channel.EndGetPanelFullStatusByDeviceIDEx(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelFullStatusByDeviceIDEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelFullStatusByDeviceIDEx(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelFullStatusByDeviceIDEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelStatusResultsEx retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelFullStatusByDeviceIDEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelFullStatusByDeviceIDExCompleted(object state) {
            if ((this.GetPanelFullStatusByDeviceIDExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelFullStatusByDeviceIDExCompleted(this, new GetPanelFullStatusByDeviceIDExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelFullStatusByDeviceIDExAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelFullStatusByDeviceIDExAsync(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelFullStatusByDeviceIDExAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelFullStatusByDeviceIDExDelegate == null)) {
                this.onBeginGetPanelFullStatusByDeviceIDExDelegate = new BeginOperationDelegate(this.OnBeginGetPanelFullStatusByDeviceIDEx);
            }
            if ((this.onEndGetPanelFullStatusByDeviceIDExDelegate == null)) {
                this.onEndGetPanelFullStatusByDeviceIDExDelegate = new EndOperationDelegate(this.OnEndGetPanelFullStatusByDeviceIDEx);
            }
            if ((this.onGetPanelFullStatusByDeviceIDExCompletedDelegate == null)) {
                this.onGetPanelFullStatusByDeviceIDExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelFullStatusByDeviceIDExCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelFullStatusByDeviceIDExDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelFullStatusByDeviceIDExDelegate, this.onGetPanelFullStatusByDeviceIDExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetZonesListInState(string SessionID, long LocationID, int PartitionID, int ListIdentifierID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetZonesListInState(SessionID, LocationID, PartitionID, ListIdentifierID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GetZonesListInStateResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetZonesListInState(System.IAsyncResult result) {
            return base.Channel.EndGetZonesListInState(result);
        }
        
        private System.IAsyncResult OnBeginGetZonesListInState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            int PartitionID = ((int)(inValues[2]));
            int ListIdentifierID = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetZonesListInState(SessionID, LocationID, PartitionID, ListIdentifierID, callback, asyncState);
        }
        
        private object[] OnEndGetZonesListInState(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GetZonesListInStateResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetZonesListInState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetZonesListInStateCompleted(object state) {
            if ((this.GetZonesListInStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetZonesListInStateCompleted(this, new GetZonesListInStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetZonesListInStateAsync(string SessionID, long LocationID, int PartitionID, int ListIdentifierID) {
            this.GetZonesListInStateAsync(SessionID, LocationID, PartitionID, ListIdentifierID, null);
        }
        
        public void GetZonesListInStateAsync(string SessionID, long LocationID, int PartitionID, int ListIdentifierID, object userState) {
            if ((this.onBeginGetZonesListInStateDelegate == null)) {
                this.onBeginGetZonesListInStateDelegate = new BeginOperationDelegate(this.OnBeginGetZonesListInState);
            }
            if ((this.onEndGetZonesListInStateDelegate == null)) {
                this.onEndGetZonesListInStateDelegate = new EndOperationDelegate(this.OnEndGetZonesListInState);
            }
            if ((this.onGetZonesListInStateCompletedDelegate == null)) {
                this.onGetZonesListInStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetZonesListInStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetZonesListInStateDelegate, new object[] {
                        SessionID,
                        LocationID,
                        PartitionID,
                        ListIdentifierID}, this.onEndGetZonesListInStateDelegate, this.onGetZonesListInStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelMetaDataAndFullStatusByDeviceID(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelMetaDataAndFullStatusByDeviceID(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelMetaDataAndFullStatusByDeviceID(System.IAsyncResult result) {
            return base.Channel.EndGetPanelMetaDataAndFullStatusByDeviceID(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelMetaDataAndFullStatusByDeviceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelMetaDataAndFullStatusByDeviceID(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelMetaDataAndFullStatusByDeviceID(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelMetadataAndStatusResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelMetaDataAndFullStatusByDeviceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelMetaDataAndFullStatusByDeviceIDCompleted(object state) {
            if ((this.GetPanelMetaDataAndFullStatusByDeviceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelMetaDataAndFullStatusByDeviceIDCompleted(this, new GetPanelMetaDataAndFullStatusByDeviceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelMetaDataAndFullStatusByDeviceIDAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelMetaDataAndFullStatusByDeviceIDAsync(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelMetaDataAndFullStatusByDeviceIDAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelMetaDataAndFullStatusByDeviceIDDelegate == null)) {
                this.onBeginGetPanelMetaDataAndFullStatusByDeviceIDDelegate = new BeginOperationDelegate(this.OnBeginGetPanelMetaDataAndFullStatusByDeviceID);
            }
            if ((this.onEndGetPanelMetaDataAndFullStatusByDeviceIDDelegate == null)) {
                this.onEndGetPanelMetaDataAndFullStatusByDeviceIDDelegate = new EndOperationDelegate(this.OnEndGetPanelMetaDataAndFullStatusByDeviceID);
            }
            if ((this.onGetPanelMetaDataAndFullStatusByDeviceIDCompletedDelegate == null)) {
                this.onGetPanelMetaDataAndFullStatusByDeviceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelMetaDataAndFullStatusByDeviceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelMetaDataAndFullStatusByDeviceIDDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelMetaDataAndFullStatusByDeviceIDDelegate, this.onGetPanelMetaDataAndFullStatusByDeviceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetPanelMetaDataAndFullStatusByDeviceIDEx(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPanelMetaDataAndFullStatusByDeviceIDEx(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx TotalConnect.TotalConnectService.svcTC2APISoap.EndGetPanelMetaDataAndFullStatusByDeviceIDEx(System.IAsyncResult result) {
            return base.Channel.EndGetPanelMetaDataAndFullStatusByDeviceIDEx(result);
        }
        
        private System.IAsyncResult OnBeginGetPanelMetaDataAndFullStatusByDeviceIDEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            int LastSequenceNumber = ((int)(inValues[2]));
            long LastUpdatedTimestampTicks = ((long)(inValues[3]));
            int PartitionID = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetPanelMetaDataAndFullStatusByDeviceIDEx(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, callback, asyncState);
        }
        
        private object[] OnEndGetPanelMetaDataAndFullStatusByDeviceIDEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetPanelMetaDataAndFullStatusByDeviceIDEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPanelMetaDataAndFullStatusByDeviceIDExCompleted(object state) {
            if ((this.GetPanelMetaDataAndFullStatusByDeviceIDExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPanelMetaDataAndFullStatusByDeviceIDExCompleted(this, new GetPanelMetaDataAndFullStatusByDeviceIDExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPanelMetaDataAndFullStatusByDeviceIDExAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID) {
            this.GetPanelMetaDataAndFullStatusByDeviceIDExAsync(SessionID, DeviceID, LastSequenceNumber, LastUpdatedTimestampTicks, PartitionID, null);
        }
        
        public void GetPanelMetaDataAndFullStatusByDeviceIDExAsync(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, object userState) {
            if ((this.onBeginGetPanelMetaDataAndFullStatusByDeviceIDExDelegate == null)) {
                this.onBeginGetPanelMetaDataAndFullStatusByDeviceIDExDelegate = new BeginOperationDelegate(this.OnBeginGetPanelMetaDataAndFullStatusByDeviceIDEx);
            }
            if ((this.onEndGetPanelMetaDataAndFullStatusByDeviceIDExDelegate == null)) {
                this.onEndGetPanelMetaDataAndFullStatusByDeviceIDExDelegate = new EndOperationDelegate(this.OnEndGetPanelMetaDataAndFullStatusByDeviceIDEx);
            }
            if ((this.onGetPanelMetaDataAndFullStatusByDeviceIDExCompletedDelegate == null)) {
                this.onGetPanelMetaDataAndFullStatusByDeviceIDExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPanelMetaDataAndFullStatusByDeviceIDExCompleted);
            }
            base.InvokeAsync(this.onBeginGetPanelMetaDataAndFullStatusByDeviceIDExDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        LastSequenceNumber,
                        LastUpdatedTimestampTicks,
                        PartitionID}, this.onEndGetPanelMetaDataAndFullStatusByDeviceIDExDelegate, this.onGetPanelMetaDataAndFullStatusByDeviceIDExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginImportSecurityInformation(string SessionID, long LocationID, long DeviceID, int InstallerCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportSecurityInformation(SessionID, LocationID, DeviceID, InstallerCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ImportSecurityInfoResults TotalConnect.TotalConnectService.svcTC2APISoap.EndImportSecurityInformation(System.IAsyncResult result) {
            return base.Channel.EndImportSecurityInformation(result);
        }
        
        private System.IAsyncResult OnBeginImportSecurityInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            int InstallerCode = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginImportSecurityInformation(SessionID, LocationID, DeviceID, InstallerCode, callback, asyncState);
        }
        
        private object[] OnEndImportSecurityInformation(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ImportSecurityInfoResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndImportSecurityInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportSecurityInformationCompleted(object state) {
            if ((this.ImportSecurityInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportSecurityInformationCompleted(this, new ImportSecurityInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportSecurityInformationAsync(string SessionID, long LocationID, long DeviceID, int InstallerCode) {
            this.ImportSecurityInformationAsync(SessionID, LocationID, DeviceID, InstallerCode, null);
        }
        
        public void ImportSecurityInformationAsync(string SessionID, long LocationID, long DeviceID, int InstallerCode, object userState) {
            if ((this.onBeginImportSecurityInformationDelegate == null)) {
                this.onBeginImportSecurityInformationDelegate = new BeginOperationDelegate(this.OnBeginImportSecurityInformation);
            }
            if ((this.onEndImportSecurityInformationDelegate == null)) {
                this.onEndImportSecurityInformationDelegate = new EndOperationDelegate(this.OnEndImportSecurityInformation);
            }
            if ((this.onImportSecurityInformationCompletedDelegate == null)) {
                this.onImportSecurityInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportSecurityInformationCompleted);
            }
            base.InvokeAsync(this.onBeginImportSecurityInformationDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID,
                        InstallerCode}, this.onEndImportSecurityInformationDelegate, this.onImportSecurityInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginBypass(string SessionID, long LocationID, long DeviceID, int Zone, int UserCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBypass(SessionID, LocationID, DeviceID, Zone, UserCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ZoneBypassResults TotalConnect.TotalConnectService.svcTC2APISoap.EndBypass(System.IAsyncResult result) {
            return base.Channel.EndBypass(result);
        }
        
        private System.IAsyncResult OnBeginBypass(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            int Zone = ((int)(inValues[3]));
            int UserCode = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginBypass(SessionID, LocationID, DeviceID, Zone, UserCode, callback, asyncState);
        }
        
        private object[] OnEndBypass(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ZoneBypassResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndBypass(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBypassCompleted(object state) {
            if ((this.BypassCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BypassCompleted(this, new BypassCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BypassAsync(string SessionID, long LocationID, long DeviceID, int Zone, int UserCode) {
            this.BypassAsync(SessionID, LocationID, DeviceID, Zone, UserCode, null);
        }
        
        public void BypassAsync(string SessionID, long LocationID, long DeviceID, int Zone, int UserCode, object userState) {
            if ((this.onBeginBypassDelegate == null)) {
                this.onBeginBypassDelegate = new BeginOperationDelegate(this.OnBeginBypass);
            }
            if ((this.onEndBypassDelegate == null)) {
                this.onEndBypassDelegate = new EndOperationDelegate(this.OnEndBypass);
            }
            if ((this.onBypassCompletedDelegate == null)) {
                this.onBypassCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBypassCompleted);
            }
            base.InvokeAsync(this.onBeginBypassDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID,
                        Zone,
                        UserCode}, this.onEndBypassDelegate, this.onBypassCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginArmSecuritySystem(string SessionID, long LocationID, long DeviceID, int ArmType, int UserCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginArmSecuritySystem(SessionID, LocationID, DeviceID, ArmType, UserCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ArmSecuritySystemResults TotalConnect.TotalConnectService.svcTC2APISoap.EndArmSecuritySystem(System.IAsyncResult result) {
            return base.Channel.EndArmSecuritySystem(result);
        }
        
        private System.IAsyncResult OnBeginArmSecuritySystem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            int ArmType = ((int)(inValues[3]));
            int UserCode = ((int)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginArmSecuritySystem(SessionID, LocationID, DeviceID, ArmType, UserCode, callback, asyncState);
        }
        
        private object[] OnEndArmSecuritySystem(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ArmSecuritySystemResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndArmSecuritySystem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnArmSecuritySystemCompleted(object state) {
            if ((this.ArmSecuritySystemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ArmSecuritySystemCompleted(this, new ArmSecuritySystemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ArmSecuritySystemAsync(string SessionID, long LocationID, long DeviceID, int ArmType, int UserCode) {
            this.ArmSecuritySystemAsync(SessionID, LocationID, DeviceID, ArmType, UserCode, null);
        }
        
        public void ArmSecuritySystemAsync(string SessionID, long LocationID, long DeviceID, int ArmType, int UserCode, object userState) {
            if ((this.onBeginArmSecuritySystemDelegate == null)) {
                this.onBeginArmSecuritySystemDelegate = new BeginOperationDelegate(this.OnBeginArmSecuritySystem);
            }
            if ((this.onEndArmSecuritySystemDelegate == null)) {
                this.onEndArmSecuritySystemDelegate = new EndOperationDelegate(this.OnEndArmSecuritySystem);
            }
            if ((this.onArmSecuritySystemCompletedDelegate == null)) {
                this.onArmSecuritySystemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnArmSecuritySystemCompleted);
            }
            base.InvokeAsync(this.onBeginArmSecuritySystemDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID,
                        ArmType,
                        UserCode}, this.onEndArmSecuritySystemDelegate, this.onArmSecuritySystemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDisarmSecuritySystem(string SessionID, long LocationID, long DeviceID, int UserCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisarmSecuritySystem(SessionID, LocationID, DeviceID, UserCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.DisarmSecuritySystemResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDisarmSecuritySystem(System.IAsyncResult result) {
            return base.Channel.EndDisarmSecuritySystem(result);
        }
        
        private System.IAsyncResult OnBeginDisarmSecuritySystem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            int UserCode = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDisarmSecuritySystem(SessionID, LocationID, DeviceID, UserCode, callback, asyncState);
        }
        
        private object[] OnEndDisarmSecuritySystem(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.DisarmSecuritySystemResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDisarmSecuritySystem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisarmSecuritySystemCompleted(object state) {
            if ((this.DisarmSecuritySystemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisarmSecuritySystemCompleted(this, new DisarmSecuritySystemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisarmSecuritySystemAsync(string SessionID, long LocationID, long DeviceID, int UserCode) {
            this.DisarmSecuritySystemAsync(SessionID, LocationID, DeviceID, UserCode, null);
        }
        
        public void DisarmSecuritySystemAsync(string SessionID, long LocationID, long DeviceID, int UserCode, object userState) {
            if ((this.onBeginDisarmSecuritySystemDelegate == null)) {
                this.onBeginDisarmSecuritySystemDelegate = new BeginOperationDelegate(this.OnBeginDisarmSecuritySystem);
            }
            if ((this.onEndDisarmSecuritySystemDelegate == null)) {
                this.onEndDisarmSecuritySystemDelegate = new EndOperationDelegate(this.OnEndDisarmSecuritySystem);
            }
            if ((this.onDisarmSecuritySystemCompletedDelegate == null)) {
                this.onDisarmSecuritySystemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisarmSecuritySystemCompleted);
            }
            base.InvokeAsync(this.onBeginDisarmSecuritySystemDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID,
                        UserCode}, this.onEndDisarmSecuritySystemDelegate, this.onDisarmSecuritySystemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginReadConsoleDisplay(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadConsoleDisplay(SessionID, LocationID, DeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ReadConsoleDisplayResults TotalConnect.TotalConnectService.svcTC2APISoap.EndReadConsoleDisplay(System.IAsyncResult result) {
            return base.Channel.EndReadConsoleDisplay(result);
        }
        
        private System.IAsyncResult OnBeginReadConsoleDisplay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginReadConsoleDisplay(SessionID, LocationID, DeviceID, callback, asyncState);
        }
        
        private object[] OnEndReadConsoleDisplay(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ReadConsoleDisplayResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndReadConsoleDisplay(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadConsoleDisplayCompleted(object state) {
            if ((this.ReadConsoleDisplayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadConsoleDisplayCompleted(this, new ReadConsoleDisplayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadConsoleDisplayAsync(string SessionID, long LocationID, long DeviceID) {
            this.ReadConsoleDisplayAsync(SessionID, LocationID, DeviceID, null);
        }
        
        public void ReadConsoleDisplayAsync(string SessionID, long LocationID, long DeviceID, object userState) {
            if ((this.onBeginReadConsoleDisplayDelegate == null)) {
                this.onBeginReadConsoleDisplayDelegate = new BeginOperationDelegate(this.OnBeginReadConsoleDisplay);
            }
            if ((this.onEndReadConsoleDisplayDelegate == null)) {
                this.onEndReadConsoleDisplayDelegate = new EndOperationDelegate(this.OnEndReadConsoleDisplay);
            }
            if ((this.onReadConsoleDisplayCompletedDelegate == null)) {
                this.onReadConsoleDisplayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadConsoleDisplayCompleted);
            }
            base.InvokeAsync(this.onBeginReadConsoleDisplayDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID}, this.onEndReadConsoleDisplayDelegate, this.onReadConsoleDisplayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginConnectToPanel(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnectToPanel(SessionID, LocationID, DeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndConnectToPanel(System.IAsyncResult result) {
            return base.Channel.EndConnectToPanel(result);
        }
        
        private System.IAsyncResult OnBeginConnectToPanel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginConnectToPanel(SessionID, LocationID, DeviceID, callback, asyncState);
        }
        
        private object[] OnEndConnectToPanel(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndConnectToPanel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectToPanelCompleted(object state) {
            if ((this.ConnectToPanelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectToPanelCompleted(this, new ConnectToPanelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectToPanelAsync(string SessionID, long LocationID, long DeviceID) {
            this.ConnectToPanelAsync(SessionID, LocationID, DeviceID, null);
        }
        
        public void ConnectToPanelAsync(string SessionID, long LocationID, long DeviceID, object userState) {
            if ((this.onBeginConnectToPanelDelegate == null)) {
                this.onBeginConnectToPanelDelegate = new BeginOperationDelegate(this.OnBeginConnectToPanel);
            }
            if ((this.onEndConnectToPanelDelegate == null)) {
                this.onEndConnectToPanelDelegate = new EndOperationDelegate(this.OnEndConnectToPanel);
            }
            if ((this.onConnectToPanelCompletedDelegate == null)) {
                this.onConnectToPanelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectToPanelCompleted);
            }
            base.InvokeAsync(this.onBeginConnectToPanelDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID}, this.onEndConnectToPanelDelegate, this.onConnectToPanelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSendKey(string SessionID, long LocationID, long DeviceID, string KeyChar, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendKey(SessionID, LocationID, DeviceID, KeyChar, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSendKey(System.IAsyncResult result) {
            return base.Channel.EndSendKey(result);
        }
        
        private System.IAsyncResult OnBeginSendKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            string KeyChar = ((string)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSendKey(SessionID, LocationID, DeviceID, KeyChar, callback, asyncState);
        }
        
        private object[] OnEndSendKey(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSendKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendKeyCompleted(object state) {
            if ((this.SendKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendKeyCompleted(this, new SendKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendKeyAsync(string SessionID, long LocationID, long DeviceID, string KeyChar) {
            this.SendKeyAsync(SessionID, LocationID, DeviceID, KeyChar, null);
        }
        
        public void SendKeyAsync(string SessionID, long LocationID, long DeviceID, string KeyChar, object userState) {
            if ((this.onBeginSendKeyDelegate == null)) {
                this.onBeginSendKeyDelegate = new BeginOperationDelegate(this.OnBeginSendKey);
            }
            if ((this.onEndSendKeyDelegate == null)) {
                this.onEndSendKeyDelegate = new EndOperationDelegate(this.OnEndSendKey);
            }
            if ((this.onSendKeyCompletedDelegate == null)) {
                this.onSendKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendKeyCompleted);
            }
            base.InvokeAsync(this.onBeginSendKeyDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID,
                        KeyChar}, this.onEndSendKeyDelegate, this.onSendKeyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginOverrideSecurityPanelSession(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOverrideSecurityPanelSession(SessionID, LocationID, DeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndOverrideSecurityPanelSession(System.IAsyncResult result) {
            return base.Channel.EndOverrideSecurityPanelSession(result);
        }
        
        private System.IAsyncResult OnBeginOverrideSecurityPanelSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginOverrideSecurityPanelSession(SessionID, LocationID, DeviceID, callback, asyncState);
        }
        
        private object[] OnEndOverrideSecurityPanelSession(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndOverrideSecurityPanelSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOverrideSecurityPanelSessionCompleted(object state) {
            if ((this.OverrideSecurityPanelSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OverrideSecurityPanelSessionCompleted(this, new OverrideSecurityPanelSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OverrideSecurityPanelSessionAsync(string SessionID, long LocationID, long DeviceID) {
            this.OverrideSecurityPanelSessionAsync(SessionID, LocationID, DeviceID, null);
        }
        
        public void OverrideSecurityPanelSessionAsync(string SessionID, long LocationID, long DeviceID, object userState) {
            if ((this.onBeginOverrideSecurityPanelSessionDelegate == null)) {
                this.onBeginOverrideSecurityPanelSessionDelegate = new BeginOperationDelegate(this.OnBeginOverrideSecurityPanelSession);
            }
            if ((this.onEndOverrideSecurityPanelSessionDelegate == null)) {
                this.onEndOverrideSecurityPanelSessionDelegate = new EndOperationDelegate(this.OnEndOverrideSecurityPanelSession);
            }
            if ((this.onOverrideSecurityPanelSessionCompletedDelegate == null)) {
                this.onOverrideSecurityPanelSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOverrideSecurityPanelSessionCompleted);
            }
            base.InvokeAsync(this.onBeginOverrideSecurityPanelSessionDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID}, this.onEndOverrideSecurityPanelSessionDelegate, this.onOverrideSecurityPanelSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginCheckSecurityPanelLastCommandState(string SessionID, long LocationID, long DeviceID, int CommandCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckSecurityPanelLastCommandState(SessionID, LocationID, DeviceID, CommandCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndCheckSecurityPanelLastCommandState(System.IAsyncResult result) {
            return base.Channel.EndCheckSecurityPanelLastCommandState(result);
        }
        
        private System.IAsyncResult OnBeginCheckSecurityPanelLastCommandState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long DeviceID = ((long)(inValues[2]));
            int CommandCode = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginCheckSecurityPanelLastCommandState(SessionID, LocationID, DeviceID, CommandCode, callback, asyncState);
        }
        
        private object[] OnEndCheckSecurityPanelLastCommandState(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndCheckSecurityPanelLastCommandState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckSecurityPanelLastCommandStateCompleted(object state) {
            if ((this.CheckSecurityPanelLastCommandStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckSecurityPanelLastCommandStateCompleted(this, new CheckSecurityPanelLastCommandStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckSecurityPanelLastCommandStateAsync(string SessionID, long LocationID, long DeviceID, int CommandCode) {
            this.CheckSecurityPanelLastCommandStateAsync(SessionID, LocationID, DeviceID, CommandCode, null);
        }
        
        public void CheckSecurityPanelLastCommandStateAsync(string SessionID, long LocationID, long DeviceID, int CommandCode, object userState) {
            if ((this.onBeginCheckSecurityPanelLastCommandStateDelegate == null)) {
                this.onBeginCheckSecurityPanelLastCommandStateDelegate = new BeginOperationDelegate(this.OnBeginCheckSecurityPanelLastCommandState);
            }
            if ((this.onEndCheckSecurityPanelLastCommandStateDelegate == null)) {
                this.onEndCheckSecurityPanelLastCommandStateDelegate = new EndOperationDelegate(this.OnEndCheckSecurityPanelLastCommandState);
            }
            if ((this.onCheckSecurityPanelLastCommandStateCompletedDelegate == null)) {
                this.onCheckSecurityPanelLastCommandStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckSecurityPanelLastCommandStateCompleted);
            }
            base.InvokeAsync(this.onBeginCheckSecurityPanelLastCommandStateDelegate, new object[] {
                        SessionID,
                        LocationID,
                        DeviceID,
                        CommandCode}, this.onEndCheckSecurityPanelLastCommandStateDelegate, this.onCheckSecurityPanelLastCommandStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetContentConfiguration(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContentConfiguration(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ContentConfigurationResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetContentConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetContentConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetContentConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetContentConfiguration(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndGetContentConfiguration(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ContentConfigurationResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetContentConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContentConfigurationCompleted(object state) {
            if ((this.GetContentConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContentConfigurationCompleted(this, new GetContentConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContentConfigurationAsync(string SessionID, long LocationID) {
            this.GetContentConfigurationAsync(SessionID, LocationID, null);
        }
        
        public void GetContentConfigurationAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginGetContentConfigurationDelegate == null)) {
                this.onBeginGetContentConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetContentConfiguration);
            }
            if ((this.onEndGetContentConfigurationDelegate == null)) {
                this.onEndGetContentConfigurationDelegate = new EndOperationDelegate(this.OnEndGetContentConfiguration);
            }
            if ((this.onGetContentConfigurationCompletedDelegate == null)) {
                this.onGetContentConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContentConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetContentConfigurationDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndGetContentConfigurationDelegate, this.onGetContentConfigurationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSaveContentConfiguration(string SessionID, long LocationID, TotalConnect.TotalConnectService.ContentConfigurationInfo ContentConfiguration, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveContentConfiguration(SessionID, LocationID, ContentConfiguration, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSaveContentConfiguration(System.IAsyncResult result) {
            return base.Channel.EndSaveContentConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginSaveContentConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            TotalConnect.TotalConnectService.ContentConfigurationInfo ContentConfiguration = ((TotalConnect.TotalConnectService.ContentConfigurationInfo)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSaveContentConfiguration(SessionID, LocationID, ContentConfiguration, callback, asyncState);
        }
        
        private object[] OnEndSaveContentConfiguration(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSaveContentConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveContentConfigurationCompleted(object state) {
            if ((this.SaveContentConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveContentConfigurationCompleted(this, new SaveContentConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveContentConfigurationAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.ContentConfigurationInfo ContentConfiguration) {
            this.SaveContentConfigurationAsync(SessionID, LocationID, ContentConfiguration, null);
        }
        
        public void SaveContentConfigurationAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.ContentConfigurationInfo ContentConfiguration, object userState) {
            if ((this.onBeginSaveContentConfigurationDelegate == null)) {
                this.onBeginSaveContentConfigurationDelegate = new BeginOperationDelegate(this.OnBeginSaveContentConfiguration);
            }
            if ((this.onEndSaveContentConfigurationDelegate == null)) {
                this.onEndSaveContentConfigurationDelegate = new EndOperationDelegate(this.OnEndSaveContentConfiguration);
            }
            if ((this.onSaveContentConfigurationCompletedDelegate == null)) {
                this.onSaveContentConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveContentConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginSaveContentConfigurationDelegate, new object[] {
                        SessionID,
                        LocationID,
                        ContentConfiguration}, this.onEndSaveContentConfigurationDelegate, this.onSaveContentConfigurationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetSlideShowPhotos(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSlideShowPhotos(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SlideShowPhotoResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetSlideShowPhotos(System.IAsyncResult result) {
            return base.Channel.EndGetSlideShowPhotos(result);
        }
        
        private System.IAsyncResult OnBeginGetSlideShowPhotos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetSlideShowPhotos(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndGetSlideShowPhotos(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SlideShowPhotoResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetSlideShowPhotos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSlideShowPhotosCompleted(object state) {
            if ((this.GetSlideShowPhotosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSlideShowPhotosCompleted(this, new GetSlideShowPhotosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSlideShowPhotosAsync(string SessionID, long LocationID) {
            this.GetSlideShowPhotosAsync(SessionID, LocationID, null);
        }
        
        public void GetSlideShowPhotosAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginGetSlideShowPhotosDelegate == null)) {
                this.onBeginGetSlideShowPhotosDelegate = new BeginOperationDelegate(this.OnBeginGetSlideShowPhotos);
            }
            if ((this.onEndGetSlideShowPhotosDelegate == null)) {
                this.onEndGetSlideShowPhotosDelegate = new EndOperationDelegate(this.OnEndGetSlideShowPhotos);
            }
            if ((this.onGetSlideShowPhotosCompletedDelegate == null)) {
                this.onGetSlideShowPhotosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSlideShowPhotosCompleted);
            }
            base.InvokeAsync(this.onBeginGetSlideShowPhotosDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndGetSlideShowPhotosDelegate, this.onGetSlideShowPhotosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginAddSlideShowPhoto(TotalConnect.TotalConnectService.AddSlideShowPhotoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSlideShowPhoto(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddSlideShowPhoto(string SessionID, long LocationID, byte[] Image, System.AsyncCallback callback, object asyncState) {
            TotalConnect.TotalConnectService.AddSlideShowPhotoRequest inValue = new TotalConnect.TotalConnectService.AddSlideShowPhotoRequest();
            inValue.SessionID = SessionID;
            inValue.LocationID = LocationID;
            inValue.Image = Image;
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginAddSlideShowPhoto(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AddSlideShowPhotoResponse TotalConnect.TotalConnectService.svcTC2APISoap.EndAddSlideShowPhoto(System.IAsyncResult result) {
            return base.Channel.EndAddSlideShowPhoto(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private TotalConnect.TotalConnectService.WebMethodResults EndAddSlideShowPhoto(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AddSlideShowPhotoResponse retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndAddSlideShowPhoto(result);
            return retVal.AddSlideShowPhotoResult;
        }
        
        private System.IAsyncResult OnBeginAddSlideShowPhoto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            byte[] Image = ((byte[])(inValues[2]));
            return this.BeginAddSlideShowPhoto(SessionID, LocationID, Image, callback, asyncState);
        }
        
        private object[] OnEndAddSlideShowPhoto(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = this.EndAddSlideShowPhoto(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSlideShowPhotoCompleted(object state) {
            if ((this.AddSlideShowPhotoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSlideShowPhotoCompleted(this, new AddSlideShowPhotoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSlideShowPhotoAsync(string SessionID, long LocationID, byte[] Image) {
            this.AddSlideShowPhotoAsync(SessionID, LocationID, Image, null);
        }
        
        public void AddSlideShowPhotoAsync(string SessionID, long LocationID, byte[] Image, object userState) {
            if ((this.onBeginAddSlideShowPhotoDelegate == null)) {
                this.onBeginAddSlideShowPhotoDelegate = new BeginOperationDelegate(this.OnBeginAddSlideShowPhoto);
            }
            if ((this.onEndAddSlideShowPhotoDelegate == null)) {
                this.onEndAddSlideShowPhotoDelegate = new EndOperationDelegate(this.OnEndAddSlideShowPhoto);
            }
            if ((this.onAddSlideShowPhotoCompletedDelegate == null)) {
                this.onAddSlideShowPhotoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSlideShowPhotoCompleted);
            }
            base.InvokeAsync(this.onBeginAddSlideShowPhotoDelegate, new object[] {
                        SessionID,
                        LocationID,
                        Image}, this.onEndAddSlideShowPhotoDelegate, this.onAddSlideShowPhotoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDeleteSlideShowPhoto(string SessionID, long LocationID, long PhotoID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSlideShowPhoto(SessionID, LocationID, PhotoID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDeleteSlideShowPhoto(System.IAsyncResult result) {
            return base.Channel.EndDeleteSlideShowPhoto(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSlideShowPhoto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long PhotoID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDeleteSlideShowPhoto(SessionID, LocationID, PhotoID, callback, asyncState);
        }
        
        private object[] OnEndDeleteSlideShowPhoto(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDeleteSlideShowPhoto(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteSlideShowPhotoCompleted(object state) {
            if ((this.DeleteSlideShowPhotoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSlideShowPhotoCompleted(this, new DeleteSlideShowPhotoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSlideShowPhotoAsync(string SessionID, long LocationID, long PhotoID) {
            this.DeleteSlideShowPhotoAsync(SessionID, LocationID, PhotoID, null);
        }
        
        public void DeleteSlideShowPhotoAsync(string SessionID, long LocationID, long PhotoID, object userState) {
            if ((this.onBeginDeleteSlideShowPhotoDelegate == null)) {
                this.onBeginDeleteSlideShowPhotoDelegate = new BeginOperationDelegate(this.OnBeginDeleteSlideShowPhoto);
            }
            if ((this.onEndDeleteSlideShowPhotoDelegate == null)) {
                this.onEndDeleteSlideShowPhotoDelegate = new EndOperationDelegate(this.OnEndDeleteSlideShowPhoto);
            }
            if ((this.onDeleteSlideShowPhotoCompletedDelegate == null)) {
                this.onDeleteSlideShowPhotoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSlideShowPhotoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSlideShowPhotoDelegate, new object[] {
                        SessionID,
                        LocationID,
                        PhotoID}, this.onEndDeleteSlideShowPhotoDelegate, this.onDeleteSlideShowPhotoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCurrentWeather(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentWeather(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CurrentWeatherResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCurrentWeather(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentWeather(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCurrentWeather(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentWeather(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CurrentWeatherResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCurrentWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentWeatherCompleted(object state) {
            if ((this.GetCurrentWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentWeatherCompleted(this, new GetCurrentWeatherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentWeatherAsync(string SessionID, long LocationID) {
            this.GetCurrentWeatherAsync(SessionID, LocationID, null);
        }
        
        public void GetCurrentWeatherAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginGetCurrentWeatherDelegate == null)) {
                this.onBeginGetCurrentWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentWeather);
            }
            if ((this.onEndGetCurrentWeatherDelegate == null)) {
                this.onEndGetCurrentWeatherDelegate = new EndOperationDelegate(this.OnEndGetCurrentWeather);
            }
            if ((this.onGetCurrentWeatherCompletedDelegate == null)) {
                this.onGetCurrentWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentWeatherDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndGetCurrentWeatherDelegate, this.onGetCurrentWeatherCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetForecastWeather(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetForecastWeather(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ForecastWeatherResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetForecastWeather(System.IAsyncResult result) {
            return base.Channel.EndGetForecastWeather(result);
        }
        
        private System.IAsyncResult OnBeginGetForecastWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetForecastWeather(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndGetForecastWeather(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ForecastWeatherResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetForecastWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetForecastWeatherCompleted(object state) {
            if ((this.GetForecastWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetForecastWeatherCompleted(this, new GetForecastWeatherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetForecastWeatherAsync(string SessionID, long LocationID) {
            this.GetForecastWeatherAsync(SessionID, LocationID, null);
        }
        
        public void GetForecastWeatherAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginGetForecastWeatherDelegate == null)) {
                this.onBeginGetForecastWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetForecastWeather);
            }
            if ((this.onEndGetForecastWeatherDelegate == null)) {
                this.onEndGetForecastWeatherDelegate = new EndOperationDelegate(this.OnEndGetForecastWeather);
            }
            if ((this.onGetForecastWeatherCompletedDelegate == null)) {
                this.onGetForecastWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetForecastWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetForecastWeatherDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndGetForecastWeatherDelegate, this.onGetForecastWeatherCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetDealerMessages(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDealerMessages(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.DealerMessageResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetDealerMessages(System.IAsyncResult result) {
            return base.Channel.EndGetDealerMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetDealerMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetDealerMessages(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndGetDealerMessages(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.DealerMessageResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetDealerMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDealerMessagesCompleted(object state) {
            if ((this.GetDealerMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDealerMessagesCompleted(this, new GetDealerMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDealerMessagesAsync(string SessionID, long LocationID) {
            this.GetDealerMessagesAsync(SessionID, LocationID, null);
        }
        
        public void GetDealerMessagesAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginGetDealerMessagesDelegate == null)) {
                this.onBeginGetDealerMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetDealerMessages);
            }
            if ((this.onEndGetDealerMessagesDelegate == null)) {
                this.onEndGetDealerMessagesDelegate = new EndOperationDelegate(this.OnEndGetDealerMessages);
            }
            if ((this.onGetDealerMessagesCompletedDelegate == null)) {
                this.onGetDealerMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDealerMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDealerMessagesDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndGetDealerMessagesDelegate, this.onGetDealerMessagesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateDealerMessageReadState(string SessionID, long LocationID, long MessageID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateDealerMessageReadState(SessionID, LocationID, MessageID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateDealerMessageReadState(System.IAsyncResult result) {
            return base.Channel.EndUpdateDealerMessageReadState(result);
        }
        
        private System.IAsyncResult OnBeginUpdateDealerMessageReadState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long MessageID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateDealerMessageReadState(SessionID, LocationID, MessageID, callback, asyncState);
        }
        
        private object[] OnEndUpdateDealerMessageReadState(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateDealerMessageReadState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateDealerMessageReadStateCompleted(object state) {
            if ((this.UpdateDealerMessageReadStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDealerMessageReadStateCompleted(this, new UpdateDealerMessageReadStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDealerMessageReadStateAsync(string SessionID, long LocationID, long MessageID) {
            this.UpdateDealerMessageReadStateAsync(SessionID, LocationID, MessageID, null);
        }
        
        public void UpdateDealerMessageReadStateAsync(string SessionID, long LocationID, long MessageID, object userState) {
            if ((this.onBeginUpdateDealerMessageReadStateDelegate == null)) {
                this.onBeginUpdateDealerMessageReadStateDelegate = new BeginOperationDelegate(this.OnBeginUpdateDealerMessageReadState);
            }
            if ((this.onEndUpdateDealerMessageReadStateDelegate == null)) {
                this.onEndUpdateDealerMessageReadStateDelegate = new EndOperationDelegate(this.OnEndUpdateDealerMessageReadState);
            }
            if ((this.onUpdateDealerMessageReadStateCompletedDelegate == null)) {
                this.onUpdateDealerMessageReadStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDealerMessageReadStateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDealerMessageReadStateDelegate, new object[] {
                        SessionID,
                        LocationID,
                        MessageID}, this.onEndUpdateDealerMessageReadStateDelegate, this.onUpdateDealerMessageReadStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginIsCameraAvailable(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsCameraAvailable(MAC, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndIsCameraAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsCameraAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsCameraAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginIsCameraAvailable(MAC, SessionID, callback, asyncState);
        }
        
        private object[] OnEndIsCameraAvailable(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndIsCameraAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsCameraAvailableCompleted(object state) {
            if ((this.IsCameraAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsCameraAvailableCompleted(this, new IsCameraAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsCameraAvailableAsync(string MAC, string SessionID) {
            this.IsCameraAvailableAsync(MAC, SessionID, null);
        }
        
        public void IsCameraAvailableAsync(string MAC, string SessionID, object userState) {
            if ((this.onBeginIsCameraAvailableDelegate == null)) {
                this.onBeginIsCameraAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsCameraAvailable);
            }
            if ((this.onEndIsCameraAvailableDelegate == null)) {
                this.onEndIsCameraAvailableDelegate = new EndOperationDelegate(this.OnEndIsCameraAvailable);
            }
            if ((this.onIsCameraAvailableCompletedDelegate == null)) {
                this.onIsCameraAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsCameraAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsCameraAvailableDelegate, new object[] {
                        MAC,
                        SessionID}, this.onEndIsCameraAvailableDelegate, this.onIsCameraAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCameraState(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraState(MAC, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraStateResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCameraState(System.IAsyncResult result) {
            return base.Channel.EndGetCameraState(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCameraState(MAC, SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraState(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraStateResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCameraState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraStateCompleted(object state) {
            if ((this.GetCameraStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraStateCompleted(this, new GetCameraStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraStateAsync(string MAC, string SessionID) {
            this.GetCameraStateAsync(MAC, SessionID, null);
        }
        
        public void GetCameraStateAsync(string MAC, string SessionID, object userState) {
            if ((this.onBeginGetCameraStateDelegate == null)) {
                this.onBeginGetCameraStateDelegate = new BeginOperationDelegate(this.OnBeginGetCameraState);
            }
            if ((this.onEndGetCameraStateDelegate == null)) {
                this.onEndGetCameraStateDelegate = new EndOperationDelegate(this.OnEndGetCameraState);
            }
            if ((this.onGetCameraStateCompletedDelegate == null)) {
                this.onGetCameraStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraStateDelegate, new object[] {
                        MAC,
                        SessionID}, this.onEndGetCameraStateDelegate, this.onGetCameraStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCameraIOState(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraIOState(MAC, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraIOStateResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCameraIOState(System.IAsyncResult result) {
            return base.Channel.EndGetCameraIOState(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraIOState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCameraIOState(MAC, SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraIOState(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraIOStateResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCameraIOState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraIOStateCompleted(object state) {
            if ((this.GetCameraIOStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraIOStateCompleted(this, new GetCameraIOStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraIOStateAsync(string MAC, string SessionID) {
            this.GetCameraIOStateAsync(MAC, SessionID, null);
        }
        
        public void GetCameraIOStateAsync(string MAC, string SessionID, object userState) {
            if ((this.onBeginGetCameraIOStateDelegate == null)) {
                this.onBeginGetCameraIOStateDelegate = new BeginOperationDelegate(this.OnBeginGetCameraIOState);
            }
            if ((this.onEndGetCameraIOStateDelegate == null)) {
                this.onEndGetCameraIOStateDelegate = new EndOperationDelegate(this.OnEndGetCameraIOState);
            }
            if ((this.onGetCameraIOStateCompletedDelegate == null)) {
                this.onGetCameraIOStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraIOStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraIOStateDelegate, new object[] {
                        MAC,
                        SessionID}, this.onEndGetCameraIOStateDelegate, this.onGetCameraIOStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCameraPosition(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraPosition(MAC, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraPositionResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCameraPosition(System.IAsyncResult result) {
            return base.Channel.EndGetCameraPosition(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraPosition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCameraPosition(MAC, SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraPosition(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraPositionResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCameraPosition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraPositionCompleted(object state) {
            if ((this.GetCameraPositionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraPositionCompleted(this, new GetCameraPositionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraPositionAsync(string MAC, string SessionID) {
            this.GetCameraPositionAsync(MAC, SessionID, null);
        }
        
        public void GetCameraPositionAsync(string MAC, string SessionID, object userState) {
            if ((this.onBeginGetCameraPositionDelegate == null)) {
                this.onBeginGetCameraPositionDelegate = new BeginOperationDelegate(this.OnBeginGetCameraPosition);
            }
            if ((this.onEndGetCameraPositionDelegate == null)) {
                this.onEndGetCameraPositionDelegate = new EndOperationDelegate(this.OnEndGetCameraPosition);
            }
            if ((this.onGetCameraPositionCompletedDelegate == null)) {
                this.onGetCameraPositionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraPositionCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraPositionDelegate, new object[] {
                        MAC,
                        SessionID}, this.onEndGetCameraPositionDelegate, this.onGetCameraPositionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGotoPreset(string MAC, string SessionID, int PresetSlot, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGotoPreset(MAC, SessionID, PresetSlot, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGotoPreset(System.IAsyncResult result) {
            return base.Channel.EndGotoPreset(result);
        }
        
        private System.IAsyncResult OnBeginGotoPreset(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int PresetSlot = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGotoPreset(MAC, SessionID, PresetSlot, callback, asyncState);
        }
        
        private object[] OnEndGotoPreset(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGotoPreset(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGotoPresetCompleted(object state) {
            if ((this.GotoPresetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GotoPresetCompleted(this, new GotoPresetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GotoPresetAsync(string MAC, string SessionID, int PresetSlot) {
            this.GotoPresetAsync(MAC, SessionID, PresetSlot, null);
        }
        
        public void GotoPresetAsync(string MAC, string SessionID, int PresetSlot, object userState) {
            if ((this.onBeginGotoPresetDelegate == null)) {
                this.onBeginGotoPresetDelegate = new BeginOperationDelegate(this.OnBeginGotoPreset);
            }
            if ((this.onEndGotoPresetDelegate == null)) {
                this.onEndGotoPresetDelegate = new EndOperationDelegate(this.OnEndGotoPreset);
            }
            if ((this.onGotoPresetCompletedDelegate == null)) {
                this.onGotoPresetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGotoPresetCompleted);
            }
            base.InvokeAsync(this.onBeginGotoPresetDelegate, new object[] {
                        MAC,
                        SessionID,
                        PresetSlot}, this.onEndGotoPresetDelegate, this.onGotoPresetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginStorePreset(string MAC, string SessionID, int PresetSlot, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStorePreset(MAC, SessionID, PresetSlot, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndStorePreset(System.IAsyncResult result) {
            return base.Channel.EndStorePreset(result);
        }
        
        private System.IAsyncResult OnBeginStorePreset(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int PresetSlot = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginStorePreset(MAC, SessionID, PresetSlot, callback, asyncState);
        }
        
        private object[] OnEndStorePreset(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndStorePreset(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStorePresetCompleted(object state) {
            if ((this.StorePresetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StorePresetCompleted(this, new StorePresetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StorePresetAsync(string MAC, string SessionID, int PresetSlot) {
            this.StorePresetAsync(MAC, SessionID, PresetSlot, null);
        }
        
        public void StorePresetAsync(string MAC, string SessionID, int PresetSlot, object userState) {
            if ((this.onBeginStorePresetDelegate == null)) {
                this.onBeginStorePresetDelegate = new BeginOperationDelegate(this.OnBeginStorePreset);
            }
            if ((this.onEndStorePresetDelegate == null)) {
                this.onEndStorePresetDelegate = new EndOperationDelegate(this.OnEndStorePreset);
            }
            if ((this.onStorePresetCompletedDelegate == null)) {
                this.onStorePresetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStorePresetCompleted);
            }
            base.InvokeAsync(this.onBeginStorePresetDelegate, new object[] {
                        MAC,
                        SessionID,
                        PresetSlot}, this.onEndStorePresetDelegate, this.onStorePresetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginMoveCamera(string MAC, string SessionID, int Direction, int Degrees, int PanSpeed, int TiltSpeed, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveCamera(MAC, SessionID, Direction, Degrees, PanSpeed, TiltSpeed, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndMoveCamera(System.IAsyncResult result) {
            return base.Channel.EndMoveCamera(result);
        }
        
        private System.IAsyncResult OnBeginMoveCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int Direction = ((int)(inValues[2]));
            int Degrees = ((int)(inValues[3]));
            int PanSpeed = ((int)(inValues[4]));
            int TiltSpeed = ((int)(inValues[5]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginMoveCamera(MAC, SessionID, Direction, Degrees, PanSpeed, TiltSpeed, callback, asyncState);
        }
        
        private object[] OnEndMoveCamera(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndMoveCamera(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMoveCameraCompleted(object state) {
            if ((this.MoveCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveCameraCompleted(this, new MoveCameraCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveCameraAsync(string MAC, string SessionID, int Direction, int Degrees, int PanSpeed, int TiltSpeed) {
            this.MoveCameraAsync(MAC, SessionID, Direction, Degrees, PanSpeed, TiltSpeed, null);
        }
        
        public void MoveCameraAsync(string MAC, string SessionID, int Direction, int Degrees, int PanSpeed, int TiltSpeed, object userState) {
            if ((this.onBeginMoveCameraDelegate == null)) {
                this.onBeginMoveCameraDelegate = new BeginOperationDelegate(this.OnBeginMoveCamera);
            }
            if ((this.onEndMoveCameraDelegate == null)) {
                this.onEndMoveCameraDelegate = new EndOperationDelegate(this.OnEndMoveCamera);
            }
            if ((this.onMoveCameraCompletedDelegate == null)) {
                this.onMoveCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveCameraCompleted);
            }
            base.InvokeAsync(this.onBeginMoveCameraDelegate, new object[] {
                        MAC,
                        SessionID,
                        Direction,
                        Degrees,
                        PanSpeed,
                        TiltSpeed}, this.onEndMoveCameraDelegate, this.onMoveCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDirectPanTilt(string MAC, string SessionID, int X, int Y, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDirectPanTilt(MAC, SessionID, X, Y, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDirectPanTilt(System.IAsyncResult result) {
            return base.Channel.EndDirectPanTilt(result);
        }
        
        private System.IAsyncResult OnBeginDirectPanTilt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int X = ((int)(inValues[2]));
            int Y = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDirectPanTilt(MAC, SessionID, X, Y, callback, asyncState);
        }
        
        private object[] OnEndDirectPanTilt(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDirectPanTilt(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDirectPanTiltCompleted(object state) {
            if ((this.DirectPanTiltCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DirectPanTiltCompleted(this, new DirectPanTiltCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DirectPanTiltAsync(string MAC, string SessionID, int X, int Y) {
            this.DirectPanTiltAsync(MAC, SessionID, X, Y, null);
        }
        
        public void DirectPanTiltAsync(string MAC, string SessionID, int X, int Y, object userState) {
            if ((this.onBeginDirectPanTiltDelegate == null)) {
                this.onBeginDirectPanTiltDelegate = new BeginOperationDelegate(this.OnBeginDirectPanTilt);
            }
            if ((this.onEndDirectPanTiltDelegate == null)) {
                this.onEndDirectPanTiltDelegate = new EndOperationDelegate(this.OnEndDirectPanTilt);
            }
            if ((this.onDirectPanTiltCompletedDelegate == null)) {
                this.onDirectPanTiltCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDirectPanTiltCompleted);
            }
            base.InvokeAsync(this.onBeginDirectPanTiltDelegate, new object[] {
                        MAC,
                        SessionID,
                        X,
                        Y}, this.onEndDirectPanTiltDelegate, this.onDirectPanTiltCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginWLLED_Control(string MAC, string SessionID, int NewState, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWLLED_Control(MAC, SessionID, NewState, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndWLLED_Control(System.IAsyncResult result) {
            return base.Channel.EndWLLED_Control(result);
        }
        
        private System.IAsyncResult OnBeginWLLED_Control(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int NewState = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginWLLED_Control(MAC, SessionID, NewState, callback, asyncState);
        }
        
        private object[] OnEndWLLED_Control(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndWLLED_Control(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWLLED_ControlCompleted(object state) {
            if ((this.WLLED_ControlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WLLED_ControlCompleted(this, new WLLED_ControlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WLLED_ControlAsync(string MAC, string SessionID, int NewState) {
            this.WLLED_ControlAsync(MAC, SessionID, NewState, null);
        }
        
        public void WLLED_ControlAsync(string MAC, string SessionID, int NewState, object userState) {
            if ((this.onBeginWLLED_ControlDelegate == null)) {
                this.onBeginWLLED_ControlDelegate = new BeginOperationDelegate(this.OnBeginWLLED_Control);
            }
            if ((this.onEndWLLED_ControlDelegate == null)) {
                this.onEndWLLED_ControlDelegate = new EndOperationDelegate(this.OnEndWLLED_Control);
            }
            if ((this.onWLLED_ControlCompletedDelegate == null)) {
                this.onWLLED_ControlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWLLED_ControlCompleted);
            }
            base.InvokeAsync(this.onBeginWLLED_ControlDelegate, new object[] {
                        MAC,
                        SessionID,
                        NewState}, this.onEndWLLED_ControlDelegate, this.onWLLED_ControlCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginOutput_Control(string MAC, string SessionID, int OutputNumber, int NewState, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOutput_Control(MAC, SessionID, OutputNumber, NewState, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndOutput_Control(System.IAsyncResult result) {
            return base.Channel.EndOutput_Control(result);
        }
        
        private System.IAsyncResult OnBeginOutput_Control(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int OutputNumber = ((int)(inValues[2]));
            int NewState = ((int)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginOutput_Control(MAC, SessionID, OutputNumber, NewState, callback, asyncState);
        }
        
        private object[] OnEndOutput_Control(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndOutput_Control(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOutput_ControlCompleted(object state) {
            if ((this.Output_ControlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Output_ControlCompleted(this, new Output_ControlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Output_ControlAsync(string MAC, string SessionID, int OutputNumber, int NewState) {
            this.Output_ControlAsync(MAC, SessionID, OutputNumber, NewState, null);
        }
        
        public void Output_ControlAsync(string MAC, string SessionID, int OutputNumber, int NewState, object userState) {
            if ((this.onBeginOutput_ControlDelegate == null)) {
                this.onBeginOutput_ControlDelegate = new BeginOperationDelegate(this.OnBeginOutput_Control);
            }
            if ((this.onEndOutput_ControlDelegate == null)) {
                this.onEndOutput_ControlDelegate = new EndOperationDelegate(this.OnEndOutput_Control);
            }
            if ((this.onOutput_ControlCompletedDelegate == null)) {
                this.onOutput_ControlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOutput_ControlCompleted);
            }
            base.InvokeAsync(this.onBeginOutput_ControlDelegate, new object[] {
                        MAC,
                        SessionID,
                        OutputNumber,
                        NewState}, this.onEndOutput_ControlDelegate, this.onOutput_ControlCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginTriggerVideoCapture(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTriggerVideoCapture(MAC, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndTriggerVideoCapture(System.IAsyncResult result) {
            return base.Channel.EndTriggerVideoCapture(result);
        }
        
        private System.IAsyncResult OnBeginTriggerVideoCapture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginTriggerVideoCapture(MAC, SessionID, callback, asyncState);
        }
        
        private object[] OnEndTriggerVideoCapture(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndTriggerVideoCapture(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTriggerVideoCaptureCompleted(object state) {
            if ((this.TriggerVideoCaptureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TriggerVideoCaptureCompleted(this, new TriggerVideoCaptureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TriggerVideoCaptureAsync(string MAC, string SessionID) {
            this.TriggerVideoCaptureAsync(MAC, SessionID, null);
        }
        
        public void TriggerVideoCaptureAsync(string MAC, string SessionID, object userState) {
            if ((this.onBeginTriggerVideoCaptureDelegate == null)) {
                this.onBeginTriggerVideoCaptureDelegate = new BeginOperationDelegate(this.OnBeginTriggerVideoCapture);
            }
            if ((this.onEndTriggerVideoCaptureDelegate == null)) {
                this.onEndTriggerVideoCaptureDelegate = new EndOperationDelegate(this.OnEndTriggerVideoCapture);
            }
            if ((this.onTriggerVideoCaptureCompletedDelegate == null)) {
                this.onTriggerVideoCaptureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTriggerVideoCaptureCompleted);
            }
            base.InvokeAsync(this.onBeginTriggerVideoCaptureDelegate, new object[] {
                        MAC,
                        SessionID}, this.onEndTriggerVideoCaptureDelegate, this.onTriggerVideoCaptureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginConfigStreamMode(string MAC, string SessionID, int ModeSelector, int Size, int FramesPerSecond, int QualityType, int Quality, int BitRate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConfigStreamMode(MAC, SessionID, ModeSelector, Size, FramesPerSecond, QualityType, Quality, BitRate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ConfigStreamModeResult TotalConnect.TotalConnectService.svcTC2APISoap.EndConfigStreamMode(System.IAsyncResult result) {
            return base.Channel.EndConfigStreamMode(result);
        }
        
        private System.IAsyncResult OnBeginConfigStreamMode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int ModeSelector = ((int)(inValues[2]));
            int Size = ((int)(inValues[3]));
            int FramesPerSecond = ((int)(inValues[4]));
            int QualityType = ((int)(inValues[5]));
            int Quality = ((int)(inValues[6]));
            int BitRate = ((int)(inValues[7]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginConfigStreamMode(MAC, SessionID, ModeSelector, Size, FramesPerSecond, QualityType, Quality, BitRate, callback, asyncState);
        }
        
        private object[] OnEndConfigStreamMode(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ConfigStreamModeResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndConfigStreamMode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConfigStreamModeCompleted(object state) {
            if ((this.ConfigStreamModeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConfigStreamModeCompleted(this, new ConfigStreamModeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConfigStreamModeAsync(string MAC, string SessionID, int ModeSelector, int Size, int FramesPerSecond, int QualityType, int Quality, int BitRate) {
            this.ConfigStreamModeAsync(MAC, SessionID, ModeSelector, Size, FramesPerSecond, QualityType, Quality, BitRate, null);
        }
        
        public void ConfigStreamModeAsync(string MAC, string SessionID, int ModeSelector, int Size, int FramesPerSecond, int QualityType, int Quality, int BitRate, object userState) {
            if ((this.onBeginConfigStreamModeDelegate == null)) {
                this.onBeginConfigStreamModeDelegate = new BeginOperationDelegate(this.OnBeginConfigStreamMode);
            }
            if ((this.onEndConfigStreamModeDelegate == null)) {
                this.onEndConfigStreamModeDelegate = new EndOperationDelegate(this.OnEndConfigStreamMode);
            }
            if ((this.onConfigStreamModeCompletedDelegate == null)) {
                this.onConfigStreamModeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConfigStreamModeCompleted);
            }
            base.InvokeAsync(this.onBeginConfigStreamModeDelegate, new object[] {
                        MAC,
                        SessionID,
                        ModeSelector,
                        Size,
                        FramesPerSecond,
                        QualityType,
                        Quality,
                        BitRate}, this.onEndConfigStreamModeDelegate, this.onConfigStreamModeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetLocationCameraList(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationCameraList(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraListResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetLocationCameraList(System.IAsyncResult result) {
            return base.Channel.EndGetLocationCameraList(result);
        }
        
        private System.IAsyncResult OnBeginGetLocationCameraList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetLocationCameraList(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndGetLocationCameraList(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraListResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetLocationCameraList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationCameraListCompleted(object state) {
            if ((this.GetLocationCameraListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationCameraListCompleted(this, new GetLocationCameraListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationCameraListAsync(string SessionID, long LocationID) {
            this.GetLocationCameraListAsync(SessionID, LocationID, null);
        }
        
        public void GetLocationCameraListAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginGetLocationCameraListDelegate == null)) {
                this.onBeginGetLocationCameraListDelegate = new BeginOperationDelegate(this.OnBeginGetLocationCameraList);
            }
            if ((this.onEndGetLocationCameraListDelegate == null)) {
                this.onEndGetLocationCameraListDelegate = new EndOperationDelegate(this.OnEndGetLocationCameraList);
            }
            if ((this.onGetLocationCameraListCompletedDelegate == null)) {
                this.onGetLocationCameraListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationCameraListCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationCameraListDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndGetLocationCameraListDelegate, this.onGetLocationCameraListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetTimeZones(string SessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeZones(SessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.TimeZonesResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetTimeZones(System.IAsyncResult result) {
            return base.Channel.EndGetTimeZones(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeZones(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetTimeZones(SessionId, callback, asyncState);
        }
        
        private object[] OnEndGetTimeZones(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.TimeZonesResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetTimeZones(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeZonesCompleted(object state) {
            if ((this.GetTimeZonesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeZonesCompleted(this, new GetTimeZonesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeZonesAsync(string SessionId) {
            this.GetTimeZonesAsync(SessionId, null);
        }
        
        public void GetTimeZonesAsync(string SessionId, object userState) {
            if ((this.onBeginGetTimeZonesDelegate == null)) {
                this.onBeginGetTimeZonesDelegate = new BeginOperationDelegate(this.OnBeginGetTimeZones);
            }
            if ((this.onEndGetTimeZonesDelegate == null)) {
                this.onEndGetTimeZonesDelegate = new EndOperationDelegate(this.OnEndGetTimeZones);
            }
            if ((this.onGetTimeZonesCompletedDelegate == null)) {
                this.onGetTimeZonesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeZonesCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeZonesDelegate, new object[] {
                        SessionId}, this.onEndGetTimeZonesDelegate, this.onGetTimeZonesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetVideoFileURLs(string SessionId, long LocationId, short FilterClass, long EventRecordId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVideoFileURLs(SessionId, LocationId, FilterClass, EventRecordId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.VideoFileURLResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetVideoFileURLs(System.IAsyncResult result) {
            return base.Channel.EndGetVideoFileURLs(result);
        }
        
        private System.IAsyncResult OnBeginGetVideoFileURLs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long LocationId = ((long)(inValues[1]));
            short FilterClass = ((short)(inValues[2]));
            long EventRecordId = ((long)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetVideoFileURLs(SessionId, LocationId, FilterClass, EventRecordId, callback, asyncState);
        }
        
        private object[] OnEndGetVideoFileURLs(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.VideoFileURLResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetVideoFileURLs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVideoFileURLsCompleted(object state) {
            if ((this.GetVideoFileURLsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVideoFileURLsCompleted(this, new GetVideoFileURLsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVideoFileURLsAsync(string SessionId, long LocationId, short FilterClass, long EventRecordId) {
            this.GetVideoFileURLsAsync(SessionId, LocationId, FilterClass, EventRecordId, null);
        }
        
        public void GetVideoFileURLsAsync(string SessionId, long LocationId, short FilterClass, long EventRecordId, object userState) {
            if ((this.onBeginGetVideoFileURLsDelegate == null)) {
                this.onBeginGetVideoFileURLsDelegate = new BeginOperationDelegate(this.OnBeginGetVideoFileURLs);
            }
            if ((this.onEndGetVideoFileURLsDelegate == null)) {
                this.onEndGetVideoFileURLsDelegate = new EndOperationDelegate(this.OnEndGetVideoFileURLs);
            }
            if ((this.onGetVideoFileURLsCompletedDelegate == null)) {
                this.onGetVideoFileURLsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVideoFileURLsCompleted);
            }
            base.InvokeAsync(this.onBeginGetVideoFileURLsDelegate, new object[] {
                        SessionId,
                        LocationId,
                        FilterClass,
                        EventRecordId}, this.onEndGetVideoFileURLsDelegate, this.onGetVideoFileURLsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetEventNotes(string SessionId, short FilterClass, long EventRecordId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventNotes(SessionId, FilterClass, EventRecordId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.NotesResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetEventNotes(System.IAsyncResult result) {
            return base.Channel.EndGetEventNotes(result);
        }
        
        private System.IAsyncResult OnBeginGetEventNotes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            short FilterClass = ((short)(inValues[1]));
            long EventRecordId = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetEventNotes(SessionId, FilterClass, EventRecordId, callback, asyncState);
        }
        
        private object[] OnEndGetEventNotes(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.NotesResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetEventNotes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventNotesCompleted(object state) {
            if ((this.GetEventNotesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventNotesCompleted(this, new GetEventNotesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventNotesAsync(string SessionId, short FilterClass, long EventRecordId) {
            this.GetEventNotesAsync(SessionId, FilterClass, EventRecordId, null);
        }
        
        public void GetEventNotesAsync(string SessionId, short FilterClass, long EventRecordId, object userState) {
            if ((this.onBeginGetEventNotesDelegate == null)) {
                this.onBeginGetEventNotesDelegate = new BeginOperationDelegate(this.OnBeginGetEventNotes);
            }
            if ((this.onEndGetEventNotesDelegate == null)) {
                this.onEndGetEventNotesDelegate = new EndOperationDelegate(this.OnEndGetEventNotes);
            }
            if ((this.onGetEventNotesCompletedDelegate == null)) {
                this.onGetEventNotesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventNotesCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventNotesDelegate, new object[] {
                        SessionId,
                        FilterClass,
                        EventRecordId}, this.onEndGetEventNotesDelegate, this.onGetEventNotesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetEvents(string SessionId, short FilterClass, long LocationId, long DeviceId, short MaxRecords, long EventTypeFilter, bool ShowHidden, string StartDateTime, string EndDateTime, short DateFormat, short TimeFormat, int SortOrder, long LastEventIdReceived, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEvents(SessionId, FilterClass, LocationId, DeviceId, MaxRecords, EventTypeFilter, ShowHidden, StartDateTime, EndDateTime, DateFormat, TimeFormat, SortOrder, LastEventIdReceived, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EventsResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetEvents(System.IAsyncResult result) {
            return base.Channel.EndGetEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            short FilterClass = ((short)(inValues[1]));
            long LocationId = ((long)(inValues[2]));
            long DeviceId = ((long)(inValues[3]));
            short MaxRecords = ((short)(inValues[4]));
            long EventTypeFilter = ((long)(inValues[5]));
            bool ShowHidden = ((bool)(inValues[6]));
            string StartDateTime = ((string)(inValues[7]));
            string EndDateTime = ((string)(inValues[8]));
            short DateFormat = ((short)(inValues[9]));
            short TimeFormat = ((short)(inValues[10]));
            int SortOrder = ((int)(inValues[11]));
            long LastEventIdReceived = ((long)(inValues[12]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetEvents(SessionId, FilterClass, LocationId, DeviceId, MaxRecords, EventTypeFilter, ShowHidden, StartDateTime, EndDateTime, DateFormat, TimeFormat, SortOrder, LastEventIdReceived, callback, asyncState);
        }
        
        private object[] OnEndGetEvents(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EventsResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventsCompleted(object state) {
            if ((this.GetEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventsCompleted(this, new GetEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventsAsync(string SessionId, short FilterClass, long LocationId, long DeviceId, short MaxRecords, long EventTypeFilter, bool ShowHidden, string StartDateTime, string EndDateTime, short DateFormat, short TimeFormat, int SortOrder, long LastEventIdReceived) {
            this.GetEventsAsync(SessionId, FilterClass, LocationId, DeviceId, MaxRecords, EventTypeFilter, ShowHidden, StartDateTime, EndDateTime, DateFormat, TimeFormat, SortOrder, LastEventIdReceived, null);
        }
        
        public void GetEventsAsync(string SessionId, short FilterClass, long LocationId, long DeviceId, short MaxRecords, long EventTypeFilter, bool ShowHidden, string StartDateTime, string EndDateTime, short DateFormat, short TimeFormat, int SortOrder, long LastEventIdReceived, object userState) {
            if ((this.onBeginGetEventsDelegate == null)) {
                this.onBeginGetEventsDelegate = new BeginOperationDelegate(this.OnBeginGetEvents);
            }
            if ((this.onEndGetEventsDelegate == null)) {
                this.onEndGetEventsDelegate = new EndOperationDelegate(this.OnEndGetEvents);
            }
            if ((this.onGetEventsCompletedDelegate == null)) {
                this.onGetEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventsDelegate, new object[] {
                        SessionId,
                        FilterClass,
                        LocationId,
                        DeviceId,
                        MaxRecords,
                        EventTypeFilter,
                        ShowHidden,
                        StartDateTime,
                        EndDateTime,
                        DateFormat,
                        TimeFormat,
                        SortOrder,
                        LastEventIdReceived}, this.onEndGetEventsDelegate, this.onGetEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetEventTypeFilter(string SessionId, short FilterClass, long LocationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventTypeFilter(SessionId, FilterClass, LocationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EventTypeFilterResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetEventTypeFilter(System.IAsyncResult result) {
            return base.Channel.EndGetEventTypeFilter(result);
        }
        
        private System.IAsyncResult OnBeginGetEventTypeFilter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            short FilterClass = ((short)(inValues[1]));
            long LocationId = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetEventTypeFilter(SessionId, FilterClass, LocationId, callback, asyncState);
        }
        
        private object[] OnEndGetEventTypeFilter(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EventTypeFilterResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetEventTypeFilter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventTypeFilterCompleted(object state) {
            if ((this.GetEventTypeFilterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventTypeFilterCompleted(this, new GetEventTypeFilterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventTypeFilterAsync(string SessionId, short FilterClass, long LocationId) {
            this.GetEventTypeFilterAsync(SessionId, FilterClass, LocationId, null);
        }
        
        public void GetEventTypeFilterAsync(string SessionId, short FilterClass, long LocationId, object userState) {
            if ((this.onBeginGetEventTypeFilterDelegate == null)) {
                this.onBeginGetEventTypeFilterDelegate = new BeginOperationDelegate(this.OnBeginGetEventTypeFilter);
            }
            if ((this.onEndGetEventTypeFilterDelegate == null)) {
                this.onEndGetEventTypeFilterDelegate = new EndOperationDelegate(this.OnEndGetEventTypeFilter);
            }
            if ((this.onGetEventTypeFilterCompletedDelegate == null)) {
                this.onGetEventTypeFilterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventTypeFilterCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventTypeFilterDelegate, new object[] {
                        SessionId,
                        FilterClass,
                        LocationId}, this.onEndGetEventTypeFilterDelegate, this.onGetEventTypeFilterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetLiveEvents(string SessionId, long LocationId, long LastEventIdReceived, short MaxRecords, short DateFormat, short TimeFormat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLiveEvents(SessionId, LocationId, LastEventIdReceived, MaxRecords, DateFormat, TimeFormat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EventsResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetLiveEvents(System.IAsyncResult result) {
            return base.Channel.EndGetLiveEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetLiveEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long LocationId = ((long)(inValues[1]));
            long LastEventIdReceived = ((long)(inValues[2]));
            short MaxRecords = ((short)(inValues[3]));
            short DateFormat = ((short)(inValues[4]));
            short TimeFormat = ((short)(inValues[5]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetLiveEvents(SessionId, LocationId, LastEventIdReceived, MaxRecords, DateFormat, TimeFormat, callback, asyncState);
        }
        
        private object[] OnEndGetLiveEvents(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EventsResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetLiveEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLiveEventsCompleted(object state) {
            if ((this.GetLiveEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLiveEventsCompleted(this, new GetLiveEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLiveEventsAsync(string SessionId, long LocationId, long LastEventIdReceived, short MaxRecords, short DateFormat, short TimeFormat) {
            this.GetLiveEventsAsync(SessionId, LocationId, LastEventIdReceived, MaxRecords, DateFormat, TimeFormat, null);
        }
        
        public void GetLiveEventsAsync(string SessionId, long LocationId, long LastEventIdReceived, short MaxRecords, short DateFormat, short TimeFormat, object userState) {
            if ((this.onBeginGetLiveEventsDelegate == null)) {
                this.onBeginGetLiveEventsDelegate = new BeginOperationDelegate(this.OnBeginGetLiveEvents);
            }
            if ((this.onEndGetLiveEventsDelegate == null)) {
                this.onEndGetLiveEventsDelegate = new EndOperationDelegate(this.OnEndGetLiveEvents);
            }
            if ((this.onGetLiveEventsCompletedDelegate == null)) {
                this.onGetLiveEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLiveEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLiveEventsDelegate, new object[] {
                        SessionId,
                        LocationId,
                        LastEventIdReceived,
                        MaxRecords,
                        DateFormat,
                        TimeFormat}, this.onEndGetLiveEventsDelegate, this.onGetLiveEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateEventNotes(string SessionId, short FilterClass, long EventRecordId, string Note, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateEventNotes(SessionId, FilterClass, EventRecordId, Note, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateEventNotes(System.IAsyncResult result) {
            return base.Channel.EndUpdateEventNotes(result);
        }
        
        private System.IAsyncResult OnBeginUpdateEventNotes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            short FilterClass = ((short)(inValues[1]));
            long EventRecordId = ((long)(inValues[2]));
            string Note = ((string)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateEventNotes(SessionId, FilterClass, EventRecordId, Note, callback, asyncState);
        }
        
        private object[] OnEndUpdateEventNotes(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateEventNotes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateEventNotesCompleted(object state) {
            if ((this.UpdateEventNotesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateEventNotesCompleted(this, new UpdateEventNotesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateEventNotesAsync(string SessionId, short FilterClass, long EventRecordId, string Note) {
            this.UpdateEventNotesAsync(SessionId, FilterClass, EventRecordId, Note, null);
        }
        
        public void UpdateEventNotesAsync(string SessionId, short FilterClass, long EventRecordId, string Note, object userState) {
            if ((this.onBeginUpdateEventNotesDelegate == null)) {
                this.onBeginUpdateEventNotesDelegate = new BeginOperationDelegate(this.OnBeginUpdateEventNotes);
            }
            if ((this.onEndUpdateEventNotesDelegate == null)) {
                this.onEndUpdateEventNotesDelegate = new EndOperationDelegate(this.OnEndUpdateEventNotes);
            }
            if ((this.onUpdateEventNotesCompletedDelegate == null)) {
                this.onUpdateEventNotesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateEventNotesCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateEventNotesDelegate, new object[] {
                        SessionId,
                        FilterClass,
                        EventRecordId,
                        Note}, this.onEndUpdateEventNotesDelegate, this.onUpdateEventNotesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateEventRecordHideState(string SessionId, short FilterClass, long EventRecordId, bool IsHidden, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateEventRecordHideState(SessionId, FilterClass, EventRecordId, IsHidden, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateEventRecordHideState(System.IAsyncResult result) {
            return base.Channel.EndUpdateEventRecordHideState(result);
        }
        
        private System.IAsyncResult OnBeginUpdateEventRecordHideState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            short FilterClass = ((short)(inValues[1]));
            long EventRecordId = ((long)(inValues[2]));
            bool IsHidden = ((bool)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateEventRecordHideState(SessionId, FilterClass, EventRecordId, IsHidden, callback, asyncState);
        }
        
        private object[] OnEndUpdateEventRecordHideState(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateEventRecordHideState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateEventRecordHideStateCompleted(object state) {
            if ((this.UpdateEventRecordHideStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateEventRecordHideStateCompleted(this, new UpdateEventRecordHideStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateEventRecordHideStateAsync(string SessionId, short FilterClass, long EventRecordId, bool IsHidden) {
            this.UpdateEventRecordHideStateAsync(SessionId, FilterClass, EventRecordId, IsHidden, null);
        }
        
        public void UpdateEventRecordHideStateAsync(string SessionId, short FilterClass, long EventRecordId, bool IsHidden, object userState) {
            if ((this.onBeginUpdateEventRecordHideStateDelegate == null)) {
                this.onBeginUpdateEventRecordHideStateDelegate = new BeginOperationDelegate(this.OnBeginUpdateEventRecordHideState);
            }
            if ((this.onEndUpdateEventRecordHideStateDelegate == null)) {
                this.onEndUpdateEventRecordHideStateDelegate = new EndOperationDelegate(this.OnEndUpdateEventRecordHideState);
            }
            if ((this.onUpdateEventRecordHideStateCompletedDelegate == null)) {
                this.onUpdateEventRecordHideStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateEventRecordHideStateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateEventRecordHideStateDelegate, new object[] {
                        SessionId,
                        FilterClass,
                        EventRecordId,
                        IsHidden}, this.onEndUpdateEventRecordHideStateDelegate, this.onUpdateEventRecordHideStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateEventRecordLockState(string SessionId, short FilterClass, long EventRecordId, bool IsLocked, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateEventRecordLockState(SessionId, FilterClass, EventRecordId, IsLocked, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateEventRecordLockState(System.IAsyncResult result) {
            return base.Channel.EndUpdateEventRecordLockState(result);
        }
        
        private System.IAsyncResult OnBeginUpdateEventRecordLockState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            short FilterClass = ((short)(inValues[1]));
            long EventRecordId = ((long)(inValues[2]));
            bool IsLocked = ((bool)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateEventRecordLockState(SessionId, FilterClass, EventRecordId, IsLocked, callback, asyncState);
        }
        
        private object[] OnEndUpdateEventRecordLockState(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateEventRecordLockState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateEventRecordLockStateCompleted(object state) {
            if ((this.UpdateEventRecordLockStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateEventRecordLockStateCompleted(this, new UpdateEventRecordLockStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateEventRecordLockStateAsync(string SessionId, short FilterClass, long EventRecordId, bool IsLocked) {
            this.UpdateEventRecordLockStateAsync(SessionId, FilterClass, EventRecordId, IsLocked, null);
        }
        
        public void UpdateEventRecordLockStateAsync(string SessionId, short FilterClass, long EventRecordId, bool IsLocked, object userState) {
            if ((this.onBeginUpdateEventRecordLockStateDelegate == null)) {
                this.onBeginUpdateEventRecordLockStateDelegate = new BeginOperationDelegate(this.OnBeginUpdateEventRecordLockState);
            }
            if ((this.onEndUpdateEventRecordLockStateDelegate == null)) {
                this.onEndUpdateEventRecordLockStateDelegate = new EndOperationDelegate(this.OnEndUpdateEventRecordLockState);
            }
            if ((this.onUpdateEventRecordLockStateCompletedDelegate == null)) {
                this.onUpdateEventRecordLockStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateEventRecordLockStateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateEventRecordLockStateDelegate, new object[] {
                        SessionId,
                        FilterClass,
                        EventRecordId,
                        IsLocked}, this.onEndUpdateEventRecordLockStateDelegate, this.onUpdateEventRecordLockStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginRemoteAuthenticateUserLogin(string userName, string password, int RemoteApplicationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoteAuthenticateUserLogin(userName, password, RemoteApplicationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults TotalConnect.TotalConnectService.svcTC2APISoap.EndRemoteAuthenticateUserLogin(System.IAsyncResult result) {
            return base.Channel.EndRemoteAuthenticateUserLogin(result);
        }
        
        private System.IAsyncResult OnBeginRemoteAuthenticateUserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            int RemoteApplicationID = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginRemoteAuthenticateUserLogin(userName, password, RemoteApplicationID, callback, asyncState);
        }
        
        private object[] OnEndRemoteAuthenticateUserLogin(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndRemoteAuthenticateUserLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoteAuthenticateUserLoginCompleted(object state) {
            if ((this.RemoteAuthenticateUserLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoteAuthenticateUserLoginCompleted(this, new RemoteAuthenticateUserLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoteAuthenticateUserLoginAsync(string userName, string password, int RemoteApplicationID) {
            this.RemoteAuthenticateUserLoginAsync(userName, password, RemoteApplicationID, null);
        }
        
        public void RemoteAuthenticateUserLoginAsync(string userName, string password, int RemoteApplicationID, object userState) {
            if ((this.onBeginRemoteAuthenticateUserLoginDelegate == null)) {
                this.onBeginRemoteAuthenticateUserLoginDelegate = new BeginOperationDelegate(this.OnBeginRemoteAuthenticateUserLogin);
            }
            if ((this.onEndRemoteAuthenticateUserLoginDelegate == null)) {
                this.onEndRemoteAuthenticateUserLoginDelegate = new EndOperationDelegate(this.OnEndRemoteAuthenticateUserLogin);
            }
            if ((this.onRemoteAuthenticateUserLoginCompletedDelegate == null)) {
                this.onRemoteAuthenticateUserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoteAuthenticateUserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginRemoteAuthenticateUserLoginDelegate, new object[] {
                        userName,
                        password,
                        RemoteApplicationID}, this.onEndRemoteAuthenticateUserLoginDelegate, this.onRemoteAuthenticateUserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginAuthenticateUserLogin(string userName, string password, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateUserLogin(userName, password, ApplicationID, ApplicationVersion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AuthenticateLoginResults TotalConnect.TotalConnectService.svcTC2APISoap.EndAuthenticateUserLogin(System.IAsyncResult result) {
            return base.Channel.EndAuthenticateUserLogin(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateUserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            int ApplicationID = ((int)(inValues[2]));
            string ApplicationVersion = ((string)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginAuthenticateUserLogin(userName, password, ApplicationID, ApplicationVersion, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateUserLogin(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AuthenticateLoginResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndAuthenticateUserLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateUserLoginCompleted(object state) {
            if ((this.AuthenticateUserLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateUserLoginCompleted(this, new AuthenticateUserLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateUserLoginAsync(string userName, string password, int ApplicationID, string ApplicationVersion) {
            this.AuthenticateUserLoginAsync(userName, password, ApplicationID, ApplicationVersion, null);
        }
        
        public void AuthenticateUserLoginAsync(string userName, string password, int ApplicationID, string ApplicationVersion, object userState) {
            if ((this.onBeginAuthenticateUserLoginDelegate == null)) {
                this.onBeginAuthenticateUserLoginDelegate = new BeginOperationDelegate(this.OnBeginAuthenticateUserLogin);
            }
            if ((this.onEndAuthenticateUserLoginDelegate == null)) {
                this.onEndAuthenticateUserLoginDelegate = new EndOperationDelegate(this.OnEndAuthenticateUserLogin);
            }
            if ((this.onAuthenticateUserLoginCompletedDelegate == null)) {
                this.onAuthenticateUserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateUserLoginDelegate, new object[] {
                        userName,
                        password,
                        ApplicationID,
                        ApplicationVersion}, this.onEndAuthenticateUserLoginDelegate, this.onAuthenticateUserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginAuthenticateGUIDLogin(string GUID, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateGUIDLogin(GUID, ApplicationID, ApplicationVersion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AuthenticateLoginResults TotalConnect.TotalConnectService.svcTC2APISoap.EndAuthenticateGUIDLogin(System.IAsyncResult result) {
            return base.Channel.EndAuthenticateGUIDLogin(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateGUIDLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string GUID = ((string)(inValues[0]));
            int ApplicationID = ((int)(inValues[1]));
            string ApplicationVersion = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginAuthenticateGUIDLogin(GUID, ApplicationID, ApplicationVersion, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateGUIDLogin(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AuthenticateLoginResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndAuthenticateGUIDLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateGUIDLoginCompleted(object state) {
            if ((this.AuthenticateGUIDLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateGUIDLoginCompleted(this, new AuthenticateGUIDLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateGUIDLoginAsync(string GUID, int ApplicationID, string ApplicationVersion) {
            this.AuthenticateGUIDLoginAsync(GUID, ApplicationID, ApplicationVersion, null);
        }
        
        public void AuthenticateGUIDLoginAsync(string GUID, int ApplicationID, string ApplicationVersion, object userState) {
            if ((this.onBeginAuthenticateGUIDLoginDelegate == null)) {
                this.onBeginAuthenticateGUIDLoginDelegate = new BeginOperationDelegate(this.OnBeginAuthenticateGUIDLogin);
            }
            if ((this.onEndAuthenticateGUIDLoginDelegate == null)) {
                this.onEndAuthenticateGUIDLoginDelegate = new EndOperationDelegate(this.OnEndAuthenticateGUIDLogin);
            }
            if ((this.onAuthenticateGUIDLoginCompletedDelegate == null)) {
                this.onAuthenticateGUIDLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateGUIDLoginCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateGUIDLoginDelegate, new object[] {
                        GUID,
                        ApplicationID,
                        ApplicationVersion}, this.onEndAuthenticateGUIDLoginDelegate, this.onAuthenticateGUIDLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetSessionDetails(string SessionID, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSessionDetails(SessionID, ApplicationID, ApplicationVersion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SessionDetailResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetSessionDetails(System.IAsyncResult result) {
            return base.Channel.EndGetSessionDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetSessionDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int ApplicationID = ((int)(inValues[1]));
            string ApplicationVersion = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetSessionDetails(SessionID, ApplicationID, ApplicationVersion, callback, asyncState);
        }
        
        private object[] OnEndGetSessionDetails(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SessionDetailResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetSessionDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionDetailsCompleted(object state) {
            if ((this.GetSessionDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionDetailsCompleted(this, new GetSessionDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionDetailsAsync(string SessionID, int ApplicationID, string ApplicationVersion) {
            this.GetSessionDetailsAsync(SessionID, ApplicationID, ApplicationVersion, null);
        }
        
        public void GetSessionDetailsAsync(string SessionID, int ApplicationID, string ApplicationVersion, object userState) {
            if ((this.onBeginGetSessionDetailsDelegate == null)) {
                this.onBeginGetSessionDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetSessionDetails);
            }
            if ((this.onEndGetSessionDetailsDelegate == null)) {
                this.onEndGetSessionDetailsDelegate = new EndOperationDelegate(this.OnEndGetSessionDetails);
            }
            if ((this.onGetSessionDetailsCompletedDelegate == null)) {
                this.onGetSessionDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionDetailsDelegate, new object[] {
                        SessionID,
                        ApplicationID,
                        ApplicationVersion}, this.onEndGetSessionDetailsDelegate, this.onGetSessionDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginKeepAlive(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKeepAlive(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndKeepAlive(System.IAsyncResult result) {
            return base.Channel.EndKeepAlive(result);
        }
        
        private System.IAsyncResult OnBeginKeepAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginKeepAlive(SessionID, callback, asyncState);
        }
        
        private object[] OnEndKeepAlive(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndKeepAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnKeepAliveCompleted(object state) {
            if ((this.KeepAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KeepAliveCompleted(this, new KeepAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KeepAliveAsync(string SessionID) {
            this.KeepAliveAsync(SessionID, null);
        }
        
        public void KeepAliveAsync(string SessionID, object userState) {
            if ((this.onBeginKeepAliveDelegate == null)) {
                this.onBeginKeepAliveDelegate = new BeginOperationDelegate(this.OnBeginKeepAlive);
            }
            if ((this.onEndKeepAliveDelegate == null)) {
                this.onEndKeepAliveDelegate = new EndOperationDelegate(this.OnEndKeepAlive);
            }
            if ((this.onKeepAliveCompletedDelegate == null)) {
                this.onKeepAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKeepAliveCompleted);
            }
            base.InvokeAsync(this.onBeginKeepAliveDelegate, new object[] {
                        SessionID}, this.onEndKeepAliveDelegate, this.onKeepAliveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginLogout(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndLogout(System.IAsyncResult result) {
            return base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginLogout(SessionID, callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndLogout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync(string SessionID) {
            this.LogoutAsync(SessionID, null);
        }
        
        public void LogoutAsync(string SessionID, object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, new object[] {
                        SessionID}, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginAnythingChanged(string SessionID, long LocationID, TotalConnect.TotalConnectService.Module[] Modules, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAnythingChanged(SessionID, LocationID, Modules, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AnythingChangedResults TotalConnect.TotalConnectService.svcTC2APISoap.EndAnythingChanged(System.IAsyncResult result) {
            return base.Channel.EndAnythingChanged(result);
        }
        
        private System.IAsyncResult OnBeginAnythingChanged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            TotalConnect.TotalConnectService.Module[] Modules = ((TotalConnect.TotalConnectService.Module[])(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginAnythingChanged(SessionID, LocationID, Modules, callback, asyncState);
        }
        
        private object[] OnEndAnythingChanged(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AnythingChangedResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndAnythingChanged(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAnythingChangedCompleted(object state) {
            if ((this.AnythingChangedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AnythingChangedCompleted(this, new AnythingChangedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AnythingChangedAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.Module[] Modules) {
            this.AnythingChangedAsync(SessionID, LocationID, Modules, null);
        }
        
        public void AnythingChangedAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.Module[] Modules, object userState) {
            if ((this.onBeginAnythingChangedDelegate == null)) {
                this.onBeginAnythingChangedDelegate = new BeginOperationDelegate(this.OnBeginAnythingChanged);
            }
            if ((this.onEndAnythingChangedDelegate == null)) {
                this.onEndAnythingChangedDelegate = new EndOperationDelegate(this.OnEndAnythingChanged);
            }
            if ((this.onAnythingChangedCompletedDelegate == null)) {
                this.onAnythingChangedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAnythingChangedCompleted);
            }
            base.InvokeAsync(this.onBeginAnythingChangedDelegate, new object[] {
                        SessionID,
                        LocationID,
                        Modules}, this.onEndAnythingChangedDelegate, this.onAnythingChangedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetInterfaceSchemaDetails(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInterfaceSchemaDetails(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.InterfaceSchemaResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetInterfaceSchemaDetails(System.IAsyncResult result) {
            return base.Channel.EndGetInterfaceSchemaDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetInterfaceSchemaDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetInterfaceSchemaDetails(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetInterfaceSchemaDetails(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.InterfaceSchemaResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetInterfaceSchemaDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInterfaceSchemaDetailsCompleted(object state) {
            if ((this.GetInterfaceSchemaDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInterfaceSchemaDetailsCompleted(this, new GetInterfaceSchemaDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInterfaceSchemaDetailsAsync(string SessionID) {
            this.GetInterfaceSchemaDetailsAsync(SessionID, null);
        }
        
        public void GetInterfaceSchemaDetailsAsync(string SessionID, object userState) {
            if ((this.onBeginGetInterfaceSchemaDetailsDelegate == null)) {
                this.onBeginGetInterfaceSchemaDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetInterfaceSchemaDetails);
            }
            if ((this.onEndGetInterfaceSchemaDetailsDelegate == null)) {
                this.onEndGetInterfaceSchemaDetailsDelegate = new EndOperationDelegate(this.OnEndGetInterfaceSchemaDetails);
            }
            if ((this.onGetInterfaceSchemaDetailsCompletedDelegate == null)) {
                this.onGetInterfaceSchemaDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInterfaceSchemaDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetInterfaceSchemaDetailsDelegate, new object[] {
                        SessionID}, this.onEndGetInterfaceSchemaDetailsDelegate, this.onGetInterfaceSchemaDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetInterfaceSchemaDetailsEx(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInterfaceSchemaDetailsEx(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.InterfaceSchemaResultsEx TotalConnect.TotalConnectService.svcTC2APISoap.EndGetInterfaceSchemaDetailsEx(System.IAsyncResult result) {
            return base.Channel.EndGetInterfaceSchemaDetailsEx(result);
        }
        
        private System.IAsyncResult OnBeginGetInterfaceSchemaDetailsEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetInterfaceSchemaDetailsEx(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetInterfaceSchemaDetailsEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.InterfaceSchemaResultsEx retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetInterfaceSchemaDetailsEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInterfaceSchemaDetailsExCompleted(object state) {
            if ((this.GetInterfaceSchemaDetailsExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInterfaceSchemaDetailsExCompleted(this, new GetInterfaceSchemaDetailsExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInterfaceSchemaDetailsExAsync(string SessionID) {
            this.GetInterfaceSchemaDetailsExAsync(SessionID, null);
        }
        
        public void GetInterfaceSchemaDetailsExAsync(string SessionID, object userState) {
            if ((this.onBeginGetInterfaceSchemaDetailsExDelegate == null)) {
                this.onBeginGetInterfaceSchemaDetailsExDelegate = new BeginOperationDelegate(this.OnBeginGetInterfaceSchemaDetailsEx);
            }
            if ((this.onEndGetInterfaceSchemaDetailsExDelegate == null)) {
                this.onEndGetInterfaceSchemaDetailsExDelegate = new EndOperationDelegate(this.OnEndGetInterfaceSchemaDetailsEx);
            }
            if ((this.onGetInterfaceSchemaDetailsExCompletedDelegate == null)) {
                this.onGetInterfaceSchemaDetailsExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInterfaceSchemaDetailsExCompleted);
            }
            base.InvokeAsync(this.onBeginGetInterfaceSchemaDetailsExDelegate, new object[] {
                        SessionID}, this.onEndGetInterfaceSchemaDetailsExDelegate, this.onGetInterfaceSchemaDetailsExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetUsers(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.UserConfigurationResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetUsers(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.UserConfigurationResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync(string SessionID) {
            this.GetUsersAsync(SessionID, null);
        }
        
        public void GetUsersAsync(string SessionID, object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, new object[] {
                        SessionID}, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDeleteUserInfo(string SessionID, long UserId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUserInfo(SessionID, UserId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.DeleteUserInfoResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDeleteUserInfo(System.IAsyncResult result) {
            return base.Channel.EndDeleteUserInfo(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUserInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long UserId = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDeleteUserInfo(SessionID, UserId, callback, asyncState);
        }
        
        private object[] OnEndDeleteUserInfo(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.DeleteUserInfoResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDeleteUserInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserInfoCompleted(object state) {
            if ((this.DeleteUserInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserInfoCompleted(this, new DeleteUserInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserInfoAsync(string SessionID, long UserId) {
            this.DeleteUserInfoAsync(SessionID, UserId, null);
        }
        
        public void DeleteUserInfoAsync(string SessionID, long UserId, object userState) {
            if ((this.onBeginDeleteUserInfoDelegate == null)) {
                this.onBeginDeleteUserInfoDelegate = new BeginOperationDelegate(this.OnBeginDeleteUserInfo);
            }
            if ((this.onEndDeleteUserInfoDelegate == null)) {
                this.onEndDeleteUserInfoDelegate = new EndOperationDelegate(this.OnEndDeleteUserInfo);
            }
            if ((this.onDeleteUserInfoCompletedDelegate == null)) {
                this.onDeleteUserInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserInfoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserInfoDelegate, new object[] {
                        SessionID,
                        UserId}, this.onEndDeleteUserInfoDelegate, this.onDeleteUserInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDisableEnableUser(string SessionID, long UserId, bool StateToSet, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisableEnableUser(SessionID, UserId, StateToSet, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.DisableEnableUserResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDisableEnableUser(System.IAsyncResult result) {
            return base.Channel.EndDisableEnableUser(result);
        }
        
        private System.IAsyncResult OnBeginDisableEnableUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long UserId = ((long)(inValues[1]));
            bool StateToSet = ((bool)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDisableEnableUser(SessionID, UserId, StateToSet, callback, asyncState);
        }
        
        private object[] OnEndDisableEnableUser(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.DisableEnableUserResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDisableEnableUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisableEnableUserCompleted(object state) {
            if ((this.DisableEnableUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisableEnableUserCompleted(this, new DisableEnableUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisableEnableUserAsync(string SessionID, long UserId, bool StateToSet) {
            this.DisableEnableUserAsync(SessionID, UserId, StateToSet, null);
        }
        
        public void DisableEnableUserAsync(string SessionID, long UserId, bool StateToSet, object userState) {
            if ((this.onBeginDisableEnableUserDelegate == null)) {
                this.onBeginDisableEnableUserDelegate = new BeginOperationDelegate(this.OnBeginDisableEnableUser);
            }
            if ((this.onEndDisableEnableUserDelegate == null)) {
                this.onEndDisableEnableUserDelegate = new EndOperationDelegate(this.OnEndDisableEnableUser);
            }
            if ((this.onDisableEnableUserCompletedDelegate == null)) {
                this.onDisableEnableUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisableEnableUserCompleted);
            }
            base.InvokeAsync(this.onBeginDisableEnableUserDelegate, new object[] {
                        SessionID,
                        UserId,
                        StateToSet}, this.onEndDisableEnableUserDelegate, this.onDisableEnableUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateEula(string SessionID, long UserId, int Eula, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateEula(SessionID, UserId, Eula, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateEula(System.IAsyncResult result) {
            return base.Channel.EndUpdateEula(result);
        }
        
        private System.IAsyncResult OnBeginUpdateEula(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long UserId = ((long)(inValues[1]));
            int Eula = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateEula(SessionID, UserId, Eula, callback, asyncState);
        }
        
        private object[] OnEndUpdateEula(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateEula(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateEulaCompleted(object state) {
            if ((this.UpdateEulaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateEulaCompleted(this, new UpdateEulaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateEulaAsync(string SessionID, long UserId, int Eula) {
            this.UpdateEulaAsync(SessionID, UserId, Eula, null);
        }
        
        public void UpdateEulaAsync(string SessionID, long UserId, int Eula, object userState) {
            if ((this.onBeginUpdateEulaDelegate == null)) {
                this.onBeginUpdateEulaDelegate = new BeginOperationDelegate(this.OnBeginUpdateEula);
            }
            if ((this.onEndUpdateEulaDelegate == null)) {
                this.onEndUpdateEulaDelegate = new EndOperationDelegate(this.OnEndUpdateEula);
            }
            if ((this.onUpdateEulaCompletedDelegate == null)) {
                this.onUpdateEulaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateEulaCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateEulaDelegate, new object[] {
                        SessionID,
                        UserId,
                        Eula}, this.onEndUpdateEulaDelegate, this.onUpdateEulaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetUserInfo(string SessionID, long UserId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserInfo(SessionID, UserId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.UserInfoResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetUserInfo(System.IAsyncResult result) {
            return base.Channel.EndGetUserInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetUserInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long UserId = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetUserInfo(SessionID, UserId, callback, asyncState);
        }
        
        private object[] OnEndGetUserInfo(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.UserInfoResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetUserInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserInfoCompleted(object state) {
            if ((this.GetUserInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserInfoAsync(string SessionID, long UserId) {
            this.GetUserInfoAsync(SessionID, UserId, null);
        }
        
        public void GetUserInfoAsync(string SessionID, long UserId, object userState) {
            if ((this.onBeginGetUserInfoDelegate == null)) {
                this.onBeginGetUserInfoDelegate = new BeginOperationDelegate(this.OnBeginGetUserInfo);
            }
            if ((this.onEndGetUserInfoDelegate == null)) {
                this.onEndGetUserInfoDelegate = new EndOperationDelegate(this.OnEndGetUserInfo);
            }
            if ((this.onGetUserInfoCompletedDelegate == null)) {
                this.onGetUserInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserInfoDelegate, new object[] {
                        SessionID,
                        UserId}, this.onEndGetUserInfoDelegate, this.onGetUserInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDeleteUser(string SessionID, long UserId, int UserTypeID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(SessionID, UserId, UserTypeID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.DeleteUserResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDeleteUser(System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long UserId = ((long)(inValues[1]));
            int UserTypeID = ((int)(inValues[2]));
            string AdditionalInput = ((string)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDeleteUser(SessionID, UserId, UserTypeID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.DeleteUserResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDeleteUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(string SessionID, long UserId, int UserTypeID, string AdditionalInput) {
            this.DeleteUserAsync(SessionID, UserId, UserTypeID, AdditionalInput, null);
        }
        
        public void DeleteUserAsync(string SessionID, long UserId, int UserTypeID, string AdditionalInput, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        SessionID,
                        UserId,
                        UserTypeID,
                        AdditionalInput}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDisableEnableUserEx(string SessionID, long UserId, int UserTypeId, bool StateToSet, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisableEnableUserEx(SessionID, UserId, UserTypeId, StateToSet, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.DisableEnableUserResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDisableEnableUserEx(System.IAsyncResult result) {
            return base.Channel.EndDisableEnableUserEx(result);
        }
        
        private System.IAsyncResult OnBeginDisableEnableUserEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long UserId = ((long)(inValues[1]));
            int UserTypeId = ((int)(inValues[2]));
            bool StateToSet = ((bool)(inValues[3]));
            string AdditionalInput = ((string)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDisableEnableUserEx(SessionID, UserId, UserTypeId, StateToSet, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndDisableEnableUserEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.DisableEnableUserResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDisableEnableUserEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisableEnableUserExCompleted(object state) {
            if ((this.DisableEnableUserExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisableEnableUserExCompleted(this, new DisableEnableUserExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisableEnableUserExAsync(string SessionID, long UserId, int UserTypeId, bool StateToSet, string AdditionalInput) {
            this.DisableEnableUserExAsync(SessionID, UserId, UserTypeId, StateToSet, AdditionalInput, null);
        }
        
        public void DisableEnableUserExAsync(string SessionID, long UserId, int UserTypeId, bool StateToSet, string AdditionalInput, object userState) {
            if ((this.onBeginDisableEnableUserExDelegate == null)) {
                this.onBeginDisableEnableUserExDelegate = new BeginOperationDelegate(this.OnBeginDisableEnableUserEx);
            }
            if ((this.onEndDisableEnableUserExDelegate == null)) {
                this.onEndDisableEnableUserExDelegate = new EndOperationDelegate(this.OnEndDisableEnableUserEx);
            }
            if ((this.onDisableEnableUserExCompletedDelegate == null)) {
                this.onDisableEnableUserExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisableEnableUserExCompleted);
            }
            base.InvokeAsync(this.onBeginDisableEnableUserExDelegate, new object[] {
                        SessionID,
                        UserId,
                        UserTypeId,
                        StateToSet,
                        AdditionalInput}, this.onEndDisableEnableUserExDelegate, this.onDisableEnableUserExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetUserDetails(string SessionID, long ManageUserId, int UserTypeId, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserDetails(SessionID, ManageUserId, UserTypeId, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.UserDetailResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetUserDetails(System.IAsyncResult result) {
            return base.Channel.EndGetUserDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetUserDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long ManageUserId = ((long)(inValues[1]));
            int UserTypeId = ((int)(inValues[2]));
            string AdditionalInput = ((string)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetUserDetails(SessionID, ManageUserId, UserTypeId, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetUserDetails(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.UserDetailResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetUserDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserDetailsCompleted(object state) {
            if ((this.GetUserDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserDetailsCompleted(this, new GetUserDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserDetailsAsync(string SessionID, long ManageUserId, int UserTypeId, string AdditionalInput) {
            this.GetUserDetailsAsync(SessionID, ManageUserId, UserTypeId, AdditionalInput, null);
        }
        
        public void GetUserDetailsAsync(string SessionID, long ManageUserId, int UserTypeId, string AdditionalInput, object userState) {
            if ((this.onBeginGetUserDetailsDelegate == null)) {
                this.onBeginGetUserDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetUserDetails);
            }
            if ((this.onEndGetUserDetailsDelegate == null)) {
                this.onEndGetUserDetailsDelegate = new EndOperationDelegate(this.OnEndGetUserDetails);
            }
            if ((this.onGetUserDetailsCompletedDelegate == null)) {
                this.onGetUserDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDetailsDelegate, new object[] {
                        SessionID,
                        ManageUserId,
                        UserTypeId,
                        AdditionalInput}, this.onEndGetUserDetailsDelegate, this.onGetUserDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSaveUser(string SessionID, TotalConnect.TotalConnectService.UserDetails UserDetails, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUser(SessionID, UserDetails, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SaveUserResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSaveUser(System.IAsyncResult result) {
            return base.Channel.EndSaveUser(result);
        }
        
        private System.IAsyncResult OnBeginSaveUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.UserDetails UserDetails = ((TotalConnect.TotalConnectService.UserDetails)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSaveUser(SessionID, UserDetails, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndSaveUser(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SaveUserResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSaveUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUserCompleted(object state) {
            if ((this.SaveUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserCompleted(this, new SaveUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserAsync(string SessionID, TotalConnect.TotalConnectService.UserDetails UserDetails, string AdditionalInput) {
            this.SaveUserAsync(SessionID, UserDetails, AdditionalInput, null);
        }
        
        public void SaveUserAsync(string SessionID, TotalConnect.TotalConnectService.UserDetails UserDetails, string AdditionalInput, object userState) {
            if ((this.onBeginSaveUserDelegate == null)) {
                this.onBeginSaveUserDelegate = new BeginOperationDelegate(this.OnBeginSaveUser);
            }
            if ((this.onEndSaveUserDelegate == null)) {
                this.onEndSaveUserDelegate = new EndOperationDelegate(this.OnEndSaveUser);
            }
            if ((this.onSaveUserCompletedDelegate == null)) {
                this.onSaveUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserDelegate, new object[] {
                        SessionID,
                        UserDetails,
                        AdditionalInput}, this.onEndSaveUserDelegate, this.onSaveUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetUsersEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsersEx(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.UserListResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetUsersEx(System.IAsyncResult result) {
            return base.Channel.EndGetUsersEx(result);
        }
        
        private System.IAsyncResult OnBeginGetUsersEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetUsersEx(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetUsersEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.UserListResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetUsersEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersExCompleted(object state) {
            if ((this.GetUsersExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersExCompleted(this, new GetUsersExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersExAsync(string SessionID, long LocationID, string AdditionalInput) {
            this.GetUsersExAsync(SessionID, LocationID, AdditionalInput, null);
        }
        
        public void GetUsersExAsync(string SessionID, long LocationID, string AdditionalInput, object userState) {
            if ((this.onBeginGetUsersExDelegate == null)) {
                this.onBeginGetUsersExDelegate = new BeginOperationDelegate(this.OnBeginGetUsersEx);
            }
            if ((this.onEndGetUsersExDelegate == null)) {
                this.onEndGetUsersExDelegate = new EndOperationDelegate(this.OnEndGetUsersEx);
            }
            if ((this.onGetUsersExCompletedDelegate == null)) {
                this.onGetUsersExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersExCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersExDelegate, new object[] {
                        SessionID,
                        LocationID,
                        AdditionalInput}, this.onEndGetUsersExDelegate, this.onGetUsersExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSynchronizePanelUser(string SessionID, TotalConnect.TotalConnectService.DeviceAuthorizingCode[] DeviceList, bool StatusOnly, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSynchronizePanelUser(SessionID, DeviceList, StatusOnly, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SynchronizeUserResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSynchronizePanelUser(System.IAsyncResult result) {
            return base.Channel.EndSynchronizePanelUser(result);
        }
        
        private System.IAsyncResult OnBeginSynchronizePanelUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.DeviceAuthorizingCode[] DeviceList = ((TotalConnect.TotalConnectService.DeviceAuthorizingCode[])(inValues[1]));
            bool StatusOnly = ((bool)(inValues[2]));
            string AdditionalInput = ((string)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSynchronizePanelUser(SessionID, DeviceList, StatusOnly, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndSynchronizePanelUser(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SynchronizeUserResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSynchronizePanelUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSynchronizePanelUserCompleted(object state) {
            if ((this.SynchronizePanelUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SynchronizePanelUserCompleted(this, new SynchronizePanelUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SynchronizePanelUserAsync(string SessionID, TotalConnect.TotalConnectService.DeviceAuthorizingCode[] DeviceList, bool StatusOnly, string AdditionalInput) {
            this.SynchronizePanelUserAsync(SessionID, DeviceList, StatusOnly, AdditionalInput, null);
        }
        
        public void SynchronizePanelUserAsync(string SessionID, TotalConnect.TotalConnectService.DeviceAuthorizingCode[] DeviceList, bool StatusOnly, string AdditionalInput, object userState) {
            if ((this.onBeginSynchronizePanelUserDelegate == null)) {
                this.onBeginSynchronizePanelUserDelegate = new BeginOperationDelegate(this.OnBeginSynchronizePanelUser);
            }
            if ((this.onEndSynchronizePanelUserDelegate == null)) {
                this.onEndSynchronizePanelUserDelegate = new EndOperationDelegate(this.OnEndSynchronizePanelUser);
            }
            if ((this.onSynchronizePanelUserCompletedDelegate == null)) {
                this.onSynchronizePanelUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSynchronizePanelUserCompleted);
            }
            base.InvokeAsync(this.onBeginSynchronizePanelUserDelegate, new object[] {
                        SessionID,
                        DeviceList,
                        StatusOnly,
                        AdditionalInput}, this.onEndSynchronizePanelUserDelegate, this.onSynchronizePanelUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetSMSEmailCarriers(string SessionID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSMSEmailCarriers(SessionID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SMSEmailCarrierResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetSMSEmailCarriers(System.IAsyncResult result) {
            return base.Channel.EndGetSMSEmailCarriers(result);
        }
        
        private System.IAsyncResult OnBeginGetSMSEmailCarriers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string AdditionalInput = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetSMSEmailCarriers(SessionID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetSMSEmailCarriers(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SMSEmailCarrierResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetSMSEmailCarriers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSMSEmailCarriersCompleted(object state) {
            if ((this.GetSMSEmailCarriersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSMSEmailCarriersCompleted(this, new GetSMSEmailCarriersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSMSEmailCarriersAsync(string SessionID, string AdditionalInput) {
            this.GetSMSEmailCarriersAsync(SessionID, AdditionalInput, null);
        }
        
        public void GetSMSEmailCarriersAsync(string SessionID, string AdditionalInput, object userState) {
            if ((this.onBeginGetSMSEmailCarriersDelegate == null)) {
                this.onBeginGetSMSEmailCarriersDelegate = new BeginOperationDelegate(this.OnBeginGetSMSEmailCarriers);
            }
            if ((this.onEndGetSMSEmailCarriersDelegate == null)) {
                this.onEndGetSMSEmailCarriersDelegate = new EndOperationDelegate(this.OnEndGetSMSEmailCarriers);
            }
            if ((this.onGetSMSEmailCarriersCompletedDelegate == null)) {
                this.onGetSMSEmailCarriersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSMSEmailCarriersCompleted);
            }
            base.InvokeAsync(this.onBeginGetSMSEmailCarriersDelegate, new object[] {
                        SessionID,
                        AdditionalInput}, this.onEndGetSMSEmailCarriersDelegate, this.onGetSMSEmailCarriersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginIsUserNameValid(string SessionID, TotalConnect.TotalConnectService.UserNameInfo UserNameInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsUserNameValid(SessionID, UserNameInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.IsUserNameValidResults TotalConnect.TotalConnectService.svcTC2APISoap.EndIsUserNameValid(System.IAsyncResult result) {
            return base.Channel.EndIsUserNameValid(result);
        }
        
        private System.IAsyncResult OnBeginIsUserNameValid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.UserNameInfo UserNameInfo = ((TotalConnect.TotalConnectService.UserNameInfo)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginIsUserNameValid(SessionID, UserNameInfo, callback, asyncState);
        }
        
        private object[] OnEndIsUserNameValid(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.IsUserNameValidResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndIsUserNameValid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsUserNameValidCompleted(object state) {
            if ((this.IsUserNameValidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsUserNameValidCompleted(this, new IsUserNameValidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsUserNameValidAsync(string SessionID, TotalConnect.TotalConnectService.UserNameInfo UserNameInfo) {
            this.IsUserNameValidAsync(SessionID, UserNameInfo, null);
        }
        
        public void IsUserNameValidAsync(string SessionID, TotalConnect.TotalConnectService.UserNameInfo UserNameInfo, object userState) {
            if ((this.onBeginIsUserNameValidDelegate == null)) {
                this.onBeginIsUserNameValidDelegate = new BeginOperationDelegate(this.OnBeginIsUserNameValid);
            }
            if ((this.onEndIsUserNameValidDelegate == null)) {
                this.onEndIsUserNameValidDelegate = new EndOperationDelegate(this.OnEndIsUserNameValid);
            }
            if ((this.onIsUserNameValidCompletedDelegate == null)) {
                this.onIsUserNameValidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsUserNameValidCompleted);
            }
            base.InvokeAsync(this.onBeginIsUserNameValidDelegate, new object[] {
                        SessionID,
                        UserNameInfo}, this.onEndIsUserNameValidDelegate, this.onIsUserNameValidCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSaveCreateUserInfo(string SessionID, TotalConnect.TotalConnectService.UserInfo UserInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCreateUserInfo(SessionID, UserInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SaveCreateUserInfoResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSaveCreateUserInfo(System.IAsyncResult result) {
            return base.Channel.EndSaveCreateUserInfo(result);
        }
        
        private System.IAsyncResult OnBeginSaveCreateUserInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.UserInfo UserInfo = ((TotalConnect.TotalConnectService.UserInfo)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSaveCreateUserInfo(SessionID, UserInfo, callback, asyncState);
        }
        
        private object[] OnEndSaveCreateUserInfo(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SaveCreateUserInfoResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSaveCreateUserInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCreateUserInfoCompleted(object state) {
            if ((this.SaveCreateUserInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCreateUserInfoCompleted(this, new SaveCreateUserInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCreateUserInfoAsync(string SessionID, TotalConnect.TotalConnectService.UserInfo UserInfo) {
            this.SaveCreateUserInfoAsync(SessionID, UserInfo, null);
        }
        
        public void SaveCreateUserInfoAsync(string SessionID, TotalConnect.TotalConnectService.UserInfo UserInfo, object userState) {
            if ((this.onBeginSaveCreateUserInfoDelegate == null)) {
                this.onBeginSaveCreateUserInfoDelegate = new BeginOperationDelegate(this.OnBeginSaveCreateUserInfo);
            }
            if ((this.onEndSaveCreateUserInfoDelegate == null)) {
                this.onEndSaveCreateUserInfoDelegate = new EndOperationDelegate(this.OnEndSaveCreateUserInfo);
            }
            if ((this.onSaveCreateUserInfoCompletedDelegate == null)) {
                this.onSaveCreateUserInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCreateUserInfoCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCreateUserInfoDelegate, new object[] {
                        SessionID,
                        UserInfo}, this.onEndSaveCreateUserInfoDelegate, this.onSaveCreateUserInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSaveUserClientPreferences(string SessionID, string PreferencesString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUserClientPreferences(SessionID, PreferencesString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSaveUserClientPreferences(System.IAsyncResult result) {
            return base.Channel.EndSaveUserClientPreferences(result);
        }
        
        private System.IAsyncResult OnBeginSaveUserClientPreferences(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string PreferencesString = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSaveUserClientPreferences(SessionID, PreferencesString, callback, asyncState);
        }
        
        private object[] OnEndSaveUserClientPreferences(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSaveUserClientPreferences(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUserClientPreferencesCompleted(object state) {
            if ((this.SaveUserClientPreferencesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserClientPreferencesCompleted(this, new SaveUserClientPreferencesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserClientPreferencesAsync(string SessionID, string PreferencesString) {
            this.SaveUserClientPreferencesAsync(SessionID, PreferencesString, null);
        }
        
        public void SaveUserClientPreferencesAsync(string SessionID, string PreferencesString, object userState) {
            if ((this.onBeginSaveUserClientPreferencesDelegate == null)) {
                this.onBeginSaveUserClientPreferencesDelegate = new BeginOperationDelegate(this.OnBeginSaveUserClientPreferences);
            }
            if ((this.onEndSaveUserClientPreferencesDelegate == null)) {
                this.onEndSaveUserClientPreferencesDelegate = new EndOperationDelegate(this.OnEndSaveUserClientPreferences);
            }
            if ((this.onSaveUserClientPreferencesCompletedDelegate == null)) {
                this.onSaveUserClientPreferencesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserClientPreferencesCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserClientPreferencesDelegate, new object[] {
                        SessionID,
                        PreferencesString}, this.onEndSaveUserClientPreferencesDelegate, this.onSaveUserClientPreferencesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetEventMetaDataEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventMetaDataEx(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EventMetaDataExResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetEventMetaDataEx(System.IAsyncResult result) {
            return base.Channel.EndGetEventMetaDataEx(result);
        }
        
        private System.IAsyncResult OnBeginGetEventMetaDataEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetEventMetaDataEx(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetEventMetaDataEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EventMetaDataExResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetEventMetaDataEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventMetaDataExCompleted(object state) {
            if ((this.GetEventMetaDataExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventMetaDataExCompleted(this, new GetEventMetaDataExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventMetaDataExAsync(string SessionID, long LocationID, string AdditionalInput) {
            this.GetEventMetaDataExAsync(SessionID, LocationID, AdditionalInput, null);
        }
        
        public void GetEventMetaDataExAsync(string SessionID, long LocationID, string AdditionalInput, object userState) {
            if ((this.onBeginGetEventMetaDataExDelegate == null)) {
                this.onBeginGetEventMetaDataExDelegate = new BeginOperationDelegate(this.OnBeginGetEventMetaDataEx);
            }
            if ((this.onEndGetEventMetaDataExDelegate == null)) {
                this.onEndGetEventMetaDataExDelegate = new EndOperationDelegate(this.OnEndGetEventMetaDataEx);
            }
            if ((this.onGetEventMetaDataExCompletedDelegate == null)) {
                this.onGetEventMetaDataExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventMetaDataExCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventMetaDataExDelegate, new object[] {
                        SessionID,
                        LocationID,
                        AdditionalInput}, this.onEndGetEventMetaDataExDelegate, this.onGetEventMetaDataExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetConfiguredEvents(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfiguredEvents(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ConfiguredEventResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetConfiguredEvents(System.IAsyncResult result) {
            return base.Channel.EndGetConfiguredEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetConfiguredEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetConfiguredEvents(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetConfiguredEvents(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ConfiguredEventResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetConfiguredEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfiguredEventsCompleted(object state) {
            if ((this.GetConfiguredEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfiguredEventsCompleted(this, new GetConfiguredEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfiguredEventsAsync(string SessionID, long LocationID, string AdditionalInput) {
            this.GetConfiguredEventsAsync(SessionID, LocationID, AdditionalInput, null);
        }
        
        public void GetConfiguredEventsAsync(string SessionID, long LocationID, string AdditionalInput, object userState) {
            if ((this.onBeginGetConfiguredEventsDelegate == null)) {
                this.onBeginGetConfiguredEventsDelegate = new BeginOperationDelegate(this.OnBeginGetConfiguredEvents);
            }
            if ((this.onEndGetConfiguredEventsDelegate == null)) {
                this.onEndGetConfiguredEventsDelegate = new EndOperationDelegate(this.OnEndGetConfiguredEvents);
            }
            if ((this.onGetConfiguredEventsCompletedDelegate == null)) {
                this.onGetConfiguredEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfiguredEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfiguredEventsDelegate, new object[] {
                        SessionID,
                        LocationID,
                        AdditionalInput}, this.onEndGetConfiguredEventsDelegate, this.onGetConfiguredEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetConfiguredEventsEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfiguredEventsEx(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ConfiguredEventExResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetConfiguredEventsEx(System.IAsyncResult result) {
            return base.Channel.EndGetConfiguredEventsEx(result);
        }
        
        private System.IAsyncResult OnBeginGetConfiguredEventsEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetConfiguredEventsEx(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetConfiguredEventsEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ConfiguredEventExResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetConfiguredEventsEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfiguredEventsExCompleted(object state) {
            if ((this.GetConfiguredEventsExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfiguredEventsExCompleted(this, new GetConfiguredEventsExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfiguredEventsExAsync(string SessionID, long LocationID, string AdditionalInput) {
            this.GetConfiguredEventsExAsync(SessionID, LocationID, AdditionalInput, null);
        }
        
        public void GetConfiguredEventsExAsync(string SessionID, long LocationID, string AdditionalInput, object userState) {
            if ((this.onBeginGetConfiguredEventsExDelegate == null)) {
                this.onBeginGetConfiguredEventsExDelegate = new BeginOperationDelegate(this.OnBeginGetConfiguredEventsEx);
            }
            if ((this.onEndGetConfiguredEventsExDelegate == null)) {
                this.onEndGetConfiguredEventsExDelegate = new EndOperationDelegate(this.OnEndGetConfiguredEventsEx);
            }
            if ((this.onGetConfiguredEventsExCompletedDelegate == null)) {
                this.onGetConfiguredEventsExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfiguredEventsExCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfiguredEventsExDelegate, new object[] {
                        SessionID,
                        LocationID,
                        AdditionalInput}, this.onEndGetConfiguredEventsExDelegate, this.onGetConfiguredEventsExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetEventSummary(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventSummary(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SummaryConfiguredEventString TotalConnect.TotalConnectService.svcTC2APISoap.EndGetEventSummary(System.IAsyncResult result) {
            return base.Channel.EndGetEventSummary(result);
        }
        
        private System.IAsyncResult OnBeginGetEventSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetEventSummary(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetEventSummary(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SummaryConfiguredEventString retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetEventSummary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventSummaryCompleted(object state) {
            if ((this.GetEventSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventSummaryCompleted(this, new GetEventSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventSummaryAsync(string SessionID, long LocationID, string AdditionalInput) {
            this.GetEventSummaryAsync(SessionID, LocationID, AdditionalInput, null);
        }
        
        public void GetEventSummaryAsync(string SessionID, long LocationID, string AdditionalInput, object userState) {
            if ((this.onBeginGetEventSummaryDelegate == null)) {
                this.onBeginGetEventSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetEventSummary);
            }
            if ((this.onEndGetEventSummaryDelegate == null)) {
                this.onEndGetEventSummaryDelegate = new EndOperationDelegate(this.OnEndGetEventSummary);
            }
            if ((this.onGetEventSummaryCompletedDelegate == null)) {
                this.onGetEventSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventSummaryDelegate, new object[] {
                        SessionID,
                        LocationID,
                        AdditionalInput}, this.onEndGetEventSummaryDelegate, this.onGetEventSummaryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginTransactNotificationListEventsEx(string SessionID, long LocationID, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransactNotificationListEventsEx(SessionID, LocationID, EventNotifications, SceneTriggers, VideoTriggers, TimeTriggeredActions, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndTransactNotificationListEventsEx(System.IAsyncResult result) {
            return base.Channel.EndTransactNotificationListEventsEx(result);
        }
        
        private System.IAsyncResult OnBeginTransactNotificationListEventsEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            TotalConnect.TotalConnectService.EventNotification[] EventNotifications = ((TotalConnect.TotalConnectService.EventNotification[])(inValues[2]));
            TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers = ((TotalConnect.TotalConnectService.SceneTrigger[])(inValues[3]));
            TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers = ((TotalConnect.TotalConnectService.VideoTrigger[])(inValues[4]));
            TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions = ((TotalConnect.TotalConnectService.TimeTriggeredAction[])(inValues[5]));
            string AdditionalInput = ((string)(inValues[6]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginTransactNotificationListEventsEx(SessionID, LocationID, EventNotifications, SceneTriggers, VideoTriggers, TimeTriggeredActions, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndTransactNotificationListEventsEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndTransactNotificationListEventsEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTransactNotificationListEventsExCompleted(object state) {
            if ((this.TransactNotificationListEventsExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransactNotificationListEventsExCompleted(this, new TransactNotificationListEventsExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransactNotificationListEventsExAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput) {
            this.TransactNotificationListEventsExAsync(SessionID, LocationID, EventNotifications, SceneTriggers, VideoTriggers, TimeTriggeredActions, AdditionalInput, null);
        }
        
        public void TransactNotificationListEventsExAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, object userState) {
            if ((this.onBeginTransactNotificationListEventsExDelegate == null)) {
                this.onBeginTransactNotificationListEventsExDelegate = new BeginOperationDelegate(this.OnBeginTransactNotificationListEventsEx);
            }
            if ((this.onEndTransactNotificationListEventsExDelegate == null)) {
                this.onEndTransactNotificationListEventsExDelegate = new EndOperationDelegate(this.OnEndTransactNotificationListEventsEx);
            }
            if ((this.onTransactNotificationListEventsExCompletedDelegate == null)) {
                this.onTransactNotificationListEventsExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransactNotificationListEventsExCompleted);
            }
            base.InvokeAsync(this.onBeginTransactNotificationListEventsExDelegate, new object[] {
                        SessionID,
                        LocationID,
                        EventNotifications,
                        SceneTriggers,
                        VideoTriggers,
                        TimeTriggeredActions,
                        AdditionalInput}, this.onEndTransactNotificationListEventsExDelegate, this.onTransactNotificationListEventsExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginTransactNotificationListEvents(string SessionID, long LocationID, TotalConnect.TotalConnectService.SentToPanelEvents[] SentToPanelEvents, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransactNotificationListEvents(SessionID, LocationID, SentToPanelEvents, EventNotifications, SceneTriggers, VideoTriggers, TimeTriggeredActions, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndTransactNotificationListEvents(System.IAsyncResult result) {
            return base.Channel.EndTransactNotificationListEvents(result);
        }
        
        private System.IAsyncResult OnBeginTransactNotificationListEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            TotalConnect.TotalConnectService.SentToPanelEvents[] SentToPanelEvents = ((TotalConnect.TotalConnectService.SentToPanelEvents[])(inValues[2]));
            TotalConnect.TotalConnectService.EventNotification[] EventNotifications = ((TotalConnect.TotalConnectService.EventNotification[])(inValues[3]));
            TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers = ((TotalConnect.TotalConnectService.SceneTrigger[])(inValues[4]));
            TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers = ((TotalConnect.TotalConnectService.VideoTrigger[])(inValues[5]));
            TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions = ((TotalConnect.TotalConnectService.TimeTriggeredAction[])(inValues[6]));
            string AdditionalInput = ((string)(inValues[7]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginTransactNotificationListEvents(SessionID, LocationID, SentToPanelEvents, EventNotifications, SceneTriggers, VideoTriggers, TimeTriggeredActions, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndTransactNotificationListEvents(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndTransactNotificationListEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTransactNotificationListEventsCompleted(object state) {
            if ((this.TransactNotificationListEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransactNotificationListEventsCompleted(this, new TransactNotificationListEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransactNotificationListEventsAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.SentToPanelEvents[] SentToPanelEvents, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput) {
            this.TransactNotificationListEventsAsync(SessionID, LocationID, SentToPanelEvents, EventNotifications, SceneTriggers, VideoTriggers, TimeTriggeredActions, AdditionalInput, null);
        }
        
        public void TransactNotificationListEventsAsync(string SessionID, long LocationID, TotalConnect.TotalConnectService.SentToPanelEvents[] SentToPanelEvents, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, object userState) {
            if ((this.onBeginTransactNotificationListEventsDelegate == null)) {
                this.onBeginTransactNotificationListEventsDelegate = new BeginOperationDelegate(this.OnBeginTransactNotificationListEvents);
            }
            if ((this.onEndTransactNotificationListEventsDelegate == null)) {
                this.onEndTransactNotificationListEventsDelegate = new EndOperationDelegate(this.OnEndTransactNotificationListEvents);
            }
            if ((this.onTransactNotificationListEventsCompletedDelegate == null)) {
                this.onTransactNotificationListEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransactNotificationListEventsCompleted);
            }
            base.InvokeAsync(this.onBeginTransactNotificationListEventsDelegate, new object[] {
                        SessionID,
                        LocationID,
                        SentToPanelEvents,
                        EventNotifications,
                        SceneTriggers,
                        VideoTriggers,
                        TimeTriggeredActions,
                        AdditionalInput}, this.onEndTransactNotificationListEventsDelegate, this.onTransactNotificationListEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetAllNotificationConditionalStates(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllNotificationConditionalStates(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.NotificationConditionalStateResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetAllNotificationConditionalStates(System.IAsyncResult result) {
            return base.Channel.EndGetAllNotificationConditionalStates(result);
        }
        
        private System.IAsyncResult OnBeginGetAllNotificationConditionalStates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetAllNotificationConditionalStates(SessionID, LocationID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetAllNotificationConditionalStates(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.NotificationConditionalStateResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetAllNotificationConditionalStates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllNotificationConditionalStatesCompleted(object state) {
            if ((this.GetAllNotificationConditionalStatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllNotificationConditionalStatesCompleted(this, new GetAllNotificationConditionalStatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllNotificationConditionalStatesAsync(string SessionID, long LocationID, string AdditionalInput) {
            this.GetAllNotificationConditionalStatesAsync(SessionID, LocationID, AdditionalInput, null);
        }
        
        public void GetAllNotificationConditionalStatesAsync(string SessionID, long LocationID, string AdditionalInput, object userState) {
            if ((this.onBeginGetAllNotificationConditionalStatesDelegate == null)) {
                this.onBeginGetAllNotificationConditionalStatesDelegate = new BeginOperationDelegate(this.OnBeginGetAllNotificationConditionalStates);
            }
            if ((this.onEndGetAllNotificationConditionalStatesDelegate == null)) {
                this.onEndGetAllNotificationConditionalStatesDelegate = new EndOperationDelegate(this.OnEndGetAllNotificationConditionalStates);
            }
            if ((this.onGetAllNotificationConditionalStatesCompletedDelegate == null)) {
                this.onGetAllNotificationConditionalStatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllNotificationConditionalStatesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllNotificationConditionalStatesDelegate, new object[] {
                        SessionID,
                        LocationID,
                        AdditionalInput}, this.onEndGetAllNotificationConditionalStatesDelegate, this.onGetAllNotificationConditionalStatesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetAllNotificationSchedules(string SessionID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllNotificationSchedules(SessionID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.NotificationScheduleResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetAllNotificationSchedules(System.IAsyncResult result) {
            return base.Channel.EndGetAllNotificationSchedules(result);
        }
        
        private System.IAsyncResult OnBeginGetAllNotificationSchedules(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string AdditionalInput = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetAllNotificationSchedules(SessionID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetAllNotificationSchedules(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.NotificationScheduleResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetAllNotificationSchedules(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllNotificationSchedulesCompleted(object state) {
            if ((this.GetAllNotificationSchedulesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllNotificationSchedulesCompleted(this, new GetAllNotificationSchedulesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllNotificationSchedulesAsync(string SessionID, string AdditionalInput) {
            this.GetAllNotificationSchedulesAsync(SessionID, AdditionalInput, null);
        }
        
        public void GetAllNotificationSchedulesAsync(string SessionID, string AdditionalInput, object userState) {
            if ((this.onBeginGetAllNotificationSchedulesDelegate == null)) {
                this.onBeginGetAllNotificationSchedulesDelegate = new BeginOperationDelegate(this.OnBeginGetAllNotificationSchedules);
            }
            if ((this.onEndGetAllNotificationSchedulesDelegate == null)) {
                this.onEndGetAllNotificationSchedulesDelegate = new EndOperationDelegate(this.OnEndGetAllNotificationSchedules);
            }
            if ((this.onGetAllNotificationSchedulesCompletedDelegate == null)) {
                this.onGetAllNotificationSchedulesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllNotificationSchedulesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllNotificationSchedulesDelegate, new object[] {
                        SessionID,
                        AdditionalInput}, this.onEndGetAllNotificationSchedulesDelegate, this.onGetAllNotificationSchedulesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginTransactNotificationSchedules(string SessionID, TotalConnect.TotalConnectService.NotificationSchedule[] NotificationSchedules, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransactNotificationSchedules(SessionID, NotificationSchedules, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndTransactNotificationSchedules(System.IAsyncResult result) {
            return base.Channel.EndTransactNotificationSchedules(result);
        }
        
        private System.IAsyncResult OnBeginTransactNotificationSchedules(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.NotificationSchedule[] NotificationSchedules = ((TotalConnect.TotalConnectService.NotificationSchedule[])(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginTransactNotificationSchedules(SessionID, NotificationSchedules, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndTransactNotificationSchedules(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndTransactNotificationSchedules(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTransactNotificationSchedulesCompleted(object state) {
            if ((this.TransactNotificationSchedulesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransactNotificationSchedulesCompleted(this, new TransactNotificationSchedulesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransactNotificationSchedulesAsync(string SessionID, TotalConnect.TotalConnectService.NotificationSchedule[] NotificationSchedules, string AdditionalInput) {
            this.TransactNotificationSchedulesAsync(SessionID, NotificationSchedules, AdditionalInput, null);
        }
        
        public void TransactNotificationSchedulesAsync(string SessionID, TotalConnect.TotalConnectService.NotificationSchedule[] NotificationSchedules, string AdditionalInput, object userState) {
            if ((this.onBeginTransactNotificationSchedulesDelegate == null)) {
                this.onBeginTransactNotificationSchedulesDelegate = new BeginOperationDelegate(this.OnBeginTransactNotificationSchedules);
            }
            if ((this.onEndTransactNotificationSchedulesDelegate == null)) {
                this.onEndTransactNotificationSchedulesDelegate = new EndOperationDelegate(this.OnEndTransactNotificationSchedules);
            }
            if ((this.onTransactNotificationSchedulesCompletedDelegate == null)) {
                this.onTransactNotificationSchedulesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransactNotificationSchedulesCompleted);
            }
            base.InvokeAsync(this.onBeginTransactNotificationSchedulesDelegate, new object[] {
                        SessionID,
                        NotificationSchedules,
                        AdditionalInput}, this.onEndTransactNotificationSchedulesDelegate, this.onTransactNotificationSchedulesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetAllNotificationLists(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllNotificationLists(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GetAllNotificationListsResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetAllNotificationLists(System.IAsyncResult result) {
            return base.Channel.EndGetAllNotificationLists(result);
        }
        
        private System.IAsyncResult OnBeginGetAllNotificationLists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetAllNotificationLists(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetAllNotificationLists(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GetAllNotificationListsResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetAllNotificationLists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllNotificationListsCompleted(object state) {
            if ((this.GetAllNotificationListsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllNotificationListsCompleted(this, new GetAllNotificationListsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllNotificationListsAsync(string SessionID) {
            this.GetAllNotificationListsAsync(SessionID, null);
        }
        
        public void GetAllNotificationListsAsync(string SessionID, object userState) {
            if ((this.onBeginGetAllNotificationListsDelegate == null)) {
                this.onBeginGetAllNotificationListsDelegate = new BeginOperationDelegate(this.OnBeginGetAllNotificationLists);
            }
            if ((this.onEndGetAllNotificationListsDelegate == null)) {
                this.onEndGetAllNotificationListsDelegate = new EndOperationDelegate(this.OnEndGetAllNotificationLists);
            }
            if ((this.onGetAllNotificationListsCompletedDelegate == null)) {
                this.onGetAllNotificationListsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllNotificationListsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllNotificationListsDelegate, new object[] {
                        SessionID}, this.onEndGetAllNotificationListsDelegate, this.onGetAllNotificationListsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginTransactNotificationLists(string SessionID, TotalConnect.TotalConnectService.NotificationListBaseInfo[] NotificationListCollection, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransactNotificationLists(SessionID, NotificationListCollection, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.TransactNotificationListResults TotalConnect.TotalConnectService.svcTC2APISoap.EndTransactNotificationLists(System.IAsyncResult result) {
            return base.Channel.EndTransactNotificationLists(result);
        }
        
        private System.IAsyncResult OnBeginTransactNotificationLists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.NotificationListBaseInfo[] NotificationListCollection = ((TotalConnect.TotalConnectService.NotificationListBaseInfo[])(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginTransactNotificationLists(SessionID, NotificationListCollection, callback, asyncState);
        }
        
        private object[] OnEndTransactNotificationLists(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.TransactNotificationListResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndTransactNotificationLists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTransactNotificationListsCompleted(object state) {
            if ((this.TransactNotificationListsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransactNotificationListsCompleted(this, new TransactNotificationListsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransactNotificationListsAsync(string SessionID, TotalConnect.TotalConnectService.NotificationListBaseInfo[] NotificationListCollection) {
            this.TransactNotificationListsAsync(SessionID, NotificationListCollection, null);
        }
        
        public void TransactNotificationListsAsync(string SessionID, TotalConnect.TotalConnectService.NotificationListBaseInfo[] NotificationListCollection, object userState) {
            if ((this.onBeginTransactNotificationListsDelegate == null)) {
                this.onBeginTransactNotificationListsDelegate = new BeginOperationDelegate(this.OnBeginTransactNotificationLists);
            }
            if ((this.onEndTransactNotificationListsDelegate == null)) {
                this.onEndTransactNotificationListsDelegate = new EndOperationDelegate(this.OnEndTransactNotificationLists);
            }
            if ((this.onTransactNotificationListsCompletedDelegate == null)) {
                this.onTransactNotificationListsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransactNotificationListsCompleted);
            }
            base.InvokeAsync(this.onBeginTransactNotificationListsDelegate, new object[] {
                        SessionID,
                        NotificationListCollection}, this.onEndTransactNotificationListsDelegate, this.onTransactNotificationListsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSendTestNotification(string SessionID, long LocationID, long NotificationListID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendTestNotification(SessionID, LocationID, NotificationListID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSendTestNotification(System.IAsyncResult result) {
            return base.Channel.EndSendTestNotification(result);
        }
        
        private System.IAsyncResult OnBeginSendTestNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            long NotificationListID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSendTestNotification(SessionID, LocationID, NotificationListID, callback, asyncState);
        }
        
        private object[] OnEndSendTestNotification(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSendTestNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendTestNotificationCompleted(object state) {
            if ((this.SendTestNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendTestNotificationCompleted(this, new SendTestNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendTestNotificationAsync(string SessionID, long LocationID, long NotificationListID) {
            this.SendTestNotificationAsync(SessionID, LocationID, NotificationListID, null);
        }
        
        public void SendTestNotificationAsync(string SessionID, long LocationID, long NotificationListID, object userState) {
            if ((this.onBeginSendTestNotificationDelegate == null)) {
                this.onBeginSendTestNotificationDelegate = new BeginOperationDelegate(this.OnBeginSendTestNotification);
            }
            if ((this.onEndSendTestNotificationDelegate == null)) {
                this.onEndSendTestNotificationDelegate = new EndOperationDelegate(this.OnEndSendTestNotification);
            }
            if ((this.onSendTestNotificationCompletedDelegate == null)) {
                this.onSendTestNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendTestNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginSendTestNotificationDelegate, new object[] {
                        SessionID,
                        LocationID,
                        NotificationListID}, this.onEndSendTestNotificationDelegate, this.onSendTestNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetEventMetaData(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventMetaData(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.EventMetaDataResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetEventMetaData(System.IAsyncResult result) {
            return base.Channel.EndGetEventMetaData(result);
        }
        
        private System.IAsyncResult OnBeginGetEventMetaData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetEventMetaData(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndGetEventMetaData(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.EventMetaDataResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetEventMetaData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventMetaDataCompleted(object state) {
            if ((this.GetEventMetaDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventMetaDataCompleted(this, new GetEventMetaDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventMetaDataAsync(string SessionID, long LocationID) {
            this.GetEventMetaDataAsync(SessionID, LocationID, null);
        }
        
        public void GetEventMetaDataAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginGetEventMetaDataDelegate == null)) {
                this.onBeginGetEventMetaDataDelegate = new BeginOperationDelegate(this.OnBeginGetEventMetaData);
            }
            if ((this.onEndGetEventMetaDataDelegate == null)) {
                this.onEndGetEventMetaDataDelegate = new EndOperationDelegate(this.OnEndGetEventMetaData);
            }
            if ((this.onGetEventMetaDataCompletedDelegate == null)) {
                this.onGetEventMetaDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventMetaDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventMetaDataDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndGetEventMetaDataDelegate, this.onGetEventMetaDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetMediaServerConfiguration(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMediaServerConfiguration(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.MediaServerConfigurationResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetMediaServerConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetMediaServerConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetMediaServerConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetMediaServerConfiguration(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetMediaServerConfiguration(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.MediaServerConfigurationResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetMediaServerConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMediaServerConfigurationCompleted(object state) {
            if ((this.GetMediaServerConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMediaServerConfigurationCompleted(this, new GetMediaServerConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMediaServerConfigurationAsync(string SessionID) {
            this.GetMediaServerConfigurationAsync(SessionID, null);
        }
        
        public void GetMediaServerConfigurationAsync(string SessionID, object userState) {
            if ((this.onBeginGetMediaServerConfigurationDelegate == null)) {
                this.onBeginGetMediaServerConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetMediaServerConfiguration);
            }
            if ((this.onEndGetMediaServerConfigurationDelegate == null)) {
                this.onEndGetMediaServerConfigurationDelegate = new EndOperationDelegate(this.OnEndGetMediaServerConfiguration);
            }
            if ((this.onGetMediaServerConfigurationCompletedDelegate == null)) {
                this.onGetMediaServerConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMediaServerConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetMediaServerConfigurationDelegate, new object[] {
                        SessionID}, this.onEndGetMediaServerConfigurationDelegate, this.onGetMediaServerConfigurationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCameraConfiguration(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraConfiguration(MAC, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraConfigurationResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCameraConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetCameraConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCameraConfiguration(MAC, SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraConfiguration(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraConfigurationResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCameraConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraConfigurationCompleted(object state) {
            if ((this.GetCameraConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraConfigurationCompleted(this, new GetCameraConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraConfigurationAsync(string MAC, string SessionID) {
            this.GetCameraConfigurationAsync(MAC, SessionID, null);
        }
        
        public void GetCameraConfigurationAsync(string MAC, string SessionID, object userState) {
            if ((this.onBeginGetCameraConfigurationDelegate == null)) {
                this.onBeginGetCameraConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetCameraConfiguration);
            }
            if ((this.onEndGetCameraConfigurationDelegate == null)) {
                this.onEndGetCameraConfigurationDelegate = new EndOperationDelegate(this.OnEndGetCameraConfiguration);
            }
            if ((this.onGetCameraConfigurationCompletedDelegate == null)) {
                this.onGetCameraConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraConfigurationDelegate, new object[] {
                        MAC,
                        SessionID}, this.onEndGetCameraConfigurationDelegate, this.onGetCameraConfigurationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateCameraConfiguration(string MAC, string SessionID, string CameraName, string SYSTEM_Data, string VIDEO_Data, string MOTION_Data, string IO_Data, string EVENT_Data, string PTZ_Data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCameraConfiguration(MAC, SessionID, CameraName, SYSTEM_Data, VIDEO_Data, MOTION_Data, IO_Data, EVENT_Data, PTZ_Data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateCameraConfiguration(System.IAsyncResult result) {
            return base.Channel.EndUpdateCameraConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCameraConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            string CameraName = ((string)(inValues[2]));
            string SYSTEM_Data = ((string)(inValues[3]));
            string VIDEO_Data = ((string)(inValues[4]));
            string MOTION_Data = ((string)(inValues[5]));
            string IO_Data = ((string)(inValues[6]));
            string EVENT_Data = ((string)(inValues[7]));
            string PTZ_Data = ((string)(inValues[8]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateCameraConfiguration(MAC, SessionID, CameraName, SYSTEM_Data, VIDEO_Data, MOTION_Data, IO_Data, EVENT_Data, PTZ_Data, callback, asyncState);
        }
        
        private object[] OnEndUpdateCameraConfiguration(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateCameraConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCameraConfigurationCompleted(object state) {
            if ((this.UpdateCameraConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCameraConfigurationCompleted(this, new UpdateCameraConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCameraConfigurationAsync(string MAC, string SessionID, string CameraName, string SYSTEM_Data, string VIDEO_Data, string MOTION_Data, string IO_Data, string EVENT_Data, string PTZ_Data) {
            this.UpdateCameraConfigurationAsync(MAC, SessionID, CameraName, SYSTEM_Data, VIDEO_Data, MOTION_Data, IO_Data, EVENT_Data, PTZ_Data, null);
        }
        
        public void UpdateCameraConfigurationAsync(string MAC, string SessionID, string CameraName, string SYSTEM_Data, string VIDEO_Data, string MOTION_Data, string IO_Data, string EVENT_Data, string PTZ_Data, object userState) {
            if ((this.onBeginUpdateCameraConfigurationDelegate == null)) {
                this.onBeginUpdateCameraConfigurationDelegate = new BeginOperationDelegate(this.OnBeginUpdateCameraConfiguration);
            }
            if ((this.onEndUpdateCameraConfigurationDelegate == null)) {
                this.onEndUpdateCameraConfigurationDelegate = new EndOperationDelegate(this.OnEndUpdateCameraConfiguration);
            }
            if ((this.onUpdateCameraConfigurationCompletedDelegate == null)) {
                this.onUpdateCameraConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCameraConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCameraConfigurationDelegate, new object[] {
                        MAC,
                        SessionID,
                        CameraName,
                        SYSTEM_Data,
                        VIDEO_Data,
                        MOTION_Data,
                        IO_Data,
                        EVENT_Data,
                        PTZ_Data}, this.onEndUpdateCameraConfigurationDelegate, this.onUpdateCameraConfigurationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSetDefaultCamera(string SessionID, string MAC, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetDefaultCamera(SessionID, MAC, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSetDefaultCamera(System.IAsyncResult result) {
            return base.Channel.EndSetDefaultCamera(result);
        }
        
        private System.IAsyncResult OnBeginSetDefaultCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string MAC = ((string)(inValues[1]));
            long LocationID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSetDefaultCamera(SessionID, MAC, LocationID, callback, asyncState);
        }
        
        private object[] OnEndSetDefaultCamera(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSetDefaultCamera(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetDefaultCameraCompleted(object state) {
            if ((this.SetDefaultCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetDefaultCameraCompleted(this, new SetDefaultCameraCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetDefaultCameraAsync(string SessionID, string MAC, long LocationID) {
            this.SetDefaultCameraAsync(SessionID, MAC, LocationID, null);
        }
        
        public void SetDefaultCameraAsync(string SessionID, string MAC, long LocationID, object userState) {
            if ((this.onBeginSetDefaultCameraDelegate == null)) {
                this.onBeginSetDefaultCameraDelegate = new BeginOperationDelegate(this.OnBeginSetDefaultCamera);
            }
            if ((this.onEndSetDefaultCameraDelegate == null)) {
                this.onEndSetDefaultCameraDelegate = new EndOperationDelegate(this.OnEndSetDefaultCamera);
            }
            if ((this.onSetDefaultCameraCompletedDelegate == null)) {
                this.onSetDefaultCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetDefaultCameraCompleted);
            }
            base.InvokeAsync(this.onBeginSetDefaultCameraDelegate, new object[] {
                        SessionID,
                        MAC,
                        LocationID}, this.onEndSetDefaultCameraDelegate, this.onSetDefaultCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpgradeCameraFirmware(string MAC, string SessionID, int FirmwareVersionNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpgradeCameraFirmware(MAC, SessionID, FirmwareVersionNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpgradeCameraFirmware(System.IAsyncResult result) {
            return base.Channel.EndUpgradeCameraFirmware(result);
        }
        
        private System.IAsyncResult OnBeginUpgradeCameraFirmware(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            int FirmwareVersionNumber = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpgradeCameraFirmware(MAC, SessionID, FirmwareVersionNumber, callback, asyncState);
        }
        
        private object[] OnEndUpgradeCameraFirmware(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpgradeCameraFirmware(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpgradeCameraFirmwareCompleted(object state) {
            if ((this.UpgradeCameraFirmwareCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpgradeCameraFirmwareCompleted(this, new UpgradeCameraFirmwareCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpgradeCameraFirmwareAsync(string MAC, string SessionID, int FirmwareVersionNumber) {
            this.UpgradeCameraFirmwareAsync(MAC, SessionID, FirmwareVersionNumber, null);
        }
        
        public void UpgradeCameraFirmwareAsync(string MAC, string SessionID, int FirmwareVersionNumber, object userState) {
            if ((this.onBeginUpgradeCameraFirmwareDelegate == null)) {
                this.onBeginUpgradeCameraFirmwareDelegate = new BeginOperationDelegate(this.OnBeginUpgradeCameraFirmware);
            }
            if ((this.onEndUpgradeCameraFirmwareDelegate == null)) {
                this.onEndUpgradeCameraFirmwareDelegate = new EndOperationDelegate(this.OnEndUpgradeCameraFirmware);
            }
            if ((this.onUpgradeCameraFirmwareCompletedDelegate == null)) {
                this.onUpgradeCameraFirmwareCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpgradeCameraFirmwareCompleted);
            }
            base.InvokeAsync(this.onBeginUpgradeCameraFirmwareDelegate, new object[] {
                        MAC,
                        SessionID,
                        FirmwareVersionNumber}, this.onEndUpgradeCameraFirmwareDelegate, this.onUpgradeCameraFirmwareCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetFirmwareList(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFirmwareList(MAC, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraFirmwareListResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetFirmwareList(System.IAsyncResult result) {
            return base.Channel.EndGetFirmwareList(result);
        }
        
        private System.IAsyncResult OnBeginGetFirmwareList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MAC = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetFirmwareList(MAC, SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetFirmwareList(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraFirmwareListResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetFirmwareList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFirmwareListCompleted(object state) {
            if ((this.GetFirmwareListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFirmwareListCompleted(this, new GetFirmwareListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFirmwareListAsync(string MAC, string SessionID) {
            this.GetFirmwareListAsync(MAC, SessionID, null);
        }
        
        public void GetFirmwareListAsync(string MAC, string SessionID, object userState) {
            if ((this.onBeginGetFirmwareListDelegate == null)) {
                this.onBeginGetFirmwareListDelegate = new BeginOperationDelegate(this.OnBeginGetFirmwareList);
            }
            if ((this.onEndGetFirmwareListDelegate == null)) {
                this.onEndGetFirmwareListDelegate = new EndOperationDelegate(this.OnEndGetFirmwareList);
            }
            if ((this.onGetFirmwareListCompletedDelegate == null)) {
                this.onGetFirmwareListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFirmwareListCompleted);
            }
            base.InvokeAsync(this.onBeginGetFirmwareListDelegate, new object[] {
                        MAC,
                        SessionID}, this.onEndGetFirmwareListDelegate, this.onGetFirmwareListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetWirelessStatus(string SessionID, string MAC, int SearchType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWirelessStatus(SessionID, MAC, SearchType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraSignalStrengthResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetWirelessStatus(System.IAsyncResult result) {
            return base.Channel.EndGetWirelessStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetWirelessStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string MAC = ((string)(inValues[1]));
            int SearchType = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetWirelessStatus(SessionID, MAC, SearchType, callback, asyncState);
        }
        
        private object[] OnEndGetWirelessStatus(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraSignalStrengthResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetWirelessStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWirelessStatusCompleted(object state) {
            if ((this.GetWirelessStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWirelessStatusCompleted(this, new GetWirelessStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWirelessStatusAsync(string SessionID, string MAC, int SearchType) {
            this.GetWirelessStatusAsync(SessionID, MAC, SearchType, null);
        }
        
        public void GetWirelessStatusAsync(string SessionID, string MAC, int SearchType, object userState) {
            if ((this.onBeginGetWirelessStatusDelegate == null)) {
                this.onBeginGetWirelessStatusDelegate = new BeginOperationDelegate(this.OnBeginGetWirelessStatus);
            }
            if ((this.onEndGetWirelessStatusDelegate == null)) {
                this.onEndGetWirelessStatusDelegate = new EndOperationDelegate(this.OnEndGetWirelessStatus);
            }
            if ((this.onGetWirelessStatusCompletedDelegate == null)) {
                this.onGetWirelessStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWirelessStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetWirelessStatusDelegate, new object[] {
                        SessionID,
                        MAC,
                        SearchType}, this.onEndGetWirelessStatusDelegate, this.onGetWirelessStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCameraInformation(string SessionID, string MAC, int SearchType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraInformation(SessionID, MAC, SearchType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CameraInformationResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCameraInformation(System.IAsyncResult result) {
            return base.Channel.EndGetCameraInformation(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string MAC = ((string)(inValues[1]));
            int SearchType = ((int)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCameraInformation(SessionID, MAC, SearchType, callback, asyncState);
        }
        
        private object[] OnEndGetCameraInformation(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CameraInformationResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCameraInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraInformationCompleted(object state) {
            if ((this.GetCameraInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraInformationCompleted(this, new GetCameraInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraInformationAsync(string SessionID, string MAC, int SearchType) {
            this.GetCameraInformationAsync(SessionID, MAC, SearchType, null);
        }
        
        public void GetCameraInformationAsync(string SessionID, string MAC, int SearchType, object userState) {
            if ((this.onBeginGetCameraInformationDelegate == null)) {
                this.onBeginGetCameraInformationDelegate = new BeginOperationDelegate(this.OnBeginGetCameraInformation);
            }
            if ((this.onEndGetCameraInformationDelegate == null)) {
                this.onEndGetCameraInformationDelegate = new EndOperationDelegate(this.OnEndGetCameraInformation);
            }
            if ((this.onGetCameraInformationCompletedDelegate == null)) {
                this.onGetCameraInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraInformationDelegate, new object[] {
                        SessionID,
                        MAC,
                        SearchType}, this.onEndGetCameraInformationDelegate, this.onGetCameraInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetWAPClientsInfo(string SessionID, string MAC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWAPClientsInfo(SessionID, MAC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WAPClientsListResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetWAPClientsInfo(System.IAsyncResult result) {
            return base.Channel.EndGetWAPClientsInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetWAPClientsInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            string MAC = ((string)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetWAPClientsInfo(SessionID, MAC, callback, asyncState);
        }
        
        private object[] OnEndGetWAPClientsInfo(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WAPClientsListResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetWAPClientsInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWAPClientsInfoCompleted(object state) {
            if ((this.GetWAPClientsInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWAPClientsInfoCompleted(this, new GetWAPClientsInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWAPClientsInfoAsync(string SessionID, string MAC) {
            this.GetWAPClientsInfoAsync(SessionID, MAC, null);
        }
        
        public void GetWAPClientsInfoAsync(string SessionID, string MAC, object userState) {
            if ((this.onBeginGetWAPClientsInfoDelegate == null)) {
                this.onBeginGetWAPClientsInfoDelegate = new BeginOperationDelegate(this.OnBeginGetWAPClientsInfo);
            }
            if ((this.onEndGetWAPClientsInfoDelegate == null)) {
                this.onEndGetWAPClientsInfoDelegate = new EndOperationDelegate(this.OnEndGetWAPClientsInfo);
            }
            if ((this.onGetWAPClientsInfoCompletedDelegate == null)) {
                this.onGetWAPClientsInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWAPClientsInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetWAPClientsInfoDelegate, new object[] {
                        SessionID,
                        MAC}, this.onEndGetWAPClientsInfoDelegate, this.onGetWAPClientsInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetLocation(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocation(SessionId, LocationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.LocationResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetLocation(System.IAsyncResult result) {
            return base.Channel.EndGetLocation(result);
        }
        
        private System.IAsyncResult OnBeginGetLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long LocationId = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetLocation(SessionId, LocationId, callback, asyncState);
        }
        
        private object[] OnEndGetLocation(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.LocationResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationCompleted(object state) {
            if ((this.GetLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationCompleted(this, new GetLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationAsync(string SessionId, long LocationId) {
            this.GetLocationAsync(SessionId, LocationId, null);
        }
        
        public void GetLocationAsync(string SessionId, long LocationId, object userState) {
            if ((this.onBeginGetLocationDelegate == null)) {
                this.onBeginGetLocationDelegate = new BeginOperationDelegate(this.OnBeginGetLocation);
            }
            if ((this.onEndGetLocationDelegate == null)) {
                this.onEndGetLocationDelegate = new EndOperationDelegate(this.OnEndGetLocation);
            }
            if ((this.onGetLocationCompletedDelegate == null)) {
                this.onGetLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationDelegate, new object[] {
                        SessionId,
                        LocationId}, this.onEndGetLocationDelegate, this.onGetLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetLocationSimple(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationSimple(SessionId, LocationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.LocationSimpleResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetLocationSimple(System.IAsyncResult result) {
            return base.Channel.EndGetLocationSimple(result);
        }
        
        private System.IAsyncResult OnBeginGetLocationSimple(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long LocationId = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetLocationSimple(SessionId, LocationId, callback, asyncState);
        }
        
        private object[] OnEndGetLocationSimple(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.LocationSimpleResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetLocationSimple(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationSimpleCompleted(object state) {
            if ((this.GetLocationSimpleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationSimpleCompleted(this, new GetLocationSimpleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationSimpleAsync(string SessionId, long LocationId) {
            this.GetLocationSimpleAsync(SessionId, LocationId, null);
        }
        
        public void GetLocationSimpleAsync(string SessionId, long LocationId, object userState) {
            if ((this.onBeginGetLocationSimpleDelegate == null)) {
                this.onBeginGetLocationSimpleDelegate = new BeginOperationDelegate(this.OnBeginGetLocationSimple);
            }
            if ((this.onEndGetLocationSimpleDelegate == null)) {
                this.onEndGetLocationSimpleDelegate = new EndOperationDelegate(this.OnEndGetLocationSimple);
            }
            if ((this.onGetLocationSimpleCompletedDelegate == null)) {
                this.onGetLocationSimpleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationSimpleCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationSimpleDelegate, new object[] {
                        SessionId,
                        LocationId}, this.onEndGetLocationSimpleDelegate, this.onGetLocationSimpleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSaveLocation(TotalConnect.TotalConnectService.SaveLocationRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveLocation(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginSaveLocation(string SessionId, TotalConnect.TotalConnectService.LocationInfo Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias, System.AsyncCallback callback, object asyncState) {
            TotalConnect.TotalConnectService.SaveLocationRequest inValue = new TotalConnect.TotalConnectService.SaveLocationRequest();
            inValue.SessionId = SessionId;
            inValue.Locale = Locale;
            inValue.Image = Image;
            inValue.dataChanged = dataChanged;
            inValue.imageChanged = imageChanged;
            inValue.Alias = Alias;
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSaveLocation(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SaveLocationResponse TotalConnect.TotalConnectService.svcTC2APISoap.EndSaveLocation(System.IAsyncResult result) {
            return base.Channel.EndSaveLocation(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private TotalConnect.TotalConnectService.LocationResult EndSaveLocation(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SaveLocationResponse retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSaveLocation(result);
            return retVal.SaveLocationResult;
        }
        
        private System.IAsyncResult OnBeginSaveLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.LocationInfo Locale = ((TotalConnect.TotalConnectService.LocationInfo)(inValues[1]));
            byte[] Image = ((byte[])(inValues[2]));
            bool dataChanged = ((bool)(inValues[3]));
            bool imageChanged = ((bool)(inValues[4]));
            string Alias = ((string)(inValues[5]));
            return this.BeginSaveLocation(SessionId, Locale, Image, dataChanged, imageChanged, Alias, callback, asyncState);
        }
        
        private object[] OnEndSaveLocation(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.LocationResult retVal = this.EndSaveLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveLocationCompleted(object state) {
            if ((this.SaveLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveLocationCompleted(this, new SaveLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveLocationAsync(string SessionId, TotalConnect.TotalConnectService.LocationInfo Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias) {
            this.SaveLocationAsync(SessionId, Locale, Image, dataChanged, imageChanged, Alias, null);
        }
        
        public void SaveLocationAsync(string SessionId, TotalConnect.TotalConnectService.LocationInfo Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias, object userState) {
            if ((this.onBeginSaveLocationDelegate == null)) {
                this.onBeginSaveLocationDelegate = new BeginOperationDelegate(this.OnBeginSaveLocation);
            }
            if ((this.onEndSaveLocationDelegate == null)) {
                this.onEndSaveLocationDelegate = new EndOperationDelegate(this.OnEndSaveLocation);
            }
            if ((this.onSaveLocationCompletedDelegate == null)) {
                this.onSaveLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveLocationCompleted);
            }
            base.InvokeAsync(this.onBeginSaveLocationDelegate, new object[] {
                        SessionId,
                        Locale,
                        Image,
                        dataChanged,
                        imageChanged,
                        Alias}, this.onEndSaveLocationDelegate, this.onSaveLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSaveLocationSimple(TotalConnect.TotalConnectService.SaveLocationSimpleRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveLocationSimple(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginSaveLocationSimple(string SessionId, TotalConnect.TotalConnectService.LocationInfoSimple Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias, System.AsyncCallback callback, object asyncState) {
            TotalConnect.TotalConnectService.SaveLocationSimpleRequest inValue = new TotalConnect.TotalConnectService.SaveLocationSimpleRequest();
            inValue.SessionId = SessionId;
            inValue.Locale = Locale;
            inValue.Image = Image;
            inValue.dataChanged = dataChanged;
            inValue.imageChanged = imageChanged;
            inValue.Alias = Alias;
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSaveLocationSimple(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SaveLocationSimpleResponse TotalConnect.TotalConnectService.svcTC2APISoap.EndSaveLocationSimple(System.IAsyncResult result) {
            return base.Channel.EndSaveLocationSimple(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private TotalConnect.TotalConnectService.LocationSimpleResult EndSaveLocationSimple(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SaveLocationSimpleResponse retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSaveLocationSimple(result);
            return retVal.SaveLocationSimpleResult;
        }
        
        private System.IAsyncResult OnBeginSaveLocationSimple(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.LocationInfoSimple Locale = ((TotalConnect.TotalConnectService.LocationInfoSimple)(inValues[1]));
            byte[] Image = ((byte[])(inValues[2]));
            bool dataChanged = ((bool)(inValues[3]));
            bool imageChanged = ((bool)(inValues[4]));
            string Alias = ((string)(inValues[5]));
            return this.BeginSaveLocationSimple(SessionId, Locale, Image, dataChanged, imageChanged, Alias, callback, asyncState);
        }
        
        private object[] OnEndSaveLocationSimple(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.LocationSimpleResult retVal = this.EndSaveLocationSimple(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveLocationSimpleCompleted(object state) {
            if ((this.SaveLocationSimpleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveLocationSimpleCompleted(this, new SaveLocationSimpleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveLocationSimpleAsync(string SessionId, TotalConnect.TotalConnectService.LocationInfoSimple Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias) {
            this.SaveLocationSimpleAsync(SessionId, Locale, Image, dataChanged, imageChanged, Alias, null);
        }
        
        public void SaveLocationSimpleAsync(string SessionId, TotalConnect.TotalConnectService.LocationInfoSimple Locale, byte[] Image, bool dataChanged, bool imageChanged, string Alias, object userState) {
            if ((this.onBeginSaveLocationSimpleDelegate == null)) {
                this.onBeginSaveLocationSimpleDelegate = new BeginOperationDelegate(this.OnBeginSaveLocationSimple);
            }
            if ((this.onEndSaveLocationSimpleDelegate == null)) {
                this.onEndSaveLocationSimpleDelegate = new EndOperationDelegate(this.OnEndSaveLocationSimple);
            }
            if ((this.onSaveLocationSimpleCompletedDelegate == null)) {
                this.onSaveLocationSimpleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveLocationSimpleCompleted);
            }
            base.InvokeAsync(this.onBeginSaveLocationSimpleDelegate, new object[] {
                        SessionId,
                        Locale,
                        Image,
                        dataChanged,
                        imageChanged,
                        Alias}, this.onEndSaveLocationSimpleDelegate, this.onSaveLocationSimpleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCountryList(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountryList(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CountryListResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCountryList(System.IAsyncResult result) {
            return base.Channel.EndGetCountryList(result);
        }
        
        private System.IAsyncResult OnBeginGetCountryList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCountryList(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetCountryList(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CountryListResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCountryList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountryListCompleted(object state) {
            if ((this.GetCountryListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountryListCompleted(this, new GetCountryListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountryListAsync(string SessionID) {
            this.GetCountryListAsync(SessionID, null);
        }
        
        public void GetCountryListAsync(string SessionID, object userState) {
            if ((this.onBeginGetCountryListDelegate == null)) {
                this.onBeginGetCountryListDelegate = new BeginOperationDelegate(this.OnBeginGetCountryList);
            }
            if ((this.onEndGetCountryListDelegate == null)) {
                this.onEndGetCountryListDelegate = new EndOperationDelegate(this.OnEndGetCountryList);
            }
            if ((this.onGetCountryListCompletedDelegate == null)) {
                this.onGetCountryListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountryListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountryListDelegate, new object[] {
                        SessionID}, this.onEndGetCountryListDelegate, this.onGetCountryListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetCountryStateList(string SessionID, long CountryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountryStateList(SessionID, CountryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CountryStateListResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetCountryStateList(System.IAsyncResult result) {
            return base.Channel.EndGetCountryStateList(result);
        }
        
        private System.IAsyncResult OnBeginGetCountryStateList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long CountryID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetCountryStateList(SessionID, CountryID, callback, asyncState);
        }
        
        private object[] OnEndGetCountryStateList(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CountryStateListResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetCountryStateList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountryStateListCompleted(object state) {
            if ((this.GetCountryStateListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountryStateListCompleted(this, new GetCountryStateListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountryStateListAsync(string SessionID, long CountryID) {
            this.GetCountryStateListAsync(SessionID, CountryID, null);
        }
        
        public void GetCountryStateListAsync(string SessionID, long CountryID, object userState) {
            if ((this.onBeginGetCountryStateListDelegate == null)) {
                this.onBeginGetCountryStateListDelegate = new BeginOperationDelegate(this.OnBeginGetCountryStateList);
            }
            if ((this.onEndGetCountryStateListDelegate == null)) {
                this.onEndGetCountryStateListDelegate = new EndOperationDelegate(this.OnEndGetCountryStateList);
            }
            if ((this.onGetCountryStateListCompletedDelegate == null)) {
                this.onGetCountryStateListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountryStateListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountryStateListDelegate, new object[] {
                        SessionID,
                        CountryID}, this.onEndGetCountryStateListDelegate, this.onGetCountryStateListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetImage(TotalConnect.TotalConnectService.GetImageRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImage(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetImage(string SessionId, long ImageId, System.AsyncCallback callback, object asyncState) {
            TotalConnect.TotalConnectService.GetImageRequest inValue = new TotalConnect.TotalConnectService.GetImageRequest();
            inValue.SessionId = SessionId;
            inValue.ImageId = ImageId;
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetImage(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GetImageResponse TotalConnect.TotalConnectService.svcTC2APISoap.EndGetImage(System.IAsyncResult result) {
            return base.Channel.EndGetImage(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private byte[] EndGetImage(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GetImageResponse retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetImage(result);
            return retVal.GetImageResult;
        }
        
        private System.IAsyncResult OnBeginGetImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long ImageId = ((long)(inValues[1]));
            return this.BeginGetImage(SessionId, ImageId, callback, asyncState);
        }
        
        private object[] OnEndGetImage(System.IAsyncResult result) {
            byte[] retVal = this.EndGetImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImageCompleted(object state) {
            if ((this.GetImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImageCompleted(this, new GetImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImageAsync(string SessionId, long ImageId) {
            this.GetImageAsync(SessionId, ImageId, null);
        }
        
        public void GetImageAsync(string SessionId, long ImageId, object userState) {
            if ((this.onBeginGetImageDelegate == null)) {
                this.onBeginGetImageDelegate = new BeginOperationDelegate(this.OnBeginGetImage);
            }
            if ((this.onEndGetImageDelegate == null)) {
                this.onEndGetImageDelegate = new EndOperationDelegate(this.OnEndGetImage);
            }
            if ((this.onGetImageCompletedDelegate == null)) {
                this.onGetImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImageCompleted);
            }
            base.InvokeAsync(this.onBeginGetImageDelegate, new object[] {
                        SessionId,
                        ImageId}, this.onEndGetImageDelegate, this.onGetImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetLogoImage(TotalConnect.TotalConnectService.GetLogoImageRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLogoImage(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetLogoImage(long ImageId, System.AsyncCallback callback, object asyncState) {
            TotalConnect.TotalConnectService.GetLogoImageRequest inValue = new TotalConnect.TotalConnectService.GetLogoImageRequest();
            inValue.ImageId = ImageId;
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetLogoImage(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GetLogoImageResponse TotalConnect.TotalConnectService.svcTC2APISoap.EndGetLogoImage(System.IAsyncResult result) {
            return base.Channel.EndGetLogoImage(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private byte[] EndGetLogoImage(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GetLogoImageResponse retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetLogoImage(result);
            return retVal.GetLogoImageResult;
        }
        
        private System.IAsyncResult OnBeginGetLogoImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ImageId = ((long)(inValues[0]));
            return this.BeginGetLogoImage(ImageId, callback, asyncState);
        }
        
        private object[] OnEndGetLogoImage(System.IAsyncResult result) {
            byte[] retVal = this.EndGetLogoImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLogoImageCompleted(object state) {
            if ((this.GetLogoImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLogoImageCompleted(this, new GetLogoImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLogoImageAsync(long ImageId) {
            this.GetLogoImageAsync(ImageId, null);
        }
        
        public void GetLogoImageAsync(long ImageId, object userState) {
            if ((this.onBeginGetLogoImageDelegate == null)) {
                this.onBeginGetLogoImageDelegate = new BeginOperationDelegate(this.OnBeginGetLogoImage);
            }
            if ((this.onEndGetLogoImageDelegate == null)) {
                this.onEndGetLogoImageDelegate = new EndOperationDelegate(this.OnEndGetLogoImage);
            }
            if ((this.onGetLogoImageCompletedDelegate == null)) {
                this.onGetLogoImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogoImageCompleted);
            }
            base.InvokeAsync(this.onBeginGetLogoImageDelegate, new object[] {
                        ImageId}, this.onEndGetLogoImageDelegate, this.onGetLogoImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetContentImage(TotalConnect.TotalConnectService.GetContentImageRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContentImage(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetContentImage(string SessionId, long LocationId, long ImageId, System.AsyncCallback callback, object asyncState) {
            TotalConnect.TotalConnectService.GetContentImageRequest inValue = new TotalConnect.TotalConnectService.GetContentImageRequest();
            inValue.SessionId = SessionId;
            inValue.LocationId = LocationId;
            inValue.ImageId = ImageId;
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetContentImage(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GetContentImageResponse TotalConnect.TotalConnectService.svcTC2APISoap.EndGetContentImage(System.IAsyncResult result) {
            return base.Channel.EndGetContentImage(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private byte[] EndGetContentImage(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GetContentImageResponse retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetContentImage(result);
            return retVal.GetContentImageResult;
        }
        
        private System.IAsyncResult OnBeginGetContentImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long LocationId = ((long)(inValues[1]));
            long ImageId = ((long)(inValues[2]));
            return this.BeginGetContentImage(SessionId, LocationId, ImageId, callback, asyncState);
        }
        
        private object[] OnEndGetContentImage(System.IAsyncResult result) {
            byte[] retVal = this.EndGetContentImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContentImageCompleted(object state) {
            if ((this.GetContentImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContentImageCompleted(this, new GetContentImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContentImageAsync(string SessionId, long LocationId, long ImageId) {
            this.GetContentImageAsync(SessionId, LocationId, ImageId, null);
        }
        
        public void GetContentImageAsync(string SessionId, long LocationId, long ImageId, object userState) {
            if ((this.onBeginGetContentImageDelegate == null)) {
                this.onBeginGetContentImageDelegate = new BeginOperationDelegate(this.OnBeginGetContentImage);
            }
            if ((this.onEndGetContentImageDelegate == null)) {
                this.onEndGetContentImageDelegate = new EndOperationDelegate(this.OnEndGetContentImage);
            }
            if ((this.onGetContentImageCompletedDelegate == null)) {
                this.onGetContentImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContentImageCompleted);
            }
            base.InvokeAsync(this.onBeginGetContentImageDelegate, new object[] {
                        SessionId,
                        LocationId,
                        ImageId}, this.onEndGetContentImageDelegate, this.onGetContentImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginServiceVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndServiceVersion(System.IAsyncResult result) {
            return base.Channel.EndServiceVersion(result);
        }
        
        private System.IAsyncResult OnBeginServiceVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginServiceVersion(callback, asyncState);
        }
        
        private object[] OnEndServiceVersion(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndServiceVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceVersionCompleted(object state) {
            if ((this.ServiceVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceVersionCompleted(this, new ServiceVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceVersionAsync() {
            this.ServiceVersionAsync(null);
        }
        
        public void ServiceVersionAsync(object userState) {
            if ((this.onBeginServiceVersionDelegate == null)) {
                this.onBeginServiceVersionDelegate = new BeginOperationDelegate(this.OnBeginServiceVersion);
            }
            if ((this.onEndServiceVersionDelegate == null)) {
                this.onEndServiceVersionDelegate = new EndOperationDelegate(this.OnEndServiceVersion);
            }
            if ((this.onServiceVersionCompletedDelegate == null)) {
                this.onServiceVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceVersionCompleted);
            }
            base.InvokeAsync(this.onBeginServiceVersionDelegate, null, this.onEndServiceVersionDelegate, this.onServiceVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetGPSDevices(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGPSDevices(SessionId, LocationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GPSDevicesResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetGPSDevices(System.IAsyncResult result) {
            return base.Channel.EndGetGPSDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetGPSDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long LocationId = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetGPSDevices(SessionId, LocationId, callback, asyncState);
        }
        
        private object[] OnEndGetGPSDevices(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GPSDevicesResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetGPSDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGPSDevicesCompleted(object state) {
            if ((this.GetGPSDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGPSDevicesCompleted(this, new GetGPSDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGPSDevicesAsync(string SessionId, long LocationId) {
            this.GetGPSDevicesAsync(SessionId, LocationId, null);
        }
        
        public void GetGPSDevicesAsync(string SessionId, long LocationId, object userState) {
            if ((this.onBeginGetGPSDevicesDelegate == null)) {
                this.onBeginGetGPSDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetGPSDevices);
            }
            if ((this.onEndGetGPSDevicesDelegate == null)) {
                this.onEndGetGPSDevicesDelegate = new EndOperationDelegate(this.OnEndGetGPSDevices);
            }
            if ((this.onGetGPSDevicesCompletedDelegate == null)) {
                this.onGetGPSDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGPSDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetGPSDevicesDelegate, new object[] {
                        SessionId,
                        LocationId}, this.onEndGetGPSDevicesDelegate, this.onGetGPSDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetGPSDeviceLocationData(string SessionId, long DeviceID, long LocationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGPSDeviceLocationData(SessionId, DeviceID, LocationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GPSLocationResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetGPSDeviceLocationData(System.IAsyncResult result) {
            return base.Channel.EndGetGPSDeviceLocationData(result);
        }
        
        private System.IAsyncResult OnBeginGetGPSDeviceLocationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long LocationId = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetGPSDeviceLocationData(SessionId, DeviceID, LocationId, callback, asyncState);
        }
        
        private object[] OnEndGetGPSDeviceLocationData(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GPSLocationResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetGPSDeviceLocationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGPSDeviceLocationDataCompleted(object state) {
            if ((this.GetGPSDeviceLocationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGPSDeviceLocationDataCompleted(this, new GetGPSDeviceLocationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGPSDeviceLocationDataAsync(string SessionId, long DeviceID, long LocationId) {
            this.GetGPSDeviceLocationDataAsync(SessionId, DeviceID, LocationId, null);
        }
        
        public void GetGPSDeviceLocationDataAsync(string SessionId, long DeviceID, long LocationId, object userState) {
            if ((this.onBeginGetGPSDeviceLocationDataDelegate == null)) {
                this.onBeginGetGPSDeviceLocationDataDelegate = new BeginOperationDelegate(this.OnBeginGetGPSDeviceLocationData);
            }
            if ((this.onEndGetGPSDeviceLocationDataDelegate == null)) {
                this.onEndGetGPSDeviceLocationDataDelegate = new EndOperationDelegate(this.OnEndGetGPSDeviceLocationData);
            }
            if ((this.onGetGPSDeviceLocationDataCompletedDelegate == null)) {
                this.onGetGPSDeviceLocationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGPSDeviceLocationDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetGPSDeviceLocationDataDelegate, new object[] {
                        SessionId,
                        DeviceID,
                        LocationId}, this.onEndGetGPSDeviceLocationDataDelegate, this.onGetGPSDeviceLocationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetGPSDeviceGeoFence(string SessionId, long DeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGPSDeviceGeoFence(SessionId, DeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetGPSDeviceGeoFence(System.IAsyncResult result) {
            return base.Channel.EndGetGPSDeviceGeoFence(result);
        }
        
        private System.IAsyncResult OnBeginGetGPSDeviceGeoFence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetGPSDeviceGeoFence(SessionId, DeviceID, callback, asyncState);
        }
        
        private object[] OnEndGetGPSDeviceGeoFence(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetGPSDeviceGeoFence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGPSDeviceGeoFenceCompleted(object state) {
            if ((this.GetGPSDeviceGeoFenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGPSDeviceGeoFenceCompleted(this, new GetGPSDeviceGeoFenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGPSDeviceGeoFenceAsync(string SessionId, long DeviceID) {
            this.GetGPSDeviceGeoFenceAsync(SessionId, DeviceID, null);
        }
        
        public void GetGPSDeviceGeoFenceAsync(string SessionId, long DeviceID, object userState) {
            if ((this.onBeginGetGPSDeviceGeoFenceDelegate == null)) {
                this.onBeginGetGPSDeviceGeoFenceDelegate = new BeginOperationDelegate(this.OnBeginGetGPSDeviceGeoFence);
            }
            if ((this.onEndGetGPSDeviceGeoFenceDelegate == null)) {
                this.onEndGetGPSDeviceGeoFenceDelegate = new EndOperationDelegate(this.OnEndGetGPSDeviceGeoFence);
            }
            if ((this.onGetGPSDeviceGeoFenceCompletedDelegate == null)) {
                this.onGetGPSDeviceGeoFenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGPSDeviceGeoFenceCompleted);
            }
            base.InvokeAsync(this.onBeginGetGPSDeviceGeoFenceDelegate, new object[] {
                        SessionId,
                        DeviceID}, this.onEndGetGPSDeviceGeoFenceDelegate, this.onGetGPSDeviceGeoFenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetEnteredGPSGeofences(string SessionId, long DeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEnteredGPSGeofences(SessionId, DeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GeofenceListResult TotalConnect.TotalConnectService.svcTC2APISoap.EndGetEnteredGPSGeofences(System.IAsyncResult result) {
            return base.Channel.EndGetEnteredGPSGeofences(result);
        }
        
        private System.IAsyncResult OnBeginGetEnteredGPSGeofences(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetEnteredGPSGeofences(SessionId, DeviceID, callback, asyncState);
        }
        
        private object[] OnEndGetEnteredGPSGeofences(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GeofenceListResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetEnteredGPSGeofences(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEnteredGPSGeofencesCompleted(object state) {
            if ((this.GetEnteredGPSGeofencesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEnteredGPSGeofencesCompleted(this, new GetEnteredGPSGeofencesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEnteredGPSGeofencesAsync(string SessionId, long DeviceID) {
            this.GetEnteredGPSGeofencesAsync(SessionId, DeviceID, null);
        }
        
        public void GetEnteredGPSGeofencesAsync(string SessionId, long DeviceID, object userState) {
            if ((this.onBeginGetEnteredGPSGeofencesDelegate == null)) {
                this.onBeginGetEnteredGPSGeofencesDelegate = new BeginOperationDelegate(this.OnBeginGetEnteredGPSGeofences);
            }
            if ((this.onEndGetEnteredGPSGeofencesDelegate == null)) {
                this.onEndGetEnteredGPSGeofencesDelegate = new EndOperationDelegate(this.OnEndGetEnteredGPSGeofences);
            }
            if ((this.onGetEnteredGPSGeofencesCompletedDelegate == null)) {
                this.onGetEnteredGPSGeofencesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEnteredGPSGeofencesCompleted);
            }
            base.InvokeAsync(this.onBeginGetEnteredGPSGeofencesDelegate, new object[] {
                        SessionId,
                        DeviceID}, this.onEndGetEnteredGPSGeofencesDelegate, this.onGetEnteredGPSGeofencesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSendGPSLocateNowMessage(string SessionId, long DeviceID, long LocationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendGPSLocateNowMessage(SessionId, DeviceID, LocationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSendGPSLocateNowMessage(System.IAsyncResult result) {
            return base.Channel.EndSendGPSLocateNowMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendGPSLocateNowMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long LocationId = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSendGPSLocateNowMessage(SessionId, DeviceID, LocationId, callback, asyncState);
        }
        
        private object[] OnEndSendGPSLocateNowMessage(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSendGPSLocateNowMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendGPSLocateNowMessageCompleted(object state) {
            if ((this.SendGPSLocateNowMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendGPSLocateNowMessageCompleted(this, new SendGPSLocateNowMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendGPSLocateNowMessageAsync(string SessionId, long DeviceID, long LocationId) {
            this.SendGPSLocateNowMessageAsync(SessionId, DeviceID, LocationId, null);
        }
        
        public void SendGPSLocateNowMessageAsync(string SessionId, long DeviceID, long LocationId, object userState) {
            if ((this.onBeginSendGPSLocateNowMessageDelegate == null)) {
                this.onBeginSendGPSLocateNowMessageDelegate = new BeginOperationDelegate(this.OnBeginSendGPSLocateNowMessage);
            }
            if ((this.onEndSendGPSLocateNowMessageDelegate == null)) {
                this.onEndSendGPSLocateNowMessageDelegate = new EndOperationDelegate(this.OnEndSendGPSLocateNowMessage);
            }
            if ((this.onSendGPSLocateNowMessageCompletedDelegate == null)) {
                this.onSendGPSLocateNowMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendGPSLocateNowMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendGPSLocateNowMessageDelegate, new object[] {
                        SessionId,
                        DeviceID,
                        LocationId}, this.onEndSendGPSLocateNowMessageDelegate, this.onSendGPSLocateNowMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSavePhotoForGPSDevice(TotalConnect.TotalConnectService.SavePhotoForGPSDeviceRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSavePhotoForGPSDevice(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginSavePhotoForGPSDevice(string SessionId, long DeviceID, byte[] Image, System.AsyncCallback callback, object asyncState) {
            TotalConnect.TotalConnectService.SavePhotoForGPSDeviceRequest inValue = new TotalConnect.TotalConnectService.SavePhotoForGPSDeviceRequest();
            inValue.SessionId = SessionId;
            inValue.DeviceID = DeviceID;
            inValue.Image = Image;
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSavePhotoForGPSDevice(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SavePhotoForGPSDeviceResponse TotalConnect.TotalConnectService.svcTC2APISoap.EndSavePhotoForGPSDevice(System.IAsyncResult result) {
            return base.Channel.EndSavePhotoForGPSDevice(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private TotalConnect.TotalConnectService.PhotoURLResult EndSavePhotoForGPSDevice(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SavePhotoForGPSDeviceResponse retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSavePhotoForGPSDevice(result);
            return retVal.SavePhotoForGPSDeviceResult;
        }
        
        private System.IAsyncResult OnBeginSavePhotoForGPSDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            byte[] Image = ((byte[])(inValues[2]));
            return this.BeginSavePhotoForGPSDevice(SessionId, DeviceID, Image, callback, asyncState);
        }
        
        private object[] OnEndSavePhotoForGPSDevice(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.PhotoURLResult retVal = this.EndSavePhotoForGPSDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSavePhotoForGPSDeviceCompleted(object state) {
            if ((this.SavePhotoForGPSDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SavePhotoForGPSDeviceCompleted(this, new SavePhotoForGPSDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SavePhotoForGPSDeviceAsync(string SessionId, long DeviceID, byte[] Image) {
            this.SavePhotoForGPSDeviceAsync(SessionId, DeviceID, Image, null);
        }
        
        public void SavePhotoForGPSDeviceAsync(string SessionId, long DeviceID, byte[] Image, object userState) {
            if ((this.onBeginSavePhotoForGPSDeviceDelegate == null)) {
                this.onBeginSavePhotoForGPSDeviceDelegate = new BeginOperationDelegate(this.OnBeginSavePhotoForGPSDevice);
            }
            if ((this.onEndSavePhotoForGPSDeviceDelegate == null)) {
                this.onEndSavePhotoForGPSDeviceDelegate = new EndOperationDelegate(this.OnEndSavePhotoForGPSDevice);
            }
            if ((this.onSavePhotoForGPSDeviceCompletedDelegate == null)) {
                this.onSavePhotoForGPSDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSavePhotoForGPSDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSavePhotoForGPSDeviceDelegate, new object[] {
                        SessionId,
                        DeviceID,
                        Image}, this.onEndSavePhotoForGPSDeviceDelegate, this.onSavePhotoForGPSDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginSaveGPSDeviceData(string SessionId, TotalConnect.TotalConnectService.GPSInfo GPSData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveGPSDeviceData(SessionId, GPSData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.WebMethodResults TotalConnect.TotalConnectService.svcTC2APISoap.EndSaveGPSDeviceData(System.IAsyncResult result) {
            return base.Channel.EndSaveGPSDeviceData(result);
        }
        
        private System.IAsyncResult OnBeginSaveGPSDeviceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionId = ((string)(inValues[0]));
            TotalConnect.TotalConnectService.GPSInfo GPSData = ((TotalConnect.TotalConnectService.GPSInfo)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginSaveGPSDeviceData(SessionId, GPSData, callback, asyncState);
        }
        
        private object[] OnEndSaveGPSDeviceData(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.WebMethodResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndSaveGPSDeviceData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveGPSDeviceDataCompleted(object state) {
            if ((this.SaveGPSDeviceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveGPSDeviceDataCompleted(this, new SaveGPSDeviceDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveGPSDeviceDataAsync(string SessionId, TotalConnect.TotalConnectService.GPSInfo GPSData) {
            this.SaveGPSDeviceDataAsync(SessionId, GPSData, null);
        }
        
        public void SaveGPSDeviceDataAsync(string SessionId, TotalConnect.TotalConnectService.GPSInfo GPSData, object userState) {
            if ((this.onBeginSaveGPSDeviceDataDelegate == null)) {
                this.onBeginSaveGPSDeviceDataDelegate = new BeginOperationDelegate(this.OnBeginSaveGPSDeviceData);
            }
            if ((this.onEndSaveGPSDeviceDataDelegate == null)) {
                this.onEndSaveGPSDeviceDataDelegate = new EndOperationDelegate(this.OnEndSaveGPSDeviceData);
            }
            if ((this.onSaveGPSDeviceDataCompletedDelegate == null)) {
                this.onSaveGPSDeviceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveGPSDeviceDataCompleted);
            }
            base.InvokeAsync(this.onBeginSaveGPSDeviceDataDelegate, new object[] {
                        SessionId,
                        GPSData}, this.onEndSaveGPSDeviceDataDelegate, this.onSaveGPSDeviceDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginRequestTWMSession(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestTWMSession(SessionID, LocationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.GPSPopupURLResult TotalConnect.TotalConnectService.svcTC2APISoap.EndRequestTWMSession(System.IAsyncResult result) {
            return base.Channel.EndRequestTWMSession(result);
        }
        
        private System.IAsyncResult OnBeginRequestTWMSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long LocationID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginRequestTWMSession(SessionID, LocationID, callback, asyncState);
        }
        
        private object[] OnEndRequestTWMSession(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.GPSPopupURLResult retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndRequestTWMSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestTWMSessionCompleted(object state) {
            if ((this.RequestTWMSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestTWMSessionCompleted(this, new RequestTWMSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestTWMSessionAsync(string SessionID, long LocationID) {
            this.RequestTWMSessionAsync(SessionID, LocationID, null);
        }
        
        public void RequestTWMSessionAsync(string SessionID, long LocationID, object userState) {
            if ((this.onBeginRequestTWMSessionDelegate == null)) {
                this.onBeginRequestTWMSessionDelegate = new BeginOperationDelegate(this.OnBeginRequestTWMSession);
            }
            if ((this.onEndRequestTWMSessionDelegate == null)) {
                this.onEndRequestTWMSessionDelegate = new EndOperationDelegate(this.OnEndRequestTWMSession);
            }
            if ((this.onRequestTWMSessionCompletedDelegate == null)) {
                this.onRequestTWMSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestTWMSessionCompleted);
            }
            base.InvokeAsync(this.onBeginRequestTWMSessionDelegate, new object[] {
                        SessionID,
                        LocationID}, this.onEndRequestTWMSessionDelegate, this.onRequestTWMSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateSwitchIcon(string SessionID, long DeviceID, long SwitchID, byte SwitchIconID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSwitchIcon(SessionID, DeviceID, SwitchID, SwitchIconID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.UpdateSwitchIconResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateSwitchIcon(System.IAsyncResult result) {
            return base.Channel.EndUpdateSwitchIcon(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSwitchIcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long SwitchID = ((long)(inValues[2]));
            byte SwitchIconID = ((byte)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateSwitchIcon(SessionID, DeviceID, SwitchID, SwitchIconID, callback, asyncState);
        }
        
        private object[] OnEndUpdateSwitchIcon(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.UpdateSwitchIconResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateSwitchIcon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateSwitchIconCompleted(object state) {
            if ((this.UpdateSwitchIconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSwitchIconCompleted(this, new UpdateSwitchIconCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSwitchIconAsync(string SessionID, long DeviceID, long SwitchID, byte SwitchIconID) {
            this.UpdateSwitchIconAsync(SessionID, DeviceID, SwitchID, SwitchIconID, null);
        }
        
        public void UpdateSwitchIconAsync(string SessionID, long DeviceID, long SwitchID, byte SwitchIconID, object userState) {
            if ((this.onBeginUpdateSwitchIconDelegate == null)) {
                this.onBeginUpdateSwitchIconDelegate = new BeginOperationDelegate(this.OnBeginUpdateSwitchIcon);
            }
            if ((this.onEndUpdateSwitchIconDelegate == null)) {
                this.onEndUpdateSwitchIconDelegate = new EndOperationDelegate(this.OnEndUpdateSwitchIcon);
            }
            if ((this.onUpdateSwitchIconCompletedDelegate == null)) {
                this.onUpdateSwitchIconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSwitchIconCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSwitchIconDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        SwitchID,
                        SwitchIconID}, this.onEndUpdateSwitchIconDelegate, this.onUpdateSwitchIconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginUpdateThermostatSchedule(string SessionID, long DeviceID, TotalConnect.TotalConnectService.ThermostatSchedule ThermostatSchedule, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateThermostatSchedule(SessionID, DeviceID, ThermostatSchedule, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.UpdateThermostatScheduleResults TotalConnect.TotalConnectService.svcTC2APISoap.EndUpdateThermostatSchedule(System.IAsyncResult result) {
            return base.Channel.EndUpdateThermostatSchedule(result);
        }
        
        private System.IAsyncResult OnBeginUpdateThermostatSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            TotalConnect.TotalConnectService.ThermostatSchedule ThermostatSchedule = ((TotalConnect.TotalConnectService.ThermostatSchedule)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginUpdateThermostatSchedule(SessionID, DeviceID, ThermostatSchedule, callback, asyncState);
        }
        
        private object[] OnEndUpdateThermostatSchedule(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.UpdateThermostatScheduleResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndUpdateThermostatSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateThermostatScheduleCompleted(object state) {
            if ((this.UpdateThermostatScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateThermostatScheduleCompleted(this, new UpdateThermostatScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateThermostatScheduleAsync(string SessionID, long DeviceID, TotalConnect.TotalConnectService.ThermostatSchedule ThermostatSchedule) {
            this.UpdateThermostatScheduleAsync(SessionID, DeviceID, ThermostatSchedule, null);
        }
        
        public void UpdateThermostatScheduleAsync(string SessionID, long DeviceID, TotalConnect.TotalConnectService.ThermostatSchedule ThermostatSchedule, object userState) {
            if ((this.onBeginUpdateThermostatScheduleDelegate == null)) {
                this.onBeginUpdateThermostatScheduleDelegate = new BeginOperationDelegate(this.OnBeginUpdateThermostatSchedule);
            }
            if ((this.onEndUpdateThermostatScheduleDelegate == null)) {
                this.onEndUpdateThermostatScheduleDelegate = new EndOperationDelegate(this.OnEndUpdateThermostatSchedule);
            }
            if ((this.onUpdateThermostatScheduleCompletedDelegate == null)) {
                this.onUpdateThermostatScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateThermostatScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateThermostatScheduleDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        ThermostatSchedule}, this.onEndUpdateThermostatScheduleDelegate, this.onUpdateThermostatScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetThermostatSchedule(string SessionID, long DeviceID, long ThermostatID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetThermostatSchedule(SessionID, DeviceID, ThermostatID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ThermostatScheduleResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetThermostatSchedule(System.IAsyncResult result) {
            return base.Channel.EndGetThermostatSchedule(result);
        }
        
        private System.IAsyncResult OnBeginGetThermostatSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long ThermostatID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetThermostatSchedule(SessionID, DeviceID, ThermostatID, callback, asyncState);
        }
        
        private object[] OnEndGetThermostatSchedule(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ThermostatScheduleResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetThermostatSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetThermostatScheduleCompleted(object state) {
            if ((this.GetThermostatScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetThermostatScheduleCompleted(this, new GetThermostatScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetThermostatScheduleAsync(string SessionID, long DeviceID, long ThermostatID) {
            this.GetThermostatScheduleAsync(SessionID, DeviceID, ThermostatID, null);
        }
        
        public void GetThermostatScheduleAsync(string SessionID, long DeviceID, long ThermostatID, object userState) {
            if ((this.onBeginGetThermostatScheduleDelegate == null)) {
                this.onBeginGetThermostatScheduleDelegate = new BeginOperationDelegate(this.OnBeginGetThermostatSchedule);
            }
            if ((this.onEndGetThermostatScheduleDelegate == null)) {
                this.onEndGetThermostatScheduleDelegate = new EndOperationDelegate(this.OnEndGetThermostatSchedule);
            }
            if ((this.onGetThermostatScheduleCompletedDelegate == null)) {
                this.onGetThermostatScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetThermostatScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginGetThermostatScheduleDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        ThermostatID}, this.onEndGetThermostatScheduleDelegate, this.onGetThermostatScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginExecuteAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteAScene(SessionID, DeviceID, SceneID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ExecuteASceneResults TotalConnect.TotalConnectService.svcTC2APISoap.EndExecuteAScene(System.IAsyncResult result) {
            return base.Channel.EndExecuteAScene(result);
        }
        
        private System.IAsyncResult OnBeginExecuteAScene(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long SceneID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginExecuteAScene(SessionID, DeviceID, SceneID, callback, asyncState);
        }
        
        private object[] OnEndExecuteAScene(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ExecuteASceneResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndExecuteAScene(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExecuteASceneCompleted(object state) {
            if ((this.ExecuteASceneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteASceneCompleted(this, new ExecuteASceneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteASceneAsync(string SessionID, long DeviceID, long SceneID) {
            this.ExecuteASceneAsync(SessionID, DeviceID, SceneID, null);
        }
        
        public void ExecuteASceneAsync(string SessionID, long DeviceID, long SceneID, object userState) {
            if ((this.onBeginExecuteASceneDelegate == null)) {
                this.onBeginExecuteASceneDelegate = new BeginOperationDelegate(this.OnBeginExecuteAScene);
            }
            if ((this.onEndExecuteASceneDelegate == null)) {
                this.onEndExecuteASceneDelegate = new EndOperationDelegate(this.OnEndExecuteAScene);
            }
            if ((this.onExecuteASceneCompletedDelegate == null)) {
                this.onExecuteASceneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteASceneCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteASceneDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        SceneID}, this.onEndExecuteASceneDelegate, this.onExecuteASceneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginCreateEditAScene(string SessionID, long DeviceID, long SceneID, string SceneName, short SceneIconID, bool IsSceneEnabled, TotalConnect.TotalConnectService.SceneSwitch[] Automation_Switch, TotalConnect.TotalConnectService.SceneThermostat[] Automation_Thermostat, TotalConnect.TotalConnectService.SceneLock[] Automation_Lock, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateEditAScene(SessionID, DeviceID, SceneID, SceneName, SceneIconID, IsSceneEnabled, Automation_Switch, Automation_Thermostat, Automation_Lock, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.CreateEditASceneResults TotalConnect.TotalConnectService.svcTC2APISoap.EndCreateEditAScene(System.IAsyncResult result) {
            return base.Channel.EndCreateEditAScene(result);
        }
        
        private System.IAsyncResult OnBeginCreateEditAScene(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long SceneID = ((long)(inValues[2]));
            string SceneName = ((string)(inValues[3]));
            short SceneIconID = ((short)(inValues[4]));
            bool IsSceneEnabled = ((bool)(inValues[5]));
            TotalConnect.TotalConnectService.SceneSwitch[] Automation_Switch = ((TotalConnect.TotalConnectService.SceneSwitch[])(inValues[6]));
            TotalConnect.TotalConnectService.SceneThermostat[] Automation_Thermostat = ((TotalConnect.TotalConnectService.SceneThermostat[])(inValues[7]));
            TotalConnect.TotalConnectService.SceneLock[] Automation_Lock = ((TotalConnect.TotalConnectService.SceneLock[])(inValues[8]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginCreateEditAScene(SessionID, DeviceID, SceneID, SceneName, SceneIconID, IsSceneEnabled, Automation_Switch, Automation_Thermostat, Automation_Lock, callback, asyncState);
        }
        
        private object[] OnEndCreateEditAScene(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.CreateEditASceneResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndCreateEditAScene(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateEditASceneCompleted(object state) {
            if ((this.CreateEditASceneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateEditASceneCompleted(this, new CreateEditASceneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateEditASceneAsync(string SessionID, long DeviceID, long SceneID, string SceneName, short SceneIconID, bool IsSceneEnabled, TotalConnect.TotalConnectService.SceneSwitch[] Automation_Switch, TotalConnect.TotalConnectService.SceneThermostat[] Automation_Thermostat, TotalConnect.TotalConnectService.SceneLock[] Automation_Lock) {
            this.CreateEditASceneAsync(SessionID, DeviceID, SceneID, SceneName, SceneIconID, IsSceneEnabled, Automation_Switch, Automation_Thermostat, Automation_Lock, null);
        }
        
        public void CreateEditASceneAsync(string SessionID, long DeviceID, long SceneID, string SceneName, short SceneIconID, bool IsSceneEnabled, TotalConnect.TotalConnectService.SceneSwitch[] Automation_Switch, TotalConnect.TotalConnectService.SceneThermostat[] Automation_Thermostat, TotalConnect.TotalConnectService.SceneLock[] Automation_Lock, object userState) {
            if ((this.onBeginCreateEditASceneDelegate == null)) {
                this.onBeginCreateEditASceneDelegate = new BeginOperationDelegate(this.OnBeginCreateEditAScene);
            }
            if ((this.onEndCreateEditASceneDelegate == null)) {
                this.onEndCreateEditASceneDelegate = new EndOperationDelegate(this.OnEndCreateEditAScene);
            }
            if ((this.onCreateEditASceneCompletedDelegate == null)) {
                this.onCreateEditASceneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateEditASceneCompleted);
            }
            base.InvokeAsync(this.onBeginCreateEditASceneDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        SceneID,
                        SceneName,
                        SceneIconID,
                        IsSceneEnabled,
                        Automation_Switch,
                        Automation_Thermostat,
                        Automation_Lock}, this.onEndCreateEditASceneDelegate, this.onCreateEditASceneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginDeleteAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAScene(SessionID, DeviceID, SceneID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SceneDeletionResults TotalConnect.TotalConnectService.svcTC2APISoap.EndDeleteAScene(System.IAsyncResult result) {
            return base.Channel.EndDeleteAScene(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAScene(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long SceneID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginDeleteAScene(SessionID, DeviceID, SceneID, callback, asyncState);
        }
        
        private object[] OnEndDeleteAScene(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SceneDeletionResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndDeleteAScene(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteASceneCompleted(object state) {
            if ((this.DeleteASceneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteASceneCompleted(this, new DeleteASceneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteASceneAsync(string SessionID, long DeviceID, long SceneID) {
            this.DeleteASceneAsync(SessionID, DeviceID, SceneID, null);
        }
        
        public void DeleteASceneAsync(string SessionID, long DeviceID, long SceneID, object userState) {
            if ((this.onBeginDeleteASceneDelegate == null)) {
                this.onBeginDeleteASceneDelegate = new BeginOperationDelegate(this.OnBeginDeleteAScene);
            }
            if ((this.onEndDeleteASceneDelegate == null)) {
                this.onEndDeleteASceneDelegate = new EndOperationDelegate(this.OnEndDeleteAScene);
            }
            if ((this.onDeleteASceneCompletedDelegate == null)) {
                this.onDeleteASceneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteASceneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteASceneDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        SceneID}, this.onEndDeleteASceneDelegate, this.onDeleteASceneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAScene(SessionID, DeviceID, SceneID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SceneDataResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetAScene(System.IAsyncResult result) {
            return base.Channel.EndGetAScene(result);
        }
        
        private System.IAsyncResult OnBeginGetAScene(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long SceneID = ((long)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetAScene(SessionID, DeviceID, SceneID, callback, asyncState);
        }
        
        private object[] OnEndGetAScene(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SceneDataResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetAScene(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetASceneCompleted(object state) {
            if ((this.GetASceneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetASceneCompleted(this, new GetASceneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetASceneAsync(string SessionID, long DeviceID, long SceneID) {
            this.GetASceneAsync(SessionID, DeviceID, SceneID, null);
        }
        
        public void GetASceneAsync(string SessionID, long DeviceID, long SceneID, object userState) {
            if ((this.onBeginGetASceneDelegate == null)) {
                this.onBeginGetASceneDelegate = new BeginOperationDelegate(this.OnBeginGetAScene);
            }
            if ((this.onEndGetASceneDelegate == null)) {
                this.onEndGetASceneDelegate = new EndOperationDelegate(this.OnEndGetAScene);
            }
            if ((this.onGetASceneCompletedDelegate == null)) {
                this.onGetASceneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetASceneCompleted);
            }
            base.InvokeAsync(this.onBeginGetASceneDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        SceneID}, this.onEndGetASceneDelegate, this.onGetASceneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetSceneList(string SessionID, long DeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSceneList(SessionID, DeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.SceneListInfo TotalConnect.TotalConnectService.svcTC2APISoap.EndGetSceneList(System.IAsyncResult result) {
            return base.Channel.EndGetSceneList(result);
        }
        
        private System.IAsyncResult OnBeginGetSceneList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetSceneList(SessionID, DeviceID, callback, asyncState);
        }
        
        private object[] OnEndGetSceneList(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.SceneListInfo retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetSceneList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSceneListCompleted(object state) {
            if ((this.GetSceneListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSceneListCompleted(this, new GetSceneListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSceneListAsync(string SessionID, long DeviceID) {
            this.GetSceneListAsync(SessionID, DeviceID, null);
        }
        
        public void GetSceneListAsync(string SessionID, long DeviceID, object userState) {
            if ((this.onBeginGetSceneListDelegate == null)) {
                this.onBeginGetSceneListDelegate = new BeginOperationDelegate(this.OnBeginGetSceneList);
            }
            if ((this.onEndGetSceneListDelegate == null)) {
                this.onEndGetSceneListDelegate = new EndOperationDelegate(this.OnEndGetSceneList);
            }
            if ((this.onGetSceneListCompletedDelegate == null)) {
                this.onGetSceneListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSceneListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSceneListDelegate, new object[] {
                        SessionID,
                        DeviceID}, this.onEndGetSceneListDelegate, this.onGetSceneListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetAutomationDeviceStatus(string SessionID, long DeviceID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAutomationDeviceStatus(SessionID, DeviceID, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AutomationDataResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetAutomationDeviceStatus(System.IAsyncResult result) {
            return base.Channel.EndGetAutomationDeviceStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetAutomationDeviceStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            string AdditionalInput = ((string)(inValues[2]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetAutomationDeviceStatus(SessionID, DeviceID, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetAutomationDeviceStatus(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AutomationDataResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetAutomationDeviceStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAutomationDeviceStatusCompleted(object state) {
            if ((this.GetAutomationDeviceStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAutomationDeviceStatusCompleted(this, new GetAutomationDeviceStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAutomationDeviceStatusAsync(string SessionID, long DeviceID, string AdditionalInput) {
            this.GetAutomationDeviceStatusAsync(SessionID, DeviceID, AdditionalInput, null);
        }
        
        public void GetAutomationDeviceStatusAsync(string SessionID, long DeviceID, string AdditionalInput, object userState) {
            if ((this.onBeginGetAutomationDeviceStatusDelegate == null)) {
                this.onBeginGetAutomationDeviceStatusDelegate = new BeginOperationDelegate(this.OnBeginGetAutomationDeviceStatus);
            }
            if ((this.onEndGetAutomationDeviceStatusDelegate == null)) {
                this.onEndGetAutomationDeviceStatusDelegate = new EndOperationDelegate(this.OnEndGetAutomationDeviceStatus);
            }
            if ((this.onGetAutomationDeviceStatusCompletedDelegate == null)) {
                this.onGetAutomationDeviceStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAutomationDeviceStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetAutomationDeviceStatusDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        AdditionalInput}, this.onEndGetAutomationDeviceStatusDelegate, this.onGetAutomationDeviceStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginGetAutomationDeviceStatusEx(string SessionID, long DeviceID, bool CheckDeviceStatus, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAutomationDeviceStatusEx(SessionID, DeviceID, CheckDeviceStatus, AdditionalInput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.AutomationDataResults TotalConnect.TotalConnectService.svcTC2APISoap.EndGetAutomationDeviceStatusEx(System.IAsyncResult result) {
            return base.Channel.EndGetAutomationDeviceStatusEx(result);
        }
        
        private System.IAsyncResult OnBeginGetAutomationDeviceStatusEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            bool CheckDeviceStatus = ((bool)(inValues[2]));
            string AdditionalInput = ((string)(inValues[3]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginGetAutomationDeviceStatusEx(SessionID, DeviceID, CheckDeviceStatus, AdditionalInput, callback, asyncState);
        }
        
        private object[] OnEndGetAutomationDeviceStatusEx(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.AutomationDataResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndGetAutomationDeviceStatusEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAutomationDeviceStatusExCompleted(object state) {
            if ((this.GetAutomationDeviceStatusExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAutomationDeviceStatusExCompleted(this, new GetAutomationDeviceStatusExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAutomationDeviceStatusExAsync(string SessionID, long DeviceID, bool CheckDeviceStatus, string AdditionalInput) {
            this.GetAutomationDeviceStatusExAsync(SessionID, DeviceID, CheckDeviceStatus, AdditionalInput, null);
        }
        
        public void GetAutomationDeviceStatusExAsync(string SessionID, long DeviceID, bool CheckDeviceStatus, string AdditionalInput, object userState) {
            if ((this.onBeginGetAutomationDeviceStatusExDelegate == null)) {
                this.onBeginGetAutomationDeviceStatusExDelegate = new BeginOperationDelegate(this.OnBeginGetAutomationDeviceStatusEx);
            }
            if ((this.onEndGetAutomationDeviceStatusExDelegate == null)) {
                this.onEndGetAutomationDeviceStatusExDelegate = new EndOperationDelegate(this.OnEndGetAutomationDeviceStatusEx);
            }
            if ((this.onGetAutomationDeviceStatusExCompletedDelegate == null)) {
                this.onGetAutomationDeviceStatusExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAutomationDeviceStatusExCompleted);
            }
            base.InvokeAsync(this.onBeginGetAutomationDeviceStatusExDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        CheckDeviceStatus,
                        AdditionalInput}, this.onEndGetAutomationDeviceStatusExDelegate, this.onGetAutomationDeviceStatusExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginControlALock(string SessionID, long DeviceID, long LockID, int LockDesiredState, string AuthorizingCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginControlALock(SessionID, DeviceID, LockID, LockDesiredState, AuthorizingCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.LockControlDataResults TotalConnect.TotalConnectService.svcTC2APISoap.EndControlALock(System.IAsyncResult result) {
            return base.Channel.EndControlALock(result);
        }
        
        private System.IAsyncResult OnBeginControlALock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long LockID = ((long)(inValues[2]));
            int LockDesiredState = ((int)(inValues[3]));
            string AuthorizingCode = ((string)(inValues[4]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginControlALock(SessionID, DeviceID, LockID, LockDesiredState, AuthorizingCode, callback, asyncState);
        }
        
        private object[] OnEndControlALock(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.LockControlDataResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndControlALock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnControlALockCompleted(object state) {
            if ((this.ControlALockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ControlALockCompleted(this, new ControlALockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ControlALockAsync(string SessionID, long DeviceID, long LockID, int LockDesiredState, string AuthorizingCode) {
            this.ControlALockAsync(SessionID, DeviceID, LockID, LockDesiredState, AuthorizingCode, null);
        }
        
        public void ControlALockAsync(string SessionID, long DeviceID, long LockID, int LockDesiredState, string AuthorizingCode, object userState) {
            if ((this.onBeginControlALockDelegate == null)) {
                this.onBeginControlALockDelegate = new BeginOperationDelegate(this.OnBeginControlALock);
            }
            if ((this.onEndControlALockDelegate == null)) {
                this.onEndControlALockDelegate = new EndOperationDelegate(this.OnEndControlALock);
            }
            if ((this.onControlALockCompletedDelegate == null)) {
                this.onControlALockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnControlALockCompleted);
            }
            base.InvokeAsync(this.onBeginControlALockDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        LockID,
                        LockDesiredState,
                        AuthorizingCode}, this.onEndControlALockDelegate, this.onControlALockCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TotalConnect.TotalConnectService.svcTC2APISoap.BeginControlAThermostat(string SessionID, long DeviceID, long ThermostatID, int CurrentOpModeID, int HeatThreshold, int CoolThreshold, int ThermostatModeID, int HeatSetPoint, int CoolSetPoint, int ThermostatFanModeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginControlAThermostat(SessionID, DeviceID, ThermostatID, CurrentOpModeID, HeatThreshold, CoolThreshold, ThermostatModeID, HeatSetPoint, CoolSetPoint, ThermostatFanModeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TotalConnect.TotalConnectService.ThermostatControlDataResults TotalConnect.TotalConnectService.svcTC2APISoap.EndControlAThermostat(System.IAsyncResult result) {
            return base.Channel.EndControlAThermostat(result);
        }
        
        private System.IAsyncResult OnBeginControlAThermostat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            long DeviceID = ((long)(inValues[1]));
            long ThermostatID = ((long)(inValues[2]));
            int CurrentOpModeID = ((int)(inValues[3]));
            int HeatThreshold = ((int)(inValues[4]));
            int CoolThreshold = ((int)(inValues[5]));
            int ThermostatModeID = ((int)(inValues[6]));
            int HeatSetPoint = ((int)(inValues[7]));
            int CoolSetPoint = ((int)(inValues[8]));
            int ThermostatFanModeID = ((int)(inValues[9]));
            return ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).BeginControlAThermostat(SessionID, DeviceID, ThermostatID, CurrentOpModeID, HeatThreshold, CoolThreshold, ThermostatModeID, HeatSetPoint, CoolSetPoint, ThermostatFanModeID, callback, asyncState);
        }
        
        private object[] OnEndControlAThermostat(System.IAsyncResult result) {
            TotalConnect.TotalConnectService.ThermostatControlDataResults retVal = ((TotalConnect.TotalConnectService.svcTC2APISoap)(this)).EndControlAThermostat(result);
            return new object[] {
                    retVal};
        }
        
        private void OnControlAThermostatCompleted(object state) {
            if ((this.ControlAThermostatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ControlAThermostatCompleted(this, new ControlAThermostatCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ControlAThermostatAsync(string SessionID, long DeviceID, long ThermostatID, int CurrentOpModeID, int HeatThreshold, int CoolThreshold, int ThermostatModeID, int HeatSetPoint, int CoolSetPoint, int ThermostatFanModeID) {
            this.ControlAThermostatAsync(SessionID, DeviceID, ThermostatID, CurrentOpModeID, HeatThreshold, CoolThreshold, ThermostatModeID, HeatSetPoint, CoolSetPoint, ThermostatFanModeID, null);
        }
        
        public void ControlAThermostatAsync(string SessionID, long DeviceID, long ThermostatID, int CurrentOpModeID, int HeatThreshold, int CoolThreshold, int ThermostatModeID, int HeatSetPoint, int CoolSetPoint, int ThermostatFanModeID, object userState) {
            if ((this.onBeginControlAThermostatDelegate == null)) {
                this.onBeginControlAThermostatDelegate = new BeginOperationDelegate(this.OnBeginControlAThermostat);
            }
            if ((this.onEndControlAThermostatDelegate == null)) {
                this.onEndControlAThermostatDelegate = new EndOperationDelegate(this.OnEndControlAThermostat);
            }
            if ((this.onControlAThermostatCompletedDelegate == null)) {
                this.onControlAThermostatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnControlAThermostatCompleted);
            }
            base.InvokeAsync(this.onBeginControlAThermostatDelegate, new object[] {
                        SessionID,
                        DeviceID,
                        ThermostatID,
                        CurrentOpModeID,
                        HeatThreshold,
                        CoolThreshold,
                        ThermostatModeID,
                        HeatSetPoint,
                        CoolSetPoint,
                        ThermostatFanModeID}, this.onEndControlAThermostatDelegate, this.onControlAThermostatCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TotalConnect.TotalConnectService.svcTC2APISoap CreateChannel() {
            return new svcTC2APISoapClientChannel(this);
        }
        
        private class svcTC2APISoapClientChannel : ChannelBase<TotalConnect.TotalConnectService.svcTC2APISoap>, TotalConnect.TotalConnectService.svcTC2APISoap {
            
            public svcTC2APISoapClientChannel(System.ServiceModel.ClientBase<TotalConnect.TotalConnectService.svcTC2APISoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginControlASwitch(string SessionID, long DeviceID, long SwitchID, int SwitchAction, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = SwitchID;
                _args[3] = SwitchAction;
                System.IAsyncResult _result = base.BeginInvoke("ControlASwitch", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SwitchControlDataResults EndControlASwitch(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SwitchControlDataResults _result = ((TotalConnect.TotalConnectService.SwitchControlDataResults)(base.EndInvoke("ControlASwitch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRunAutomationSynchronization(string SessionID, long LocationID, long DeviceID, int UserCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                _args[3] = UserCode;
                System.IAsyncResult _result = base.BeginInvoke("RunAutomationSynchronization", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AutomationSyncResults EndRunAutomationSynchronization(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AutomationSyncResults _result = ((TotalConnect.TotalConnectService.AutomationSyncResults)(base.EndInvoke("RunAutomationSynchronization", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSynchronizeSecurityPanel(string SessionID, string InstallerCode, string UserCode, long LocationID, bool ForceImport, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = InstallerCode;
                _args[2] = UserCode;
                _args[3] = LocationID;
                _args[4] = ForceImport;
                System.IAsyncResult _result = base.BeginInvoke("SynchronizeSecurityPanel", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AutomationSyncResults EndSynchronizeSecurityPanel(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AutomationSyncResults _result = ((TotalConnect.TotalConnectService.AutomationSyncResults)(base.EndInvoke("SynchronizeSecurityPanel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDisconnectPanel(string SessionID, long DeviceID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("DisconnectPanel", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndDisconnectPanel(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("DisconnectPanel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginValidateEmailAddressInSession(string SessionId, string EmailAddress, string ValidationKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionId;
                _args[1] = EmailAddress;
                _args[2] = ValidationKey;
                System.IAsyncResult _result = base.BeginInvoke("ValidateEmailAddressInSession", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EmailValidationResult EndValidateEmailAddressInSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EmailValidationResult _result = ((TotalConnect.TotalConnectService.EmailValidationResult)(base.EndInvoke("ValidateEmailAddressInSession", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginValidateEmailAddress(string UserName, string ValidationKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = ValidationKey;
                System.IAsyncResult _result = base.BeginInvoke("ValidateEmailAddress", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EmailValidationResult EndValidateEmailAddress(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EmailValidationResult _result = ((TotalConnect.TotalConnectService.EmailValidationResult)(base.EndInvoke("ValidateEmailAddress", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendEmailValidationDetails(string SessionId, string EmailAddress, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionId;
                _args[1] = EmailAddress;
                System.IAsyncResult _result = base.BeginInvoke("SendEmailValidationDetails", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EmailValidationResult EndSendEmailValidationDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EmailValidationResult _result = ((TotalConnect.TotalConnectService.EmailValidationResult)(base.EndInvoke("SendEmailValidationDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelMetaDataAndFullStatus(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelMetaDataAndFullStatus", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelMetadataAndStatusResults EndGetPanelMetaDataAndFullStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelMetadataAndStatusResults _result = ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResults)(base.EndInvoke("GetPanelMetaDataAndFullStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelMetaDataAndFullStatusEx(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelMetaDataAndFullStatusEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx EndGetPanelMetaDataAndFullStatusEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx _result = ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx)(base.EndInvoke("GetPanelMetaDataAndFullStatusEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelFullStatus(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelFullStatus", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelStatusResults EndGetPanelFullStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelStatusResults _result = ((TotalConnect.TotalConnectService.PanelStatusResults)(base.EndInvoke("GetPanelFullStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelFullStatusByDeviceID(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelFullStatusByDeviceID", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelStatusResults EndGetPanelFullStatusByDeviceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelStatusResults _result = ((TotalConnect.TotalConnectService.PanelStatusResults)(base.EndInvoke("GetPanelFullStatusByDeviceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelFullStatusEx(string SessionID, long LocationID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelFullStatusEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelStatusResultsEx EndGetPanelFullStatusEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelStatusResultsEx _result = ((TotalConnect.TotalConnectService.PanelStatusResultsEx)(base.EndInvoke("GetPanelFullStatusEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelFullStatusByDeviceIDEx(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelFullStatusByDeviceIDEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelStatusResultsEx EndGetPanelFullStatusByDeviceIDEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelStatusResultsEx _result = ((TotalConnect.TotalConnectService.PanelStatusResultsEx)(base.EndInvoke("GetPanelFullStatusByDeviceIDEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetZonesListInState(string SessionID, long LocationID, int PartitionID, int ListIdentifierID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = PartitionID;
                _args[3] = ListIdentifierID;
                System.IAsyncResult _result = base.BeginInvoke("GetZonesListInState", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GetZonesListInStateResult EndGetZonesListInState(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GetZonesListInStateResult _result = ((TotalConnect.TotalConnectService.GetZonesListInStateResult)(base.EndInvoke("GetZonesListInState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelMetaDataAndFullStatusByDeviceID(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelMetaDataAndFullStatusByDeviceID", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelMetadataAndStatusResults EndGetPanelMetaDataAndFullStatusByDeviceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelMetadataAndStatusResults _result = ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResults)(base.EndInvoke("GetPanelMetaDataAndFullStatusByDeviceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPanelMetaDataAndFullStatusByDeviceIDEx(string SessionID, long DeviceID, int LastSequenceNumber, long LastUpdatedTimestampTicks, int PartitionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = LastSequenceNumber;
                _args[3] = LastUpdatedTimestampTicks;
                _args[4] = PartitionID;
                System.IAsyncResult _result = base.BeginInvoke("GetPanelMetaDataAndFullStatusByDeviceIDEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx EndGetPanelMetaDataAndFullStatusByDeviceIDEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx _result = ((TotalConnect.TotalConnectService.PanelMetadataAndStatusResultsEx)(base.EndInvoke("GetPanelMetaDataAndFullStatusByDeviceIDEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportSecurityInformation(string SessionID, long LocationID, long DeviceID, int InstallerCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                _args[3] = InstallerCode;
                System.IAsyncResult _result = base.BeginInvoke("ImportSecurityInformation", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ImportSecurityInfoResults EndImportSecurityInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ImportSecurityInfoResults _result = ((TotalConnect.TotalConnectService.ImportSecurityInfoResults)(base.EndInvoke("ImportSecurityInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBypass(string SessionID, long LocationID, long DeviceID, int Zone, int UserCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                _args[3] = Zone;
                _args[4] = UserCode;
                System.IAsyncResult _result = base.BeginInvoke("Bypass", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ZoneBypassResults EndBypass(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ZoneBypassResults _result = ((TotalConnect.TotalConnectService.ZoneBypassResults)(base.EndInvoke("Bypass", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginArmSecuritySystem(string SessionID, long LocationID, long DeviceID, int ArmType, int UserCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                _args[3] = ArmType;
                _args[4] = UserCode;
                System.IAsyncResult _result = base.BeginInvoke("ArmSecuritySystem", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ArmSecuritySystemResults EndArmSecuritySystem(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ArmSecuritySystemResults _result = ((TotalConnect.TotalConnectService.ArmSecuritySystemResults)(base.EndInvoke("ArmSecuritySystem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDisarmSecuritySystem(string SessionID, long LocationID, long DeviceID, int UserCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                _args[3] = UserCode;
                System.IAsyncResult _result = base.BeginInvoke("DisarmSecuritySystem", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.DisarmSecuritySystemResults EndDisarmSecuritySystem(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.DisarmSecuritySystemResults _result = ((TotalConnect.TotalConnectService.DisarmSecuritySystemResults)(base.EndInvoke("DisarmSecuritySystem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReadConsoleDisplay(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                System.IAsyncResult _result = base.BeginInvoke("ReadConsoleDisplay", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ReadConsoleDisplayResults EndReadConsoleDisplay(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ReadConsoleDisplayResults _result = ((TotalConnect.TotalConnectService.ReadConsoleDisplayResults)(base.EndInvoke("ReadConsoleDisplay", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConnectToPanel(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                System.IAsyncResult _result = base.BeginInvoke("ConnectToPanel", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndConnectToPanel(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("ConnectToPanel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendKey(string SessionID, long LocationID, long DeviceID, string KeyChar, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                _args[3] = KeyChar;
                System.IAsyncResult _result = base.BeginInvoke("SendKey", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndSendKey(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("SendKey", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOverrideSecurityPanelSession(string SessionID, long LocationID, long DeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                System.IAsyncResult _result = base.BeginInvoke("OverrideSecurityPanelSession", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndOverrideSecurityPanelSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("OverrideSecurityPanelSession", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckSecurityPanelLastCommandState(string SessionID, long LocationID, long DeviceID, int CommandCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = DeviceID;
                _args[3] = CommandCode;
                System.IAsyncResult _result = base.BeginInvoke("CheckSecurityPanelLastCommandState", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndCheckSecurityPanelLastCommandState(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("CheckSecurityPanelLastCommandState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetContentConfiguration(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("GetContentConfiguration", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ContentConfigurationResult EndGetContentConfiguration(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ContentConfigurationResult _result = ((TotalConnect.TotalConnectService.ContentConfigurationResult)(base.EndInvoke("GetContentConfiguration", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveContentConfiguration(string SessionID, long LocationID, TotalConnect.TotalConnectService.ContentConfigurationInfo ContentConfiguration, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = ContentConfiguration;
                System.IAsyncResult _result = base.BeginInvoke("SaveContentConfiguration", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndSaveContentConfiguration(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("SaveContentConfiguration", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSlideShowPhotos(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("GetSlideShowPhotos", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SlideShowPhotoResult EndGetSlideShowPhotos(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SlideShowPhotoResult _result = ((TotalConnect.TotalConnectService.SlideShowPhotoResult)(base.EndInvoke("GetSlideShowPhotos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddSlideShowPhoto(TotalConnect.TotalConnectService.AddSlideShowPhotoRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddSlideShowPhoto", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AddSlideShowPhotoResponse EndAddSlideShowPhoto(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AddSlideShowPhotoResponse _result = ((TotalConnect.TotalConnectService.AddSlideShowPhotoResponse)(base.EndInvoke("AddSlideShowPhoto", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteSlideShowPhoto(string SessionID, long LocationID, long PhotoID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = PhotoID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteSlideShowPhoto", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndDeleteSlideShowPhoto(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("DeleteSlideShowPhoto", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentWeather(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentWeather", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CurrentWeatherResult EndGetCurrentWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CurrentWeatherResult _result = ((TotalConnect.TotalConnectService.CurrentWeatherResult)(base.EndInvoke("GetCurrentWeather", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetForecastWeather(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("GetForecastWeather", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ForecastWeatherResult EndGetForecastWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ForecastWeatherResult _result = ((TotalConnect.TotalConnectService.ForecastWeatherResult)(base.EndInvoke("GetForecastWeather", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDealerMessages(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("GetDealerMessages", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.DealerMessageResult EndGetDealerMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.DealerMessageResult _result = ((TotalConnect.TotalConnectService.DealerMessageResult)(base.EndInvoke("GetDealerMessages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateDealerMessageReadState(string SessionID, long LocationID, long MessageID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = MessageID;
                System.IAsyncResult _result = base.BeginInvoke("UpdateDealerMessageReadState", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndUpdateDealerMessageReadState(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("UpdateDealerMessageReadState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsCameraAvailable(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = MAC;
                _args[1] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("IsCameraAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndIsCameraAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("IsCameraAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraState(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = MAC;
                _args[1] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraState", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraStateResult EndGetCameraState(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraStateResult _result = ((TotalConnect.TotalConnectService.CameraStateResult)(base.EndInvoke("GetCameraState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraIOState(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = MAC;
                _args[1] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraIOState", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraIOStateResult EndGetCameraIOState(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraIOStateResult _result = ((TotalConnect.TotalConnectService.CameraIOStateResult)(base.EndInvoke("GetCameraIOState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraPosition(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = MAC;
                _args[1] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraPosition", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraPositionResult EndGetCameraPosition(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraPositionResult _result = ((TotalConnect.TotalConnectService.CameraPositionResult)(base.EndInvoke("GetCameraPosition", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGotoPreset(string MAC, string SessionID, int PresetSlot, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = PresetSlot;
                System.IAsyncResult _result = base.BeginInvoke("GotoPreset", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndGotoPreset(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("GotoPreset", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStorePreset(string MAC, string SessionID, int PresetSlot, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = PresetSlot;
                System.IAsyncResult _result = base.BeginInvoke("StorePreset", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndStorePreset(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("StorePreset", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMoveCamera(string MAC, string SessionID, int Direction, int Degrees, int PanSpeed, int TiltSpeed, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = Direction;
                _args[3] = Degrees;
                _args[4] = PanSpeed;
                _args[5] = TiltSpeed;
                System.IAsyncResult _result = base.BeginInvoke("MoveCamera", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndMoveCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("MoveCamera", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDirectPanTilt(string MAC, string SessionID, int X, int Y, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = X;
                _args[3] = Y;
                System.IAsyncResult _result = base.BeginInvoke("DirectPanTilt", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndDirectPanTilt(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("DirectPanTilt", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginWLLED_Control(string MAC, string SessionID, int NewState, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = NewState;
                System.IAsyncResult _result = base.BeginInvoke("WLLED_Control", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndWLLED_Control(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("WLLED_Control", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOutput_Control(string MAC, string SessionID, int OutputNumber, int NewState, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = OutputNumber;
                _args[3] = NewState;
                System.IAsyncResult _result = base.BeginInvoke("Output_Control", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndOutput_Control(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("Output_Control", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTriggerVideoCapture(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = MAC;
                _args[1] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("TriggerVideoCapture", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndTriggerVideoCapture(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("TriggerVideoCapture", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConfigStreamMode(string MAC, string SessionID, int ModeSelector, int Size, int FramesPerSecond, int QualityType, int Quality, int BitRate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = ModeSelector;
                _args[3] = Size;
                _args[4] = FramesPerSecond;
                _args[5] = QualityType;
                _args[6] = Quality;
                _args[7] = BitRate;
                System.IAsyncResult _result = base.BeginInvoke("ConfigStreamMode", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ConfigStreamModeResult EndConfigStreamMode(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ConfigStreamModeResult _result = ((TotalConnect.TotalConnectService.ConfigStreamModeResult)(base.EndInvoke("ConfigStreamMode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLocationCameraList(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("GetLocationCameraList", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraListResult EndGetLocationCameraList(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraListResult _result = ((TotalConnect.TotalConnectService.CameraListResult)(base.EndInvoke("GetLocationCameraList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTimeZones(string SessionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionId;
                System.IAsyncResult _result = base.BeginInvoke("GetTimeZones", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.TimeZonesResult EndGetTimeZones(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.TimeZonesResult _result = ((TotalConnect.TotalConnectService.TimeZonesResult)(base.EndInvoke("GetTimeZones", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVideoFileURLs(string SessionId, long LocationId, short FilterClass, long EventRecordId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionId;
                _args[1] = LocationId;
                _args[2] = FilterClass;
                _args[3] = EventRecordId;
                System.IAsyncResult _result = base.BeginInvoke("GetVideoFileURLs", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.VideoFileURLResult EndGetVideoFileURLs(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.VideoFileURLResult _result = ((TotalConnect.TotalConnectService.VideoFileURLResult)(base.EndInvoke("GetVideoFileURLs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEventNotes(string SessionId, short FilterClass, long EventRecordId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionId;
                _args[1] = FilterClass;
                _args[2] = EventRecordId;
                System.IAsyncResult _result = base.BeginInvoke("GetEventNotes", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.NotesResult EndGetEventNotes(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.NotesResult _result = ((TotalConnect.TotalConnectService.NotesResult)(base.EndInvoke("GetEventNotes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEvents(string SessionId, short FilterClass, long LocationId, long DeviceId, short MaxRecords, long EventTypeFilter, bool ShowHidden, string StartDateTime, string EndDateTime, short DateFormat, short TimeFormat, int SortOrder, long LastEventIdReceived, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[13];
                _args[0] = SessionId;
                _args[1] = FilterClass;
                _args[2] = LocationId;
                _args[3] = DeviceId;
                _args[4] = MaxRecords;
                _args[5] = EventTypeFilter;
                _args[6] = ShowHidden;
                _args[7] = StartDateTime;
                _args[8] = EndDateTime;
                _args[9] = DateFormat;
                _args[10] = TimeFormat;
                _args[11] = SortOrder;
                _args[12] = LastEventIdReceived;
                System.IAsyncResult _result = base.BeginInvoke("GetEvents", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EventsResult EndGetEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EventsResult _result = ((TotalConnect.TotalConnectService.EventsResult)(base.EndInvoke("GetEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEventTypeFilter(string SessionId, short FilterClass, long LocationId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionId;
                _args[1] = FilterClass;
                _args[2] = LocationId;
                System.IAsyncResult _result = base.BeginInvoke("GetEventTypeFilter", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EventTypeFilterResult EndGetEventTypeFilter(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EventTypeFilterResult _result = ((TotalConnect.TotalConnectService.EventTypeFilterResult)(base.EndInvoke("GetEventTypeFilter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLiveEvents(string SessionId, long LocationId, long LastEventIdReceived, short MaxRecords, short DateFormat, short TimeFormat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = SessionId;
                _args[1] = LocationId;
                _args[2] = LastEventIdReceived;
                _args[3] = MaxRecords;
                _args[4] = DateFormat;
                _args[5] = TimeFormat;
                System.IAsyncResult _result = base.BeginInvoke("GetLiveEvents", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EventsResult EndGetLiveEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EventsResult _result = ((TotalConnect.TotalConnectService.EventsResult)(base.EndInvoke("GetLiveEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateEventNotes(string SessionId, short FilterClass, long EventRecordId, string Note, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionId;
                _args[1] = FilterClass;
                _args[2] = EventRecordId;
                _args[3] = Note;
                System.IAsyncResult _result = base.BeginInvoke("UpdateEventNotes", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndUpdateEventNotes(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("UpdateEventNotes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateEventRecordHideState(string SessionId, short FilterClass, long EventRecordId, bool IsHidden, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionId;
                _args[1] = FilterClass;
                _args[2] = EventRecordId;
                _args[3] = IsHidden;
                System.IAsyncResult _result = base.BeginInvoke("UpdateEventRecordHideState", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndUpdateEventRecordHideState(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("UpdateEventRecordHideState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateEventRecordLockState(string SessionId, short FilterClass, long EventRecordId, bool IsLocked, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionId;
                _args[1] = FilterClass;
                _args[2] = EventRecordId;
                _args[3] = IsLocked;
                System.IAsyncResult _result = base.BeginInvoke("UpdateEventRecordLockState", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndUpdateEventRecordLockState(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("UpdateEventRecordLockState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoteAuthenticateUserLogin(string userName, string password, int RemoteApplicationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userName;
                _args[1] = password;
                _args[2] = RemoteApplicationID;
                System.IAsyncResult _result = base.BeginInvoke("RemoteAuthenticateUserLogin", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults EndRemoteAuthenticateUserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults _result = ((TotalConnect.TotalConnectService.RemoteAuthenticateLoginResults)(base.EndInvoke("RemoteAuthenticateUserLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAuthenticateUserLogin(string userName, string password, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userName;
                _args[1] = password;
                _args[2] = ApplicationID;
                _args[3] = ApplicationVersion;
                System.IAsyncResult _result = base.BeginInvoke("AuthenticateUserLogin", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AuthenticateLoginResults EndAuthenticateUserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AuthenticateLoginResults _result = ((TotalConnect.TotalConnectService.AuthenticateLoginResults)(base.EndInvoke("AuthenticateUserLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAuthenticateGUIDLogin(string GUID, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = GUID;
                _args[1] = ApplicationID;
                _args[2] = ApplicationVersion;
                System.IAsyncResult _result = base.BeginInvoke("AuthenticateGUIDLogin", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AuthenticateLoginResults EndAuthenticateGUIDLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AuthenticateLoginResults _result = ((TotalConnect.TotalConnectService.AuthenticateLoginResults)(base.EndInvoke("AuthenticateGUIDLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSessionDetails(string SessionID, int ApplicationID, string ApplicationVersion, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = ApplicationID;
                _args[2] = ApplicationVersion;
                System.IAsyncResult _result = base.BeginInvoke("GetSessionDetails", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SessionDetailResults EndGetSessionDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SessionDetailResults _result = ((TotalConnect.TotalConnectService.SessionDetailResults)(base.EndInvoke("GetSessionDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginKeepAlive(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("KeepAlive", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndKeepAlive(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("KeepAlive", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogout(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("Logout", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAnythingChanged(string SessionID, long LocationID, TotalConnect.TotalConnectService.Module[] Modules, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = Modules;
                System.IAsyncResult _result = base.BeginInvoke("AnythingChanged", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AnythingChangedResults EndAnythingChanged(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AnythingChangedResults _result = ((TotalConnect.TotalConnectService.AnythingChangedResults)(base.EndInvoke("AnythingChanged", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetInterfaceSchemaDetails(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetInterfaceSchemaDetails", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.InterfaceSchemaResults EndGetInterfaceSchemaDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.InterfaceSchemaResults _result = ((TotalConnect.TotalConnectService.InterfaceSchemaResults)(base.EndInvoke("GetInterfaceSchemaDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetInterfaceSchemaDetailsEx(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetInterfaceSchemaDetailsEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.InterfaceSchemaResultsEx EndGetInterfaceSchemaDetailsEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.InterfaceSchemaResultsEx _result = ((TotalConnect.TotalConnectService.InterfaceSchemaResultsEx)(base.EndInvoke("GetInterfaceSchemaDetailsEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUsers(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetUsers", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.UserConfigurationResults EndGetUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.UserConfigurationResults _result = ((TotalConnect.TotalConnectService.UserConfigurationResults)(base.EndInvoke("GetUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUserInfo(string SessionID, long UserId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = UserId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUserInfo", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.DeleteUserInfoResults EndDeleteUserInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.DeleteUserInfoResults _result = ((TotalConnect.TotalConnectService.DeleteUserInfoResults)(base.EndInvoke("DeleteUserInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDisableEnableUser(string SessionID, long UserId, bool StateToSet, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = UserId;
                _args[2] = StateToSet;
                System.IAsyncResult _result = base.BeginInvoke("DisableEnableUser", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.DisableEnableUserResults EndDisableEnableUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.DisableEnableUserResults _result = ((TotalConnect.TotalConnectService.DisableEnableUserResults)(base.EndInvoke("DisableEnableUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateEula(string SessionID, long UserId, int Eula, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = UserId;
                _args[2] = Eula;
                System.IAsyncResult _result = base.BeginInvoke("UpdateEula", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndUpdateEula(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("UpdateEula", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserInfo(string SessionID, long UserId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = UserId;
                System.IAsyncResult _result = base.BeginInvoke("GetUserInfo", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.UserInfoResults EndGetUserInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.UserInfoResults _result = ((TotalConnect.TotalConnectService.UserInfoResults)(base.EndInvoke("GetUserInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUser(string SessionID, long UserId, int UserTypeID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = UserId;
                _args[2] = UserTypeID;
                _args[3] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.DeleteUserResults EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.DeleteUserResults _result = ((TotalConnect.TotalConnectService.DeleteUserResults)(base.EndInvoke("DeleteUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDisableEnableUserEx(string SessionID, long UserId, int UserTypeId, bool StateToSet, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = UserId;
                _args[2] = UserTypeId;
                _args[3] = StateToSet;
                _args[4] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("DisableEnableUserEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.DisableEnableUserResults EndDisableEnableUserEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.DisableEnableUserResults _result = ((TotalConnect.TotalConnectService.DisableEnableUserResults)(base.EndInvoke("DisableEnableUserEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserDetails(string SessionID, long ManageUserId, int UserTypeId, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = ManageUserId;
                _args[2] = UserTypeId;
                _args[3] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetUserDetails", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.UserDetailResults EndGetUserDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.UserDetailResults _result = ((TotalConnect.TotalConnectService.UserDetailResults)(base.EndInvoke("GetUserDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveUser(string SessionID, TotalConnect.TotalConnectService.UserDetails UserDetails, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = UserDetails;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("SaveUser", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SaveUserResults EndSaveUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SaveUserResults _result = ((TotalConnect.TotalConnectService.SaveUserResults)(base.EndInvoke("SaveUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUsersEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetUsersEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.UserListResults EndGetUsersEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.UserListResults _result = ((TotalConnect.TotalConnectService.UserListResults)(base.EndInvoke("GetUsersEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSynchronizePanelUser(string SessionID, TotalConnect.TotalConnectService.DeviceAuthorizingCode[] DeviceList, bool StatusOnly, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = DeviceList;
                _args[2] = StatusOnly;
                _args[3] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("SynchronizePanelUser", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SynchronizeUserResults EndSynchronizePanelUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SynchronizeUserResults _result = ((TotalConnect.TotalConnectService.SynchronizeUserResults)(base.EndInvoke("SynchronizePanelUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSMSEmailCarriers(string SessionID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetSMSEmailCarriers", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SMSEmailCarrierResults EndGetSMSEmailCarriers(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SMSEmailCarrierResults _result = ((TotalConnect.TotalConnectService.SMSEmailCarrierResults)(base.EndInvoke("GetSMSEmailCarriers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsUserNameValid(string SessionID, TotalConnect.TotalConnectService.UserNameInfo UserNameInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = UserNameInfo;
                System.IAsyncResult _result = base.BeginInvoke("IsUserNameValid", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.IsUserNameValidResults EndIsUserNameValid(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.IsUserNameValidResults _result = ((TotalConnect.TotalConnectService.IsUserNameValidResults)(base.EndInvoke("IsUserNameValid", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveCreateUserInfo(string SessionID, TotalConnect.TotalConnectService.UserInfo UserInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = UserInfo;
                System.IAsyncResult _result = base.BeginInvoke("SaveCreateUserInfo", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SaveCreateUserInfoResults EndSaveCreateUserInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SaveCreateUserInfoResults _result = ((TotalConnect.TotalConnectService.SaveCreateUserInfoResults)(base.EndInvoke("SaveCreateUserInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveUserClientPreferences(string SessionID, string PreferencesString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = PreferencesString;
                System.IAsyncResult _result = base.BeginInvoke("SaveUserClientPreferences", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndSaveUserClientPreferences(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("SaveUserClientPreferences", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEventMetaDataEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetEventMetaDataEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EventMetaDataExResult EndGetEventMetaDataEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EventMetaDataExResult _result = ((TotalConnect.TotalConnectService.EventMetaDataExResult)(base.EndInvoke("GetEventMetaDataEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetConfiguredEvents(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetConfiguredEvents", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ConfiguredEventResult EndGetConfiguredEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ConfiguredEventResult _result = ((TotalConnect.TotalConnectService.ConfiguredEventResult)(base.EndInvoke("GetConfiguredEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetConfiguredEventsEx(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetConfiguredEventsEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ConfiguredEventExResult EndGetConfiguredEventsEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ConfiguredEventExResult _result = ((TotalConnect.TotalConnectService.ConfiguredEventExResult)(base.EndInvoke("GetConfiguredEventsEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEventSummary(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetEventSummary", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SummaryConfiguredEventString EndGetEventSummary(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SummaryConfiguredEventString _result = ((TotalConnect.TotalConnectService.SummaryConfiguredEventString)(base.EndInvoke("GetEventSummary", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTransactNotificationListEventsEx(string SessionID, long LocationID, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = EventNotifications;
                _args[3] = SceneTriggers;
                _args[4] = VideoTriggers;
                _args[5] = TimeTriggeredActions;
                _args[6] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("TransactNotificationListEventsEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndTransactNotificationListEventsEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("TransactNotificationListEventsEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTransactNotificationListEvents(string SessionID, long LocationID, TotalConnect.TotalConnectService.SentToPanelEvents[] SentToPanelEvents, TotalConnect.TotalConnectService.EventNotification[] EventNotifications, TotalConnect.TotalConnectService.SceneTrigger[] SceneTriggers, TotalConnect.TotalConnectService.VideoTrigger[] VideoTriggers, TotalConnect.TotalConnectService.TimeTriggeredAction[] TimeTriggeredActions, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = SentToPanelEvents;
                _args[3] = EventNotifications;
                _args[4] = SceneTriggers;
                _args[5] = VideoTriggers;
                _args[6] = TimeTriggeredActions;
                _args[7] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("TransactNotificationListEvents", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndTransactNotificationListEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("TransactNotificationListEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllNotificationConditionalStates(string SessionID, long LocationID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetAllNotificationConditionalStates", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.NotificationConditionalStateResult EndGetAllNotificationConditionalStates(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.NotificationConditionalStateResult _result = ((TotalConnect.TotalConnectService.NotificationConditionalStateResult)(base.EndInvoke("GetAllNotificationConditionalStates", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllNotificationSchedules(string SessionID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetAllNotificationSchedules", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.NotificationScheduleResult EndGetAllNotificationSchedules(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.NotificationScheduleResult _result = ((TotalConnect.TotalConnectService.NotificationScheduleResult)(base.EndInvoke("GetAllNotificationSchedules", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTransactNotificationSchedules(string SessionID, TotalConnect.TotalConnectService.NotificationSchedule[] NotificationSchedules, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = NotificationSchedules;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("TransactNotificationSchedules", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndTransactNotificationSchedules(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("TransactNotificationSchedules", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllNotificationLists(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllNotificationLists", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GetAllNotificationListsResults EndGetAllNotificationLists(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GetAllNotificationListsResults _result = ((TotalConnect.TotalConnectService.GetAllNotificationListsResults)(base.EndInvoke("GetAllNotificationLists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTransactNotificationLists(string SessionID, TotalConnect.TotalConnectService.NotificationListBaseInfo[] NotificationListCollection, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = NotificationListCollection;
                System.IAsyncResult _result = base.BeginInvoke("TransactNotificationLists", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.TransactNotificationListResults EndTransactNotificationLists(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.TransactNotificationListResults _result = ((TotalConnect.TotalConnectService.TransactNotificationListResults)(base.EndInvoke("TransactNotificationLists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendTestNotification(string SessionID, long LocationID, long NotificationListID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = LocationID;
                _args[2] = NotificationListID;
                System.IAsyncResult _result = base.BeginInvoke("SendTestNotification", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndSendTestNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("SendTestNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEventMetaData(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("GetEventMetaData", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.EventMetaDataResults EndGetEventMetaData(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.EventMetaDataResults _result = ((TotalConnect.TotalConnectService.EventMetaDataResults)(base.EndInvoke("GetEventMetaData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMediaServerConfiguration(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetMediaServerConfiguration", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.MediaServerConfigurationResults EndGetMediaServerConfiguration(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.MediaServerConfigurationResults _result = ((TotalConnect.TotalConnectService.MediaServerConfigurationResults)(base.EndInvoke("GetMediaServerConfiguration", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraConfiguration(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = MAC;
                _args[1] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraConfiguration", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraConfigurationResults EndGetCameraConfiguration(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraConfigurationResults _result = ((TotalConnect.TotalConnectService.CameraConfigurationResults)(base.EndInvoke("GetCameraConfiguration", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCameraConfiguration(string MAC, string SessionID, string CameraName, string SYSTEM_Data, string VIDEO_Data, string MOTION_Data, string IO_Data, string EVENT_Data, string PTZ_Data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = CameraName;
                _args[3] = SYSTEM_Data;
                _args[4] = VIDEO_Data;
                _args[5] = MOTION_Data;
                _args[6] = IO_Data;
                _args[7] = EVENT_Data;
                _args[8] = PTZ_Data;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCameraConfiguration", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndUpdateCameraConfiguration(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("UpdateCameraConfiguration", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetDefaultCamera(string SessionID, string MAC, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = MAC;
                _args[2] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("SetDefaultCamera", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndSetDefaultCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("SetDefaultCamera", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpgradeCameraFirmware(string MAC, string SessionID, int FirmwareVersionNumber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = MAC;
                _args[1] = SessionID;
                _args[2] = FirmwareVersionNumber;
                System.IAsyncResult _result = base.BeginInvoke("UpgradeCameraFirmware", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndUpgradeCameraFirmware(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("UpgradeCameraFirmware", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFirmwareList(string MAC, string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = MAC;
                _args[1] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetFirmwareList", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraFirmwareListResult EndGetFirmwareList(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraFirmwareListResult _result = ((TotalConnect.TotalConnectService.CameraFirmwareListResult)(base.EndInvoke("GetFirmwareList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWirelessStatus(string SessionID, string MAC, int SearchType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = MAC;
                _args[2] = SearchType;
                System.IAsyncResult _result = base.BeginInvoke("GetWirelessStatus", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraSignalStrengthResults EndGetWirelessStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraSignalStrengthResults _result = ((TotalConnect.TotalConnectService.CameraSignalStrengthResults)(base.EndInvoke("GetWirelessStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraInformation(string SessionID, string MAC, int SearchType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = MAC;
                _args[2] = SearchType;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraInformation", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CameraInformationResults EndGetCameraInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CameraInformationResults _result = ((TotalConnect.TotalConnectService.CameraInformationResults)(base.EndInvoke("GetCameraInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWAPClientsInfo(string SessionID, string MAC, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = MAC;
                System.IAsyncResult _result = base.BeginInvoke("GetWAPClientsInfo", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WAPClientsListResults EndGetWAPClientsInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WAPClientsListResults _result = ((TotalConnect.TotalConnectService.WAPClientsListResults)(base.EndInvoke("GetWAPClientsInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLocation(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionId;
                _args[1] = LocationId;
                System.IAsyncResult _result = base.BeginInvoke("GetLocation", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.LocationResult EndGetLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.LocationResult _result = ((TotalConnect.TotalConnectService.LocationResult)(base.EndInvoke("GetLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLocationSimple(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionId;
                _args[1] = LocationId;
                System.IAsyncResult _result = base.BeginInvoke("GetLocationSimple", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.LocationSimpleResult EndGetLocationSimple(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.LocationSimpleResult _result = ((TotalConnect.TotalConnectService.LocationSimpleResult)(base.EndInvoke("GetLocationSimple", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveLocation(TotalConnect.TotalConnectService.SaveLocationRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SaveLocation", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SaveLocationResponse EndSaveLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SaveLocationResponse _result = ((TotalConnect.TotalConnectService.SaveLocationResponse)(base.EndInvoke("SaveLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveLocationSimple(TotalConnect.TotalConnectService.SaveLocationSimpleRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SaveLocationSimple", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SaveLocationSimpleResponse EndSaveLocationSimple(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SaveLocationSimpleResponse _result = ((TotalConnect.TotalConnectService.SaveLocationSimpleResponse)(base.EndInvoke("SaveLocationSimple", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountryList(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetCountryList", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CountryListResult EndGetCountryList(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CountryListResult _result = ((TotalConnect.TotalConnectService.CountryListResult)(base.EndInvoke("GetCountryList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountryStateList(string SessionID, long CountryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = CountryID;
                System.IAsyncResult _result = base.BeginInvoke("GetCountryStateList", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CountryStateListResult EndGetCountryStateList(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CountryStateListResult _result = ((TotalConnect.TotalConnectService.CountryStateListResult)(base.EndInvoke("GetCountryStateList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImage(TotalConnect.TotalConnectService.GetImageRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetImage", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GetImageResponse EndGetImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GetImageResponse _result = ((TotalConnect.TotalConnectService.GetImageResponse)(base.EndInvoke("GetImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLogoImage(TotalConnect.TotalConnectService.GetLogoImageRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetLogoImage", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GetLogoImageResponse EndGetLogoImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GetLogoImageResponse _result = ((TotalConnect.TotalConnectService.GetLogoImageResponse)(base.EndInvoke("GetLogoImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetContentImage(TotalConnect.TotalConnectService.GetContentImageRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetContentImage", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GetContentImageResponse EndGetContentImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GetContentImageResponse _result = ((TotalConnect.TotalConnectService.GetContentImageResponse)(base.EndInvoke("GetContentImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginServiceVersion(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ServiceVersion", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndServiceVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("ServiceVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGPSDevices(string SessionId, long LocationId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionId;
                _args[1] = LocationId;
                System.IAsyncResult _result = base.BeginInvoke("GetGPSDevices", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GPSDevicesResult EndGetGPSDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GPSDevicesResult _result = ((TotalConnect.TotalConnectService.GPSDevicesResult)(base.EndInvoke("GetGPSDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGPSDeviceLocationData(string SessionId, long DeviceID, long LocationId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionId;
                _args[1] = DeviceID;
                _args[2] = LocationId;
                System.IAsyncResult _result = base.BeginInvoke("GetGPSDeviceLocationData", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GPSLocationResult EndGetGPSDeviceLocationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GPSLocationResult _result = ((TotalConnect.TotalConnectService.GPSLocationResult)(base.EndInvoke("GetGPSDeviceLocationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGPSDeviceGeoFence(string SessionId, long DeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionId;
                _args[1] = DeviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetGPSDeviceGeoFence", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult EndGetGPSDeviceGeoFence(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult _result = ((TotalConnect.TotalConnectService.GPSDeviceGeoFenceResult)(base.EndInvoke("GetGPSDeviceGeoFence", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEnteredGPSGeofences(string SessionId, long DeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionId;
                _args[1] = DeviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetEnteredGPSGeofences", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GeofenceListResult EndGetEnteredGPSGeofences(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GeofenceListResult _result = ((TotalConnect.TotalConnectService.GeofenceListResult)(base.EndInvoke("GetEnteredGPSGeofences", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendGPSLocateNowMessage(string SessionId, long DeviceID, long LocationId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionId;
                _args[1] = DeviceID;
                _args[2] = LocationId;
                System.IAsyncResult _result = base.BeginInvoke("SendGPSLocateNowMessage", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndSendGPSLocateNowMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("SendGPSLocateNowMessage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSavePhotoForGPSDevice(TotalConnect.TotalConnectService.SavePhotoForGPSDeviceRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SavePhotoForGPSDevice", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SavePhotoForGPSDeviceResponse EndSavePhotoForGPSDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SavePhotoForGPSDeviceResponse _result = ((TotalConnect.TotalConnectService.SavePhotoForGPSDeviceResponse)(base.EndInvoke("SavePhotoForGPSDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveGPSDeviceData(string SessionId, TotalConnect.TotalConnectService.GPSInfo GPSData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionId;
                _args[1] = GPSData;
                System.IAsyncResult _result = base.BeginInvoke("SaveGPSDeviceData", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.WebMethodResults EndSaveGPSDeviceData(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.WebMethodResults _result = ((TotalConnect.TotalConnectService.WebMethodResults)(base.EndInvoke("SaveGPSDeviceData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRequestTWMSession(string SessionID, long LocationID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = LocationID;
                System.IAsyncResult _result = base.BeginInvoke("RequestTWMSession", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.GPSPopupURLResult EndRequestTWMSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.GPSPopupURLResult _result = ((TotalConnect.TotalConnectService.GPSPopupURLResult)(base.EndInvoke("RequestTWMSession", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateSwitchIcon(string SessionID, long DeviceID, long SwitchID, byte SwitchIconID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = SwitchID;
                _args[3] = SwitchIconID;
                System.IAsyncResult _result = base.BeginInvoke("UpdateSwitchIcon", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.UpdateSwitchIconResults EndUpdateSwitchIcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.UpdateSwitchIconResults _result = ((TotalConnect.TotalConnectService.UpdateSwitchIconResults)(base.EndInvoke("UpdateSwitchIcon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateThermostatSchedule(string SessionID, long DeviceID, TotalConnect.TotalConnectService.ThermostatSchedule ThermostatSchedule, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = ThermostatSchedule;
                System.IAsyncResult _result = base.BeginInvoke("UpdateThermostatSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.UpdateThermostatScheduleResults EndUpdateThermostatSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.UpdateThermostatScheduleResults _result = ((TotalConnect.TotalConnectService.UpdateThermostatScheduleResults)(base.EndInvoke("UpdateThermostatSchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetThermostatSchedule(string SessionID, long DeviceID, long ThermostatID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = ThermostatID;
                System.IAsyncResult _result = base.BeginInvoke("GetThermostatSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ThermostatScheduleResults EndGetThermostatSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ThermostatScheduleResults _result = ((TotalConnect.TotalConnectService.ThermostatScheduleResults)(base.EndInvoke("GetThermostatSchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExecuteAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = SceneID;
                System.IAsyncResult _result = base.BeginInvoke("ExecuteAScene", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ExecuteASceneResults EndExecuteAScene(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ExecuteASceneResults _result = ((TotalConnect.TotalConnectService.ExecuteASceneResults)(base.EndInvoke("ExecuteAScene", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateEditAScene(string SessionID, long DeviceID, long SceneID, string SceneName, short SceneIconID, bool IsSceneEnabled, TotalConnect.TotalConnectService.SceneSwitch[] Automation_Switch, TotalConnect.TotalConnectService.SceneThermostat[] Automation_Thermostat, TotalConnect.TotalConnectService.SceneLock[] Automation_Lock, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = SceneID;
                _args[3] = SceneName;
                _args[4] = SceneIconID;
                _args[5] = IsSceneEnabled;
                _args[6] = Automation_Switch;
                _args[7] = Automation_Thermostat;
                _args[8] = Automation_Lock;
                System.IAsyncResult _result = base.BeginInvoke("CreateEditAScene", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.CreateEditASceneResults EndCreateEditAScene(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.CreateEditASceneResults _result = ((TotalConnect.TotalConnectService.CreateEditASceneResults)(base.EndInvoke("CreateEditAScene", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = SceneID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAScene", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SceneDeletionResults EndDeleteAScene(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SceneDeletionResults _result = ((TotalConnect.TotalConnectService.SceneDeletionResults)(base.EndInvoke("DeleteAScene", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAScene(string SessionID, long DeviceID, long SceneID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = SceneID;
                System.IAsyncResult _result = base.BeginInvoke("GetAScene", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SceneDataResults EndGetAScene(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SceneDataResults _result = ((TotalConnect.TotalConnectService.SceneDataResults)(base.EndInvoke("GetAScene", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSceneList(string SessionID, long DeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetSceneList", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.SceneListInfo EndGetSceneList(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.SceneListInfo _result = ((TotalConnect.TotalConnectService.SceneListInfo)(base.EndInvoke("GetSceneList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAutomationDeviceStatus(string SessionID, long DeviceID, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetAutomationDeviceStatus", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AutomationDataResults EndGetAutomationDeviceStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AutomationDataResults _result = ((TotalConnect.TotalConnectService.AutomationDataResults)(base.EndInvoke("GetAutomationDeviceStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAutomationDeviceStatusEx(string SessionID, long DeviceID, bool CheckDeviceStatus, string AdditionalInput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = CheckDeviceStatus;
                _args[3] = AdditionalInput;
                System.IAsyncResult _result = base.BeginInvoke("GetAutomationDeviceStatusEx", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.AutomationDataResults EndGetAutomationDeviceStatusEx(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.AutomationDataResults _result = ((TotalConnect.TotalConnectService.AutomationDataResults)(base.EndInvoke("GetAutomationDeviceStatusEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginControlALock(string SessionID, long DeviceID, long LockID, int LockDesiredState, string AuthorizingCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = LockID;
                _args[3] = LockDesiredState;
                _args[4] = AuthorizingCode;
                System.IAsyncResult _result = base.BeginInvoke("ControlALock", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.LockControlDataResults EndControlALock(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.LockControlDataResults _result = ((TotalConnect.TotalConnectService.LockControlDataResults)(base.EndInvoke("ControlALock", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginControlAThermostat(string SessionID, long DeviceID, long ThermostatID, int CurrentOpModeID, int HeatThreshold, int CoolThreshold, int ThermostatModeID, int HeatSetPoint, int CoolSetPoint, int ThermostatFanModeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = SessionID;
                _args[1] = DeviceID;
                _args[2] = ThermostatID;
                _args[3] = CurrentOpModeID;
                _args[4] = HeatThreshold;
                _args[5] = CoolThreshold;
                _args[6] = ThermostatModeID;
                _args[7] = HeatSetPoint;
                _args[8] = CoolSetPoint;
                _args[9] = ThermostatFanModeID;
                System.IAsyncResult _result = base.BeginInvoke("ControlAThermostat", _args, callback, asyncState);
                return _result;
            }
            
            public TotalConnect.TotalConnectService.ThermostatControlDataResults EndControlAThermostat(System.IAsyncResult result) {
                object[] _args = new object[0];
                TotalConnect.TotalConnectService.ThermostatControlDataResults _result = ((TotalConnect.TotalConnectService.ThermostatControlDataResults)(base.EndInvoke("ControlAThermostat", _args, result)));
                return _result;
            }
        }
    }
}
